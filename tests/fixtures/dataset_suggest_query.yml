http_interactions:
- request:
    method: get
    uri: https://api.gbif.org/v1/dataset/suggest?q=amsterdam&limit=100
    body:
      encoding: ''
      string: ''
    headers:
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/2 200 '
      content-type: application/json
    body:
      encoding: ASCII-8BIT
      file: no
      string: 
  recorded_at: 2020-12-08 23:53:43 GMT
  recorded_with: vcr/0.5.4, webmockr/0.7.0
