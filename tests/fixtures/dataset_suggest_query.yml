http_interactions:
- request:
    method: get
    uri: https://api.gbif.org/v1/dataset/suggest?q=amsterdam&limit=100
    body:
      encoding: ''
      string: ''
    headers:
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
      User-Agent: r-curl/3.3 crul/0.7.0 rOpenSci(rgbif/1.2.0)
      X-USER-AGENT: r-curl/3.3 crul/0.7.0 rOpenSci(rgbif/1.2.0)
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      date: Tue, 26 Feb 2019 15:14:35 GMT
      content-type: application/json
      access-control-allow-origin: '*'
      access-control-allow-methods: HEAD, GET, POST, DELETE, PUT, OPTIONS
      server: Jetty(9.3.z-SNAPSHOT)
      cache-control: public, max-age=3601
      x-varnish: 774439083 778436934
      age: '0'
      via: 1.1 varnish (Varnish/5.2)
      accept-ranges: bytes
      content-length: '26873'
      connection: keep-alive
    body:
      encoding: ASCII-8BIT
      string: 
  recorded_at: 2019-02-26 15:14:35 GMT
  recorded_with: vcr/0.2.6, webmockr/0.3.4
