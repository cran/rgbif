http_interactions:
- request:
    method: get
    uri: https://api.gbif.org/v1/dataset/suggest?limit=100&type=OCCURRENCE
    body:
      encoding: ''
      string: ''
    headers:
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/2 200 '
      content-type: application/json
    body:
      encoding: ASCII-8BIT
      file: no
      string: [{"key":"dd238f50-f594-4e51-82af-033227ccab55","title":"Flore du Bassin parisien (CBNBP)","description":"Jeux de données du CBNBP et de son réseau (bénévoles, associations, autres structures professionnelles). Elles intègrent principalement des données de flore vasculaire mais aussi des bryophytes, des algues notamment charophytes, des champignons y compris les lichens.","type":"OCCURRENCE"},{"key":"0d8cc344-d880-42ec-a200-40b4ad71affd","title":"Observations floristiques - plateforme SINP régionale SILENE   PACA","description":"Observations floristiques issues de la plateforme SINP régionale SILENE PACA. Ces observations sont administrées par les Conservatoires botaniques nationaux (CBN) alpin et méditerranéen sur leur territoires d'agréments respectifs (départements 04 et 05 pour le CBN Alpin ; départements 06, 13, 83, 84 pour le CBN Méditerranéen). Les observations proviennent des CBN, des partenaires et producteurs de données.","type":"OCCURRENCE"},{"key":"c4e76595-b467-4f88-8067-b8de661b99c5","title":"Données STOC-EPS","description":"Données pour le programme STOC-EPS, transmises par le CESCO (UMR 7204), à mettre à jour annuellement","type":"OCCURRENCE"},{"key":"cb850587-95f8-4ab1-83e4-a20267b3aea8","title":"Flore Franco-Belge","description":"La collecte de données a débuté en 1973. Le travail de terrain s'est terminé en 1998.\nUn atlas a été publié par l'Institut Floristique Franco-Belge en 2010.","type":"OCCURRENCE"},{"key":"31a35af0-c997-4f76-b045-9942bc14b896","title":"USGS GAP - Alaska - Vertebrates - 1867-2009","description":"The United States Geological Survey (USGS) Alaska Gap Analysis Project (GAP) compiles many smaller datasets of species occurrences to provide baseline information for conservation in Alaska, particularly when combined with other current efforts. These species occurrences (more than 1M occurrences for 300+ vertebrate species) were used with other ancillary data to generate distribution models and species range maps. The GAP models are among the first range-wide habitat models for vertebrate species at this resolution for Alaska. Prior to using Alaska GAP data, users are encouraged to become familiar with the GAP modeling process. These data provide researchers and managers with a tool for understanding the distribution of vertebrates within the context of these species habitats in Alaska.","type":"OCCURRENCE"},{"key":"8531183a-86b5-459b-a93e-37198f38f8a6","title":"Biome of Australia Soil Environments","description":"Soil provides the very basis for all our lives, largely through the provision of nutrients to plants that feed both animals and humans. As such, soil is not merely a passive player as it hosts microbial communities that are primary drivers of soil ecological processes, such as nutrient and carbon cycling, as well as being intimately involved in a range of symbiotic and pathogenic co-evolutionary relationships with plants.\n\nThe Biome of Australia Soil Environments (BASE) project is collecting DNA sequence information about microbial community composition across a range of different sites in order to create a reference map of Australia’s soil. The datasets are being made publicly available and can be linked with other measurements and data such as overland surveys, meteorological data and geological information to enhance the ecological knowledge of the Australian continent and contribute to land management strategies.\n\nThis Bioplatforms Australia Framework Data Initiative is employing amplicon (bacterial 16S, archael 16S, fungal ITS and bacterial 18S) and shotgun metagenomics sequencing approaches. Sequencing of cell sorted samples is being investigated in order to augment the dataset with the more abundant bacterial reference genomes.\n\nThe project is led by Drs Andrew Young (CSIRO), Pauline Mele (VIC Dept. Eco Dev.) and Andrew Bissett (CSIRO) in partnership with Atlas of Living Australia, Australian Antarctic Division, Australian National Data Service (ANDS), Bush Blitz, CSIRO, Department of Agriculture, Forestry and Fisheries, Department of Parks and Wildlife Western Australia, Department of The Environment (DOTE), Grains Research and Development Corporation, La Trobe University, Science and Industry Endowment Fund (SIEF), South Australian Research and Development Institute (SARDI), Tasmanian Land Conservancy, Terrestrial Ecosystem Research Network (TERN), University of Adelaide, University of New South Wales, University of Queensland, University of Tasmania, University of Western Australia, University of Western Sydney, Victorian Department of Economic Development.\n\nFor further information please visit the Bioplatforms Australia Metadata Portal: https://data.bioplatforms.com/organization/about/bpa-base\n\nProject contacts:\n\nAndrew Bissett | T: 02 6246 4820| andrew.bissett@csiro.au\nAnna Fitzgerald | T: 02 9850 1174 | afitzgerald@bioplatforms.com","type":"OCCURRENCE"},{"key":"29cd9f29-7c76-4e6b-a8b8-78d91eaf49bf","title":"Données faune pour le rapportage européen DHFF-DO 2018","description":"Observations de faune sur la partie ex Languedoc-Roussillon rattachées à la maille 10x10 km. Le jeu contient 1 061 215 observations dont 83% sont postérieures à 2010. Contient les observations de taxons faune cités dans les directives DHFF et DO à l’exception des observations d'oiseaux sensibles qui sont diffusées dans un autre jeu (3353_1) rattachées au département.","type":"OCCURRENCE"},{"key":"e0ae862b-d456-4cb2-900b-c4928b75a1f8","title":"Multistate Aquatic Resources Information System - MARIS - Fish","description":"A legacy record for a dataset generated by a cooperative effort between state and federal agencies to share fisheries information collected as part of ongoing sampling programs. MARIS data is owned and provided by participating state natural resource management agencies. This legacy dataset is hosted by the Core Science Systems Science Analytics and Synthesis Program of the U.S. Geological Survey. \n\nMARIS served data collected by a variety of agencies and organizations over various time periods. Data collection techniques, gear, and protocols may not be consistent across all datasets. Therefore, users of MARIS data should be aware of the limitations of the data available through the system.","type":"OCCURRENCE"},{"key":"28c7cc8e-3163-4c3d-ab4e-31ebd28b068d","title":"Oiseaux de France métropolitaine en hiver 1977-1981","description":"L'inventaire a officiellement été lancé à la fin de l'année 1977 et s'est terminé en 1990 (publication de l'atlas en 1991). Il couvre les 4 hivers de 1977-1978 à 1980-1981 à raison de 8 décades par hiver. Il s'agit de la première publication nationale concernant la composition, le statut, la biologie des espèces d'oiseaux présents en France au cours de l'hiver.","type":"OCCURRENCE"},{"key":"af0c7238-b6c5-4a4d-9fa7-7fb94516d0bc","title":"Liste des espèces de la faune sauvage de la base de données naturalistes Faune-France 2017.","description":"Les espèces concernées par le jeux de données regardent les taxons suivants : Amphibiens, Mammifères hors Chiroptères, Oiseaux, Orthoptères, Reptiles et Rhopalocères. Pour chaque taxon, le jeu de données a été crée à partir du tirage aléatoire d'une observation de ce taxon réalisée à l'intérieur d'une même commune. \nLa diffusion de la localisation de certaines espèces pouvant nuire à leur conservation, les observations à la maille ont été floutées à l'échelle du département (cas de la Cigogne noire, du Pélobate brun, de la Salamandre de Lanza, de la Vipère d'Orsini, du Fadet des tourbières, du Pygargue à queue blanche, du Gypaète barbu, du Grand Tétras, de la Grue cendrée, du Pic tridactyle, du Loup gris, du Lynx boréal, de l'Ours brun).","type":"OCCURRENCE"},{"key":"d38d6841-de2a-4a16-b39e-495402d8592b","title":"Observations faune et flore du Parc national des Écrins","description":"Synthèse de toutes les données récoltées par les agents du Parc National des Écrins dans différents protocoles et programmes","type":"OCCURRENCE"},{"key":"d9f7b2f6-03b3-4cd3-817b-c61949d79b1d","title":"Système d’évaluation de l’état des Eaux (SEEE) - Invertébrés","description":"Données hydrobiologiques sur l'état des eaux de surface.\nLe jeu de données a été collecté pour réaliser des évaluations nationales de l'état des eaux en support au processus DCE. Le jeu de données peut ne pas être exhaustif et reflète l'état de la donnée au moment de la collecte.","type":"OCCURRENCE"},{"key":"3942a8dc-9f01-420d-a829-01675dc01c73","title":"500,000 plant Specimens from PE Herbarium in China from 1950 to 1999","description":"500,000 plant Specimens from PE Herbarium in China from 1950 to 1999","type":"OCCURRENCE"},{"key":"fe388907-e2b6-44be-a9cb-a80b3924284c","title":"Northeast Fisheries Science Center Bottom Trawl Survey Data","description":"This is the Northeast Fisheries Science Center Bottom Trawl Survey database for Northwest Atlantic marine organisms. Survey cruises use a bottom trawl to sample randomly selected stations in an attempt to delineate the species composition, geographic distribution, and abundance of various resources. Fish and selected invertebrate species are identified. Weight, length, total catch numbers, age structures, maturity stages, sex determinations and food content are recorded or collected during the survey cruises but only weight, total catch numbers, and sex determinations are available here. Ichthyoplankton and zooplankton data is available for a subset of the stations. Geographic coverage is from Cape Hatteras to the Gulf of Maine and from the coast to the slope water.","type":"OCCURRENCE"},{"key":"ba19fc1d-670c-426b-b99d-49f003792ac4","title":"RU-BIRDS.RU, Birds observations database from Russia and neighboring regions.  Zoological Museum of M.V. Lomonosov Moscow State University.","description":"RU-BIRDS.RU, Birds observations from Russia and neighboring regions.","type":"OCCURRENCE","subtype":"OBSERVATION"},{"key":"172f1923-eff1-4d81-8bd3-6023b2224bcb","title":"Lithuanian Lepidoptera and Odonata","description":"Database on the recordings of Lepidoptera and Odonata by the Lepidopterological Society of Denmark (https://www.lepidoptera.dk/litbase). Occurrences are based on observations and collecting by any means, trapping, photos etc. Specialiss check data for errors and unusual records, mostly by contacting the observer/recorder. To assure quality of data, only selected specialists are given access to enter records in the database.","type":"OCCURRENCE"},{"key":"c967b7f3-1724-45cc-9488-129b24087e0c","title":"Flore d'Ille-et-Vilaine","description":"L'inventaire a officiellement été lancé en 1985 et a été mené jusqu'en 2004. Un atlas floristique départemental a été publié en 2005 par le Conservatoire Botanique de Brest en collaboration avec le MNHN.","type":"OCCURRENCE"},{"key":"fe99edff-54d8-43b9-a25d-57964403efa6","title":"Données Observatoire des Papillons des Jardins","description":"Données pour le programme Observatoire des Papillons des Jardins, transmises par le CESCO (UMR 7204), mise à jour annuelle","type":"OCCURRENCE"},{"key":"98c51784-da02-4f0e-81a4-f3635cb3cba7","title":"Digitalización y sistematización de las colecciones biológicas del INECOL (Herbario)","description":"<p>El presente proyecto tiene como objetivo principal  digitalizar las cinco colecciones del Instituto de Ecología, A.C.\nColección de Plantas Vasculares - Herbario XAL. A través de proyectos financiados por CONABIO para el desarrollo de sus bases de datos ha logrado aportar al Sistema Nacional de Información sobre Biodiversidad (SNIB) 262, 299 registros correspondientes al mismo número de especímenes depositados en las colecciones. De la cifra mencionada 85.5% está georreferenciada. En los últimos tres años se han incorporado al Herbario 35, 000 ejemplares, capturados en una base de datos; sin embargo, no se encuentran normalizados ni georreferenciados de acuerdo con los lineamientos establecidos por la CONABIO; se cuenta además con 5, 000 ejemplares identificados y con datos de campo provenientes de recolectas institucionales y de intercambios los cuales no han sido montados ni capturados. \nCon base en lo anterior, se propone en este proyecto procesar (montar y capturar) 5, 000 ejemplares; normalizar datos, georreferenciar las localidades sin coordenadas e incorporar 40, 000 registros en la base de datos (35, 000 registros en una base de datos no estandarizada y los 5, 000 registros nuevos a ingresar).\nColección de Hongos. Como resultado de las investigaciones micológicas realizadas en la Sección de Hongos del Herbario XAL, de las exploraciones y de intercambios con diferentes colecciones de hongos nacionales y extranjeras, se dispone de más de 54, 000 ejemplares. De ellos, en la base de datos, sólo se han incorporado 10, 000 ejemplares de Veracruz, por lo que falta mucho que incorporar. \nSe planea incorporar 5, 000 ejemplares recolectados en Veracruz, así como de diversas entidades del país e inclusive especies importantes y críticas del extranjero, con el fin de que este material esté disponible para su consulta por los especialistas e interesados en este grupo de organismos.\nHerbario del Centro Regional del Bajío (IEB). Se fundó en 1985 con la finalidad de resguardar y conservar las colecciones de plantas obtenidas durante la preparación de la Flora del Bajío y de Regiones Adyacentes. Sus colecciones se han incrementado rápidamente gracias a la incorporación de los ejemplares colectados en el proyecto, así como por los procedentes del intercambio con otros herbarios y las donaciones, por lo que tiene una representación nacional, aunque mantiene mejor representación de plantas de los estados que forman el Bajío y del occidente de México.\nSu acervo consta de 226, 775 ejemplares montados e intercalados, entre los que se encuentran 523 tipos nomenclaturales, lo que lo ubica como el cuarto herbario en importancia a nivel nacional.\nLa Xiloteca \"Dr. Faustino Miranda\" posee un acervo de de 1, 604 tablillas, que representan aproximadamente 400 géneros y 1, 000 especies de diversos países. De las 1, 604 tablillas, 570 están registradas para México.  Incluye tablillas de 25 especies arbóreas que aparecen en la lista del CITES. Cabe señalar que la mayoría de las muestras que alberga la colección han sido obtenidas por donación e intercambio. \nEn México los estudios tecnológicos sobre la madera de las diferentes especies de árboles no se han desarrollado debido en gran parte, a que la información sobre las especies nacionales que han sido estudiadas está dispersa en diversas publicaciones, por lo que su consulta resulta inaccesible. Por tal motivo es necesario contar con fuentes de información confiables y que puedan estar disponibles para ser consultadas de una manera fácil y rápida.\nCon este proyecto, se propone incrementar el acervo de nuestra xiloteca y disponer de la información con  imágenes en alta resolución. El número de muestras o tablillas de madera que serán ingresadas a la base de datos existente será de 375 muestras, mismas que incluirán dos imágenes digitales por cada una de ellas.\nJardín Botánico \"Francisco Javier Clavijero\" (JBC). Este proyecto está dirigido a mejorar la calidad de las colecciones vivas del JBC, y registrar nuevos accesos desde el 1997 a la fecha (desde el término del proyecto B140). Se incorporará información de la Colección Nacional de Bambúes iniciado en 2003-2004, continuar con la creación de acervo fotográfico de las colecciones, cotejar y corregir coordenadas tanto de las colecciones ya registradas como de los nuevos accesos. \nSe colocarán 500 microchips a plantas de las colecciones nacionales. En total se incorporarán en la base de datos 171 registros, más de 200 fotografías y se actualizarán las bases de datos ya existentes para dar de baja a los ejemplares muertos. \nColección Entomológica IEXA. La colección conserva un acervo de cerca de 210, 000 ejemplares de insectos mexicanos. Dicho acervo está dividido en seis secciones (Coleoptera Scarabaeoidea, Coleoptera diversa, Diptera, Odonata,  Hemiptera y Hymenoptera Formicidae), cada una de ellas a cargo de un investigador especialista en esos grupos (los cuales participan solo Coleoptera Passalidae, Coleoptera Diversa, Odonata, Hemiptera e Hymenoptera Formicidae). Aproximadamentel 50% lo componen las secciones mencionadas. De acuerdo con los datos de colecciones científicas mexicanas (CONABIO 1998), la Colección Entomológica IEXA estaría considerada actualmente entre los cuatro acervos entomológicos más importantes de México, con base en su cobertura nacional, por el número de especímenes incorporados, por su nivel curatorial en los grupos taxonómicos bajo estudio, así como por el resguardo de material tipo. Sin embargo, en lo general la colección requiere de la identificación de numerosos ejemplares para incorporar sus registros en las bases de datos e igualmente requiere de normalizar la información de sus bases de datos. Se incorporarán a la base de datos más de 11, 000 registros de más de 26, 000 ejemplares.</p>\n<p>Reino: 1\nFilo: 2\nClase: 7\nOrden: 94\nFamilia: 392\nGénero: 3534\nSubgénero: 25\nEspecie: 19966\nEpitetoinfraespecifico: 1657</p>","type":"OCCURRENCE"},{"key":"fe4baa57-8f75-472b-982a-7711e3739873","title":"RNF - Données de la Fédération des Réserves Catalanes","description":"Données RNF de la Fédération des Réserves Catalanes","type":"OCCURRENCE"},{"key":"0d7c6a1a-0aab-47dc-8256-f23fefac69cd","title":"Wild bees of Belgium","description":"Multidiciplinary assessment of BELgian wild BEE decline to adapt mitigation management policy (BELBEES)\nThe present dataset includes all data about Belgian wild bees since the very beginning of the regional observations. It is comprehensive until 2018. It includes not only the numerous data issued from the digitization of collection material but also literature records and a huge number of validated data from citizen science networks. see project Data for more","type":"OCCURRENCE"},{"key":"7c5e863f-3f70-4933-b05d-fc57c66dd3f3","title":"University of Colorado Museum of Natural History Herbarium Vascular Plant Collection","description":"Herbarium COLO is the Botany Section of the University of Colorado Museum of Natural History on the Boulder campus. The Herbarium is available to anyone with an interest in botany. Users include faculty and students, visiting scholars, private consultants, local naturalists, and botanists from a variety of public and private agencies. <p> <body> <table style=\"width:60%\"> <tr> <th align=\"left\">Collection</th> <th align=\"left\">Specimens</th> <th align=\"left\">Transcribed Specimens</th> <th align=\"left\">Skeletal Records</th> <th align=\"left\">Images</th> <th align=\"left\">Verified Georeferences</th> </tr> <tr> <td>Vascular Plants</td> <td>320,000</td> <td>118,828</td> <td>101,346</td> <td>217,646</td> <td>76,556</td> </tr> <tr> <td>Lichens</td> <td>101,000</td> <td>53,390</td> <td>831</td> <td>50,333</td> <td>0</td> </tr> <tr> <td>Bryophytes</td> <td>119,000</td> <td>52,158</td> <td>11,120</td> <td>63,278</td> <td>0</td> </tr> </table> </body> <p> <strong> Collection strengths: </strong> <p>Colorado, Southern Rocky Mountains and Western North American vascular plants and cryptogams, worldwide arctic and alpine, Appalachia, Galapagos Lichens, Australia, New Guinea, Altai, Mexico and the Seville Flowers Bryophyte Collection. <p><strong>Digitization:</strong><p>Digitization efforts have been focused on North American vascular plants, lichens and bryophytes with an emphasis on Colorado specimens. All Colorado vascular and cryptogam specimens have been imaged and entered into the database. Images for North American vascular plants are captured for 18 families under the Tri-Trophic TCN. North American lichen packets have been imaged and transcribed http://lichenportal.org/portal. All North American bryophyte packets have been imaged and all Colorado specimens have been transcribed and are available at http://bryophyteportal.org/portal. 110,000 vascular plant specimens worldwide and 55,000 bryophytes and 47,000 lichens from outside of North America have not been digitized.","type":"OCCURRENCE"},{"key":"c0dd99c3-fa06-499c-949e-aa44d42f2f16","title":"Inventaire Messicoles (FCBN)","description":"La liste nationale de plantes messicoles a été établie en 2000 par Aboucaya et al.. Cette liste a servi de base, en 2009, pour le recueil des données auprès des Conservatoires botaniques nationaux (CBN) et des partenaires. La liste initiale a subi quelques modifications mineures suite à l’avis donné par le comité de suivi du plan national et par les botanistes des Conservatoires botaniques nationaux.","type":"OCCURRENCE"},{"key":"0eacbbfa-45b9-41dc-b7e3-1f0773ce1477","title":"Locations of plants on dot distribution maps in the Flora of Siberia (Flora Sibiraea, 1987–1997)","description":"In 1987-1997 the 13 volumed collective monograph Flora of Siberia was published where data on systematics, ecology and distribution of 4302 native and naturalised alien vascular plant species and subspecies were presented (Flora Sibiraea, 1987–1997). Dot distribution maps for 2569 of them were made by authors of the monograph on the base of specimens stored in herbaria of Novosibirsk (NS, NSK), Tomsk (TK), Moskow (MW, MHA) and Saint Petersburg (LE). The total number of  locations on the maps are 169854. The resource contains coordinates of the locations which were geocoded by means of the standard ArcView GIS procedures.","type":"OCCURRENCE"},{"key":"ba5b0f3a-73dd-459f-a7f1-9abc327aed00","title":"Fishes of Texas Project (FoTX) Database - Darwin Core","description":"The Fishes of Texas Project aims to provide reliable occurrences of fishes from the entire extents of all of the drainage basins that intersect Texas. Starting in 2006 with the database of specimens held in the University of Texas' Ichthyology Collection (TNHCi), we added specimen data collected from our study area from all of the museums we could find to create the Fishes of Texas database. At the time, many of those were not online and all had their data in diverse formats and development of biodiversity data standards was in its infancy. We laboriously compiled these disparate sources into a schema derived from that of the Specify Collections Management software, normalizing formats and taxonomy in the process. We retain the verbatim data received from the specimen owners, but then did our own processing and quality control. We independently manually georeferenced all records, then reviewed species maps and, as possible, examined specimens for as many geographic outliers as possible, finding and correcting misidentified records, and photographing specimens and original labels of most specimens examined. The institutions holding all examined specimens have been informed of our re-determinations and other corrections, but we do not control repatriation, so users may find our records for some specimens conflict with the data they might now independently publish. The database continues to grow and evolve, but at the time of this writing it includes data from 44 specimen-holding collections, and will soon diversify to include data from non-specimen sources. Thus, the data have been carefully and thoroughly curated and verified providing a readily accessible, high-quality dataset that still contains many records that are still not openly published, for used by researchers and resource managers interested in the fish fauna of Texas and adjoining parts of its river basins. The same data can also be queried and explored in diverse ways via at (http://www.fishesoftexas.org), where users will also find additional documentation and other data-exploration tools. Please use our contact information there to notify us of any errors or other issues.","type":"OCCURRENCE"},{"key":"54f946aa-2ca9-4a51-9ee5-011219e0381e","title":"Masaryk University - Herbarium BRNU","type":"OCCURRENCE"},{"key":"724ec4af-c9a3-490b-b718-a1b202437c0f","title":"Données de l'AFB acquises selon le protocole de pêche complète à un ou plusieurs passages","description":"Données issues de l'application de saisies des données piscicoles et environnementales (ASPE) relatives au protocole de pêche à l'électricité à un ou plusieurs passages. Ce protocole est décrit dans la norme XP T 90 383 et est employé dans le cadre des réseaux de suivi DCE du compartiment piscicole.","type":"OCCURRENCE"},{"key":"8d53b914-0bd6-4b6d-a3e0-05e4407e7331","title":"Flore du Limousin","description":"La première phase d'inventaire conduite sous la direction de Askolds VILKS de la Faculté des Sciences de Limoges a donné lieu à la publication de l'Atlas de la flore vasculaire du Limousin en 2001 par le CREN Limousin. Cet inventaire fait aujourd'hui l'objet d'une actualisation, menée depuis 2010 par le Conservatoire Botanique National du Massif Central.","type":"OCCURRENCE"},{"key":"59b549c0-7da9-4095-98c1-56da90837723","title":"DEMNA-DNE : Occurrences of benthic macroinvertebrates in running waters of Wallonia, Belgium","description":"<p>\"DEMNA: Occurrences of macroinvertebrates in running waters of Wallonia\" is an occurrence-only dataset created by the Hydrobiology unit of the Direction de la Nature et de l’Eau [Département de l'Étude du Milieu Naturel et Agricole (SPW-DEMNA-DNE)].</p>\n<p>The data come from an ongoing network for the monitoring of the biological quality of running waters in Wallonia maintained under the Water Framework Directive of European Union (Directive 2000/60/CE) (European Council, 2000). The current monitoring network is composed of more than 400 sites, distributed among all streams (brooks to largest rivers/canals) from the hydrographic districts of the Meuse, the Scheldt, the Rhine and the Seine in Wallonia. Macroinvertebrates are one of the 4 indicator groups used to assess the biological quality with macrophytes, diatoms, and fishes. The macroinvertebrate occurrences are obtained by the analysis of standardized IBGN/IBGA samplings, done according a methodology derived from T90-350 (2004) French standard (see Vanden Bossche & Usseglio-Polatera, 2005 in Hydrobiologia, 551: 253-271). Some taxa encountered during the monitoring are not included into this GBIF dataset (when identification level is particularly imprecise, i.e. higher than family E.G: 'poriferans', 'Bryozoa', etc...).</p>\n<p>More information and macroinvertebrate samples are available upon request addressed to the DEMNA.</p>","type":"OCCURRENCE"},{"key":"a0a4d131-f53f-43b2-a1ba-254473b8a006","title":"Marine Invertebrate voucher specimens at the Florida Biodiversity Collection, Florida Fish and Wildlife Conservation Commission","description":"This dataset is generated from the records for specimens housed at the Fish and Wildlife Research institute (FWRI) in St. Petersburg, FL. As a division of the State of Florida’s Fish and Wildlife Conservation Commission (FWC), FWRI houses voucher specimens supporting the research and monitoring efforts of FWC staff and other state agencies, as well as depositions from academic researchers and industrial projects. The samples are largely restricted geographically to the waters in and around Florida, USA. Sampling events primarily span from the 1950s through the present.","type":"OCCURRENCE"},{"key":"e7c5a179-b6d7-497e-8fb9-41e0ef1bb21e","title":"Mammifères de France métropolitaine","description":"L'inventaire a officiellement été lancé en 1978 et s'est terminé en 1984, sauf pour les Mammifères marins. Il s'est également poursuivi dans les départements ayant fait l'objet d'enquêtes complémentaires : deux atlas départementaux ont ainsi été publiés en 1988 et 1991, pour la Loire-Atlantique et la Charente-Maritime respectivement (sous la direction de MC Saint Girons).\n\nUne démarche d'actualisation a été engagée par le MNHN et la SFEPM, et elle doit aboutir à la publication d'un nouvel atlas des mammifères de France. Le premier volume concernera les mammifères marins de métropole et d'outre-mer","type":"OCCURRENCE"},{"key":"38b69d98-e980-4a30-aaf7-f9616d34ae02","title":"Inventaire national des araignées de France métropolitaine","description":"Ce jeu de donnée contient les données transmises par les membres de l'Association française d'Arachnologie (AsFrA) dans le cadre de la convention AsFrA-INPN n°723-13.\nL'objectif du rassemblement de ces données est la création d'un atlas de répartition des araignées de France métropolitaine.","type":"OCCURRENCE"},{"key":"ec0ad39f-3370-4d51-a663-cb27abd2a6bb","title":"LACM Malacology","description":"LACM Malacology\n\nThe James H. McLean Mollusk Collection of the LACM Malacology Department is one of the largest recent mollusk collections in North America and the world … and is the largest of its kind on the Pacific Rim. The collection is predominantly dry material with lesser amounts of wet preserved specimens and includes material from all molluscan classes. It is worldwide in scope with an emphasis on the eastern Pacific Ocean (arctic Alaska to southern Chile) and includes an estimated 500,000 lots containing approximately 4.5 million specimens. Over 120,000 lots have been electronically captured, which includes over 2,300 type lots. Renowned acquired collections include those from the University of California, Los Angeles (UCLA) and the Alan Hancock Foundation at the University of Southern California (USC).","type":"OCCURRENCE"},{"key":"2e6298fb-d9d7-4915-b69d-890b5aaf91df","title":"The Lepidopterists' Society Season Summary","description":"The Lepidopterists' Society Season Summary is an annual compilation of Lepidoptera records from Canada, Mexico, and the United States. Each year our members submit information regarding range extensions, host plant associations, population dynamics, etc. Automated in 1995, the database contains all records since that time plus Saturniidae and Sphingidae records since 1971. In spite of a strict review policy, it is inevitable that the database will contain occasional errors. However, by using the database as a pointer system, the data can be valuable for the avocational collector planning a vacation as well as the professional conducting research of the highest order.","type":"OCCURRENCE"},{"key":"05da2f31-7301-49f7-b79f-f9e7d12d8b2c","title":"Puntos de presencia en Baja California (Botany)","description":"<p>Puntos de presencia en Baja California (Botany)</p>\n<p>Reino: 3\nFilo: 7\nClase: 11\nOrden: 62\nFamilia: 198\nGénero: 1401\nSubgénero: 10\nEspecie: 5270\nEpitetoinfraespecifico: 1796</p>","type":"OCCURRENCE"},{"key":"ebfe41de-79a4-492c-bd72-5c25e41237be","title":"Maui Invasive Species Committee - Pest Surveys - 1996-2011","description":"Data from the Maui region of the Hawaii Invasive Species Committee (ISC) statewide reporting system, including raw data and spatial data, developed by United States Geological Survey (USGS) and the Hawaii Biodiversity and Mapping Program (HBMP) with input from ISC and the Coordinating Group on Alien Pest Species (CGAPS). The Maui Invasive Species Committee (MISC) is a voluntary partnership of private citizens, community organizations, businesses, land owners, and government agencies to address invasive species issues on the island of Maui. MISC is fighting to protect Maui County from the most harmful invasive plants and animals that threaten our environment, economy, and quality of life.\n\nMISC works to prevent invasive species from becoming established within Maui County (Maui, Molokai, Lanai and Kahoolawe), controls invasive species on private and public property, and educates people about invasive species and how to protect Maui County.","type":"OCCURRENCE"},{"key":"b7ee2a4d-8e10-410f-a951-a7f032678ffe","title":"Muskrat captures in Flanders, Belgium","description":"<p>Muskrat captures in Flanders, Belgium is an occurrence dataset published by the Research Institute for Nature and Forest (INBO). It contains information on all officially registered captures of muskrat (Ondatra zibethicus) in and around Flanders, Belgium between 1991 and 2018. These data are provided by different management actors: the Flanders Environment Agency (VMM), Rattenbestrijding Oost-Vlaanderen (RATO vzw), Polders and Wateringen (vvpw), and provincial and municipal trappers, and aggregated and analyzed by the INBO since 1991. Here the dataset is published as a standardized Darwin Core Archive and includes for each occurrence: a stable occurrenceID, the date and location of observation, the samplingProtocol (trap) and samplingEffort (number of days or traps), the number of recorded individuals, the scientific name, and the organization who made the capture. The original dataset contains close to 450.000 occurrences and is available on GitHub, but only presence records (over 103.000) are included in this version, which can be used to track muskrat distribution in Flanders since 1991. Issues with the dataset can be reported at https://github.com/inbo/muskrat-occurrences.</p>\n<p>We have released this dataset to the public domain under a Creative Commons Zero waiver. We would appreciate it if you follow the INBO norms for data use (https://www.inbo.be/en/norms-data-use) when using the data. If you have any questions regarding this dataset, don't hesitate to contact us via the contact information provided in the metadata or via opendata@inbo.be.</p>\n<p>This dataset was published as open data for the European LIFE project MICA (https://lifemica.eu), with technical support provided by the Research Institute for Nature and Forest (INBO).</p>","type":"OCCURRENCE"},{"key":"bb71d4cb-6cc3-4730-a170-82912cc84475","title":"Auburn University Museum of Natural History Entomology","description":"The AUMNH Entomology Collection was historically the Auburn University Entomology Museum (AUEM).  Our collection of roughly half a million specimens has its strengths in: Formicidae, Chrysomelidae, Orthoptera, Simuliidae, and Siphonaptera of Alabama; Tabanidae, Scale Insects, and Ceratopogonidae.  The geographic scope of our holdings extend beyond the Southeastern United States and reflects research interests of previous and current curators and affiliated persons.","type":"OCCURRENCE"},{"key":"62b41822-5bdd-4aae-92e5-e013cf3bc8f1","title":"Inventaire de la flore de Dordogne 2015","description":"Campagne 2015 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Dordogne mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"e5850855-df3d-4209-a71f-0fa852619638","title":"Inventaire de la flore de Dordogne 2016","description":"Campagne 2016 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Dordogne mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"a559e942-0fbe-4f09-93ca-28cf244ce2a0","title":"Herbarium of University of Coimbra (COI )","description":"COI has c. 800.000 specimens, organised in separate collections due to the research priorities over the years. The General collection retains the original organisation of the herbarium and is by Dalla Torre’s Genera siphonogamarum of 1900-1907 (Gen. siphon.). The organisation of the sub-Saharan African plants emphasises the connections with the British Museum and Kew following Bentham & Hooker’s Genera plantarum of 1862-1883 (Gen. pl.). The Portuguese plants follow Pereira Coutinho’s Flora de Portugal (2nd ed., revised by R. T. Palhinha 1939). The Cryptogams are being organised alphabetically.","type":"OCCURRENCE"},{"key":"1d31211e-350e-492a-a597-34d24bbc1769","title":"Royal Botanic Gardens, Kew - Economic Botany Collection Specimens","description":"The Economic Botany Collection is one of the largest collections of specimens at the Royal Botanic Gardens, Kew. It contains about 90,000 plant raw materials and artefacts representing all aspects of craft and daily life worldwide, including medicines, textiles, basketry, dyes, gums and resins, foods and woods. The Collection was founded in 1847 as the Museum of Economic Botany and continues to grow by about 800 accessions each year.","type":"OCCURRENCE"},{"key":"7b573d12-767c-4d2c-a434-651c4e7764e8","title":"Base de données faune - DREAL Centre-Val de Loire.  Polygones","description":"Données d'occurrence de taxons faunistiques issues de l’élaboration de documents d’objectifs de sites Natura 2000, d’études diverses, de base de données de partenaires (associations naturalistes, parcs naturels régionaux, établissements publics…), du suivi de sites naturels protégés.","type":"OCCURRENCE"},{"key":"f5617d90-84bd-4f8e-8b5d-b8b816e065c8","title":"Chronicle of Nature - Phenology of Plants of Zhiguli Nature Reserve","description":"Plants Phenology dataset compiled in the context of Chronicle of Nature program in Zhiguli Nature Reserve (Russian Federation) consisting of 86524 records collected during 38 years between 1979 and 2016.","type":"OCCURRENCE"},{"key":"d3de41c3-3d5b-4fe6-aece-90c6509dc2b9","title":"Fortalecimiento de las colecciones de ECOSUR. Primera fase Lepidoptera Chetumal)","description":"<p>En este proyecto se trabajará con 21 colecciones de ECOSUR las cuales se encuentran distribuidas en tres sedes. En Chetumal se tienen 11 colecciones (Zooplancton, Ictioplancton, Poliquetos, Nemátodos, Corales, Hormigas, Mariposas, Peces, Anfibios y reptiles, Aves y Mamíferos marinos), en San Cristóbal de las Casas 6 (Insectos, Abejas, Peces, Anfibios y reptiles, Mamíferos y un Herbario) y en Tapachula 4 (Insectos, Arañas, Herbario y Hongos). Para un mejor mantenimiento y uso de las colecciones, se hará trabajo curatorial en cada una de ellas y se actualizarán sus bases de datos, las cuales serán administradas por una Unidad de Bioinformática. Todas las especies registradas en las 21 colecciones de ECOSUR que participan en este proyecto, contarán con fotografías de alta calidad para su uso en identificaciones taxonómicas. Para lograr esta meta, se contará con la participación de 16 investigadores y 7 técnicos contratados por ECOSUR, además de 9 capturistas y 14 técnicos externos y una responsable de la Unidad de Bioinformática que se contratarán con recursos de este financiamiento. También se tendrá la participación de 13 taxónomos invitados y se comprará equipo necesario para el trabajo curatorial en estas 21 colecciones. Al término del proyecto se espera tener más de 98 145 registros en bases de datos administradas por la Unidad de Bioinformática, con datos de más de 5,000 especies de más de 1,000 localidades.</p>\n<p>Reino: 1\nFilo: 1\nClase: 1\nOrden: 1\nFamilia: 6\nGénero: 306\nEspecie: 355\nEpitetoinfraespecifico: 246</p>","type":"OCCURRENCE"},{"key":"c621bdda-1e6b-4c61-ba7f-9c5848755b4e","title":"Inventaire de la flore de Gironde 2015","description":"Campagne 2015 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Gironde mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"7a8a2ad3-f09f-44b7-b6e6-c8df70030527","title":"Inventaire de la flore de Dordogne 2017","description":"Campagne 2017 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Dordogne mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"0b5f972e-0f84-4d07-9b84-96c09e2925da","title":"Données de l'AFB acquises selon le protocole de pêche partielle par points","description":"Données AFB issues de l'application de saisies des données piscicoles et environnementales (ASPE) relatives au protocole de pêche à l'électricité  par points. Ce protocole est décrit dans la norme XP T90-383 et est employé dans le cadre des réseaux de suivi DCE du compartiment piscicole.","type":"OCCURRENCE"},{"key":"ad9a46cf-9da5-4efb-ad53-f6e2ff7e1e7a","title":"Enregistrement de la faune sauvage hébergée au centre de sauvegarde du CHENE en Haute-Normandie","description":"Dans le cadre de sa mission d'accueil de tout animal sauvage temporairement incapable de subvenir seul à ses besoins, signalé par des particuliers, le centre de sauvegarde du CHENE recense les lieux et date de découverte, ainsi qu'une identification de l'espèce et une détermination des circonstances qui ont conduit l'animal a être recueilli.","type":"OCCURRENCE"},{"key":"732b8816-1367-4cb2-80f9-343063ed3442","title":"Données de la structure Naturessonne provenant de la base de donnée du SINP Île-de-France CETTIA","description":"Données de la structure Naturessonne provenant de la base de donnée du SINP Île-de-France CETTIA","type":"OCCURRENCE"},{"key":"5aa17427-58c4-4221-bb6c-20ab297d6a02","title":"Synthèse 10x10km de la faune sauvage des Directives Oiseaux et Habitats-Faune-Flore recensée via les portails gérés par la LPO de 2013 à 2017","description":"Les bases de données ont été interrogées pour répondre à une commande de la DREAL Nouvelle-Aquitaine portant sur la synthèse de données par année pour les espèces faune des Directives Oiseaux (annexes 1 et 2) et Habitats-Faune-Flore (annexes 2, 4 et 5).Sur la période 2013-2017 et pour chaque année (n=5), une observation de chaque espèce, hors sites Natura 2000 a été tirée aléatoirement par maille 10x10km. Le jeu de données est borné entre le 01/01/2013 et le 08/12/2017 (date d'export) et concerne les groupes suivants : Amphibiens, Bivalves, Chauves-souris, Coléoptères, Gastéropodes, Mammifères, Odonates, Oiseaux, Papillons de jour et Reptiles.Le jeu de données renseigne sur la présence de 261 taxons, observés sur un total de 857 mailles de l'ex-Aquitaine (Dordogne, Gironde, Landes, Lot-et-Garonne et Pyrénées-Atlantiques), de la Charente-Maritime, du Limousin et de la Vienne.","type":"OCCURRENCE"},{"key":"0d6cd6f4-b240-4fcf-9118-d2d7659e8342","title":"Données naturalistes flore et fonge du Conservatoire des espaces naturels Auvergne saisies avant le 18 février 2019.","description":"Jeu de données flore et fonge du CEN Auvergne saisies avant le 18 février 2019. \nLes protocoles de collecte de ces données sont variés (opportunistes ou standardisés). La majeure partie de ces données a été collectée sur les sites d'intervention du Conservatoire des espaces naturels d'Auvergne, dans le cadre des activités courantes du Conservatoire (réalisation de plans de gestion, suivis d’espèces indicatrices, etc.). Les données ont été récoltée par le CEN, par ses prestataires. Certaines données ont été collectées par les adhérents/bénévoles.","type":"OCCURRENCE"},{"key":"72a17f09-ceaa-4420-aff3-3bb99564774e","title":"Programme CARTHAM: Inventaire biologique dans le cadre de Natura 2000 en Mer","description":"La collecte de données a été réalisée entre 2010 et 2012. Elles ont ensuite été utilisées pour établir des cartographies des habitats marins patrimoniaux.Ce travail sera repris, de manière allégée, tous les six ans, pour répondre aux besoins de rapportages communautaires basés sur ce cycle.\nLes données ont été collectées par des bureaux d’études sur 76 sites Natura 2000 en mer, 4 périmètres à l’étude de Parcs Naturels Marins et dans la partie maritime du Parc National des Calanques.","type":"OCCURRENCE"},{"key":"40feadfa-94ea-4af3-90e1-5dffd0fb61df","title":"Database of the Distributions of Marine Fishes of Arctic Canada","description":"This dataset contains point distribution occurrences for fish species found in marine waters of Arctic Canada. It was used to create the distribution maps in the book Marine Fishes of Arctic Canada, edited by B.W. Coad and J.D. Reist (2018) and the DFO Data Report of Fisheries and Aquatic Sciences Distributional Records for Marine Fishes of Arctic Canada (Alfonso et al. 2018). The database includes literature (Coad and Reist 2016) and museum records, anecdotal reports, personal communications and data from fisheries surveys and exploratory cruises. Development of the database began in 1998 and data entry ceased in 2016, although the database will be updated periodically. Consult the book (Coad and Reist 2018) and the Data Report (Alfonso et al. 2018) for further details in regards to the specific sources for each data point by species especially those from sources other than published literature.\n\nReferences:\nAlfonso, N.R., Coad, B.W., Sawatzky, C.D., and Reist, J.D. 2018. Distributional records for marine fishes of Arctic Canada. Canadian Data Report of Fisheries and Aquatic Sciences 1287: xxii + 295 p. Coad, B.W., and Reist, J.D. 2016. Bibliography on the marine fishes of Arctic Canada. Canadian Manuscript Report of Fisheries and Aquatic Sciences 3101: v + 509 p. Coad, B.W., and Reist, J.D. (Editors). 2018. Marine Fishes of Arctic Canada. Canadian Museum of Nature and University of Toronto Press, Toronto, ON. xiii + 618 p.","type":"OCCURRENCE"},{"key":"ebf3c079-f88e-4b85-bcc5-f568229e68f3","title":"Invazivke - Invasive Alien Species in Slovenia","description":"Information system for collecting of data on invasive alien species (IAS) in Slovenia. The system includes web application and mobile application Invazivke. The system connects several other systems that gathers data on IAS.","type":"OCCURRENCE"},{"key":"41e8840e-57eb-40d4-a1ac-cfda408bc871","title":"Livre rouge de la flore menacée de France (tomes I et II) - (FCBN)","description":"Historique:\nLe programme \"Livre rouge de la flore menacée de France\" a débuté en 1987 sous l'égide du Ministère en charge de la protection de la nature, qui en a confié la coordination et la réalisation aux Conservatoires botaniques nationaux (CBN). Sa réalisation a mobilisé l’ensemble de la communauté botanique française, comprenant botanistes professionnels et bénévoles. Elle a été coordonnée par le CBN méditerranéen de Porquerolles et la Fédération des CBN. Le travail a porté, au total, sur près de 1 100 taxons de la flore vasculaire de France métropolitaine.\n\nContenu de la base transmise: \nPlus de 64 000 données d'observations sur près de 1 100 taxons (espèces, sous-espèces et variétés) de la flore rare et menacée de France\n\nRéseau de collecte:\nConservatoires botaniques nationaux :\nCBN alpin\nCBN de Bailleul\nCBN de Brest\nCBN de Corse\nCBN de Franche-Comté\nCBN des Pyrénées et de Midi-Pyrénées\nCBN du Bassin parisien\nCBN du Massif central\nCBN méditerranéen de Porquerolles\nCBN Sud-Atlantique\n\nPartenaires :\nASTERS\nConservatoire et Jardin botaniques de la ville de Nancy (CJBN)\nConservatoire du patrimoine naturel de la Savoie (CPNS)\nFloraine\nGentiana\nOffice National des Forêts (ONF)\nSociété botanique d’Alsace (SBA)\nSociété Botanique du Centre-Ouest (SBCO)\nUNIMET\nAVENIR\nSociété Française d'Orchidophilie (SFO)\nSerge Muller\nInstitut méditerranéen d'écologie et de paléoécologie (IMEP)","type":"OCCURRENCE"},{"key":"7c2b4560-397c-4ad9-b245-3064b999450a","title":"Données faune Indre Nature 2016-2017","description":"Données de faune privées et produites sur fonds publics par l'association Indre Nature en 2016 et 2017","type":"OCCURRENCE"},{"key":"d7bc133c-6427-4e66-a1aa-1132abb28e4c","title":"Données du/de la naturaliste Bottinelli Julien provenant de la base de donnée du SINP Île-de-France CETTIA","description":"Données du/de la naturaliste Bottinelli Julien provenant de la base de donnée du SINP Île-de-France CETTIA","type":"OCCURRENCE"},{"key":"b9e8d4f9-7ca5-4990-9e89-c4582cd73572","title":"Atlas des poissons d'eau douce de France métropolitaine (2011)","description":"L'inventaire national des poissons d'eau douce de France métropolitaine a officiellement été lancé en 1990. Ce jeu de données de référence est le résultat de la démarche d'inventaire qui a conduit à la publication en 2011 de l'atlas des poissons d'eau douce de France sous la coordination de P. Keith, H. Persat, E. Feunteun et J. Allardi.","type":"OCCURRENCE"},{"key":"3b6501fe-b73c-4f74-bd36-106ef7d790d0","title":"Inventaire de la flore de Gironde 2014","description":"Campagne 2014 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Gironde mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"f2e0d85b-8f0e-4045-b97e-66e5a837696c","title":"Données naturalistes de Monsieur François FOURNIER","description":"Données naturalistes de Monsieur François FOURNIER","type":"OCCURRENCE"},{"key":"5629f624-487c-4317-bf46-86030aec1468","title":"Inventaire de la flore de Lot-et-Garonne 2015","description":"Campagne 2015 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Lot-et-Garonne mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"d23e32b4-5d32-4947-b2e4-734342cb24a3","title":"Inventaire de la flore des Landes 2015","description":"Campagne 2015 du programme pluriannuel d'inventaire systématique de la flore vasculaire des Landes mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"2c4fc27a-8868-4e95-b02d-86302e4ece38","title":"Fichier communal des ongulés","description":"L'inventaire a officiellement été lancé en 1985 et s'est terminé en 1989. Il a été repris sous une autre forme par l'Office National de la Chasse et de la Faune Sauvage.","type":"OCCURRENCE"},{"key":"1876c0d1-bc99-42e6-bf9e-f9e4831023e0","title":"Inventaire de la flore de Gironde 2017","description":"Campagne 2017 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Gironde mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"36d9b785-0739-4ce9-82e7-cf5001c20104","title":"Données naturalistes faune du Conservatoire des espaces naturels Auvergne saisies avant le 18 février 2019.","description":"Jeu de données faunes du CEN Auvergne saisies avant le 18 février 2019. \nLes protocoles de collecte de ces données sont variés (opportunistes ou standardisés). La majeure partie de ces données a été collectée sur les sites d'intervention du Conservatoire des espaces naturels d'Auvergne, dans le cadre des activités courantes du Conservatoire (réalisation de plans de gestion, suivis d’espèces indicatrices, etc.). Les données ont été récoltée par le CEN, par ses prestataires. Certaines données ont été collectées par les adhérents/bénévoles.","type":"OCCURRENCE"},{"key":"e26068ea-aad4-4734-9219-d7d1805e8391","title":"The Second Breeding Bird Atlas of Vermont (2003-2007)","description":"The Vermont Breeding Bird Atlas (VBBA) is one of the most comprehensive bird surveys in Vermont. It  is completed once every 25 years during a 5-year period. Data collection for the first and second atlases were in 1976-1981 and in 2003-2007, respectively. The main goal of the first atlas was to document the spatial distribution of each bird species at a broad geographical scale. The goal of the second atlas was to survey the same lands in Vermont that were surveyed during the first atlas in order to detect changes in the distribution and status of species. In addition, in the second atlas the amount of land surveyed was doubled.","type":"OCCURRENCE"},{"key":"663bae95-7134-4cb3-9085-e9c4afbf8fb0","title":"Système d’Information Régional sur la Faune et la Flore - FNE Centre-Val de Loire - Données saisies entre 01-01-2017 et 31-03-2018","description":"Données d'occurrences d'espèces de faune issues du Système d’Information Régional sur la Faune et la Flore (SIRFF) administrée par l'association France Nature Environnement Centre-Val de Loire en collaboration avec ses associations adhérentes. Dans la typologie de la base, ces données comprennent les données de type 1 \"grand public\" et les données de type 3 \"associatives sur fonds publics\". Jeu de données saisies pour la saison 2017-2018","type":"OCCURRENCE"},{"key":"68e364c7-2e11-4fbd-9417-bbc4ce2d188a","title":"Collections paléontologiques de l'Université Rennes 1","description":"This dataset concern the specimens registered in our paleontological collections estimated to 800 000 fossils. Collections were built since the 19th century by collects, donations or purchases and constitute a global knowledge for the paleobiodiversity through times. Some specialities were developped about the palaeontology of the Paleozoic in the Armorican massif and to a lower level in Europe and North Africa (Barrande, Bézier, Chauvel, Crépin, Destombes, Deunff, Henry, Hupé, Kerforne, Lardeux, Milon, Morzadec, Philippot, Picquenard, Renaud, Racheboeuf, Rouault, Seunes, Vannier...). We have also a great number of Cenozoic molluscs and vertebrates from the Paris and Aquitaine basin but also from West of France (Allix, Brébion, Crié, Du Laurens de la Barre, Harcouët de Keravel, Le March'adour, Néraudeau, Sacher, Sirodot...). Mesozoic times are principally represented by fossils from Normandy to Charente (West of France), Pyrenees and Burgundy.","type":"OCCURRENCE"},{"key":"2bf7b2c0-34dc-4458-8ee4-4f99fac03b33","title":"Biodiversity4all Research-Grade Observations","description":"Observations from BioDiversity4All, an online social network of people sharing biodiversity information to help each other learn about nature. BioDiversity4All is maintained by Associação Biodiversidade Para Todos, and the Portuguese node of iNaturalist, a joint initiative of the California Academy of Sciences and the National Geographic Society.\n\nObservations included in this archive met the following requirements:\n\n* Published under one of the following licenses or waivers: 1) http://creativecommons.org/publicdomain/zero/1.0/, 2) http://creativecommons.org/licenses/by/4.0/, 3) http://creativecommons.org/licenses/by-nc/4.0/\n\n* Achieved one of following BioDiversity4All quality grades: Research\n\n* Created on or before 2020-02-25T18:00:33-07:00\n\nYou can view observations meeting these requirements at \nhttps://www.biodiversity4all.org/observations?created_d2=2020-02-25&photo_license=CC0,CC-BY,CC-BY-NC&place_id=7122&quality_grade=research&subview=table&verifiable=any","type":"OCCURRENCE"},{"key":"f870ac2b-3b10-4ce9-a512-fad62bcddc32","title":"Inventaire de la flore de Gironde 2016","description":"Campagne 2016 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Gironde mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"488416a3-50f1-43a0-a1ce-daf1cdbf84dd","title":"Herbarium Universitatis Daugavpiliensis","description":"Research field of Department of Biosystematics (Institute of Life Sciences and Technology, Daugavpils University) includes fundamental and applied researches in the spheres of coleopterology, biosystematics, behaviour ecology, parasitology, nanobiotechnologies, molecular biology and genetics, aquaculture, botany etc. In the sphere of biological diversity Daugavpils University maintains and supplements internationally significant herbarium collection (78 000 herbarium sheets), which is registered in the international index of herbariums Index Herbariorum (acronym DAU).\n\nTaxonomic Coverage: Vascular plants of Latvia; water macrophytes (including Charophyta) of Latvia, allochtonous vascular plants of Latvia; vascular plants of Baltics andEastern Europe\n\nGeography: Latvia, Baltics, Eastern Europe\n\nNumber of Specimens - 104600\n\nAlgae: Num. of Specimens - 640, Num. Databased - 640\nBryophytes: Num. of Specimens - 3000, Num. Databased - 0\nFungi/Lichens: Num. of Specimens - 20000, Num. Databased - 0\nPteridophytes: Num. of Specimens - 1500 , Num. Databased - 1500\nSeed Plants: Num. of Specimens - 78000, Num. Databased - 50000\n\nIncorporated Herbaria\nSKR (Latvian Research Institute of Agriculture). Fully incorporated in DAU in 2017. Worldwide herbarium of plant diseses coollected by famous mycologist J. Smarods (20 000 specimens)\n\nImportant Collectors\nE. Ozolina, K. Starcs, J. Smarods, U. Suško","type":"OCCURRENCE"},{"key":"2d684bb5-ea11-4709-ae12-8fc0a800287f","title":"Chronicle of Nature - Phenology of Plants of FSE Zapovednoe Podlemorye","description":"Plants Phenology dataset compiled in the context of Chronicle of Nature program in FSE Zapovednoe Podlemorye (Russian Federation) consisting of 54792 records collected during 43 years between 1966 and 2015.","type":"OCCURRENCE"},{"key":"7247dc2e-b862-4555-b533-7701d183271b","title":"Application INPN Espèces: Observations naturalistes, participatives et opportunistes, fondées sur des photographies","description":"Lot de données d'observations opportunistes d'espèces sauvages - faune - flore- fonge collectées via l'application mobile INPN Espèces. Ce lot concerne les données partagées et validées depuis le lancement de la version 2 de l'application, le 14/06/2018 et jusqu'au 10/10/2019. L'ensemble des données sont datées, localisées (géo-localisation précise et/ou rattachement à une commune) et fondées sur une preuve photographique (1 à 3 photographies). La détermination et/ou validation du taxon a été effectuée à l'aide des photos par des experts naturalistes. Le cas échéant, la détermination a été effectuée au genre, à la famille ou à l'ordre. \nLes photographies sont visibles sur la plateforme de détermination Déterminobs : https://determinobs.fr","type":"OCCURRENCE"},{"key":"0d8d90f4-973a-46a1-9ea1-55b0c7b222ea","title":"San Diego Natural History Museum Entomology Department","description":"Collection is heavily focused on the SW USA and NW Mexico, particularly the peninsula of Baja California. Notably strong collections of Lepidoptera and Neuroptera. The median date of specimen acquisition is 1957 with collections ranging from 1905 to present day. Current and near future collection priorities will focus on underrepresented areas in Baja California, particular inland and coastal dunes.","type":"OCCURRENCE"},{"key":"b59b09c0-2d1d-4946-ae1e-56adff92515c","title":"Données du naturaliste Christian Letourneau","description":"Données du naturaliste Christian Letourneau","type":"OCCURRENCE"},{"key":"a267b6a7-91f9-457c-889a-481e7aa920b6","title":"SIO Benthic Invertebrate Collection","description":"<p>The Scripps Institution of Oceanography Benthic Invertebrate Collection (SIO-BIC) is a research repository housing more than 50,000 lots, representing more than 800,000 specimens and more than 7,600 species from marine environments worldwide.</p>\n<p>The Collection includes extensive holdings from deep-sea environments (>1,000 m), chemosynthetic ecosystems (hydrothermal vents, hydrocarbon seeps, whale falls), Antarctica, and the eastern Pacific. Materials have been collected through a range of techniques, from intertidal hand collecting and SCUBA to trawls and deep-sea submersibles.</p>\n<p>SIO-BIC contains more than 700 type lots and considerable material properly preserved for genomic studies (95% ethanol and ultracold storage). Multiple preparation types are often available for each lot (e.g., fluid voucher, ethanol subsample, dry material). The searchable electronic database, including a map search feature and specimen images, is updated weekly and publicly accessible online at http://tinyurl.com/siobic.</p>\n<p>SIO-BIC supports scientific research by providing specimens for study of the taxonomy, biogeography, and evolution of benthic invertebrates, including the description of many new species. Specimens are available for examination at Scripps and for loan to researchers at recognized institutions worldwide, consistent with our loan policies. Collection staff and materials also support education and public outreach via undergraduate and graduate classes, school programs, guest lectures, artist collaborations, and exhibits and events at the Birch Aquarium.</p>","type":"OCCURRENCE"},{"key":"170c15ec-9705-46ce-9b9c-3b551f66ece9","title":"Données SHOC","description":"Données pour le programme SHOC, transmises par le CESCO (UMR 7204), à mettre à jour annuellement","type":"OCCURRENCE"},{"key":"95ad2dbd-a847-4ef6-8b86-1fa38d94e5fc","title":"Chronicle of Nature - Phenology of Plants of The Central Chernozem State Biosphere Nature Reserve named after Professor V.V. Alyokhin","description":"Plants Phenology dataset compiled in the context of Chronicle of Nature program in The Central Chernozem State Biosphere Nature Reserve named after Professor V.V. Alyokhin (Russian Federation) consisting of 48878 records collected during 54 years between 1961 and 2014.","type":"OCCURRENCE"},{"key":"3a04668f-4201-47f0-8ec2-69c6dbd0d238","title":"Inventaire de la flore de Dordogne 2018","description":"Campagne 2018 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Dordogne mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"63fa6322-9962-44a5-8691-24cdb26e1370","title":"Weed and native flora data for the Swan Coastal Plain","description":"Weed and native flora quadrat data compiled between 1990 - 1996 for the Southern Swan Coastal Plain\n\nCompiled and edited by Keighery, B., Keighery, G., Longman, V.M., and Clarke, K.A. 2012. Data compiled for the Departments of Environmental Protection and Conservation and Land Management.\n\nThis dataset derives from a database that has been compiled and maintained over many years. It combines the results of a number of floristic studies conducted on plant communities of the IBRA Swan Coastal Plain Bioregion (abbreviated as SWA, SEWPC 2012) south of the Moore River, hereafter referred to as the southern Swan Coastal Plain. It includes sampling site details, the flora collected at these sampling sites and the floristic community type assigned to these sampling sites. The taxonomy of the flora in the database has been updated regularly as determined by Greg and Bronwen Keighery. This dataset lists the taxonomy (including family names) which was current in this database on 23 June 2005 when this dataset was compiled.","type":"OCCURRENCE"},{"key":"8e9c7b26-44c5-4d7b-ad70-eee51cb5d1dd","title":"Amphibiens et Reptiles de France métropolitaine (Enquête 1)","description":"L'inventaire a officiellement été lancé en 1974 et s'est terminée en 1989 avec la publication d'un atlas.","type":"OCCURRENCE"},{"key":"bf97ab5c-c909-4d0b-ae3c-7d34775770f9","title":"Wikiplantbase #Italia","description":"A project for the whole national territory","type":"OCCURRENCE"},{"key":"84c00a71-0735-4a47-bf55-8556dcafa5c2","title":"BLM - National Landscape Monitoring Framework - Plants","description":"<p>This table contains monitoring data collected nationally for the BLM Landscape Monitoring Framework. Data are collected in accordance with the BLM AIM (Assessment, Inventory, and Monitoring) Strategy.  The AIM Strategy specifies a probabilistic sampling design, standard, core indicators and methods, and electronic data capture and management.  Attributes (columns) include plant species occurrence information collected using the Plant Census protocol generalized to the county level (see Entity/Attribute section).  Species occurrences inform the AIM core indicators of vegetation composition, plant species of management concern, and invasive species.  Data were collected and managed through agreements with the USDA-Natural Resources Conservation Service and the Iowa State University Center for Survey Statistics and Methodology.</p>\n<p>Purpose: This dataset was created to monitor the status, condition and trend of national BLM resources in accordance with BLM policies.  Specifically, species occurrences inform the BLM AIM core indicators of vegetation composition, plant species of management concern, and invasive species.</p>","type":"OCCURRENCE"},{"key":"170fd706-23a1-4036-b29e-57f4b2cb7bed","title":"Salinity Action Plan Flora Survey","description":"Wetland flora and vegetation of the Western Australian wheatbelt M.N. Lyons, N. Gibson, G.J. Keighery and S.D. Lyons Department of Conservation and Land Management, Science Division, PO Box 51 Wanneroo, Western Australia 6946, Australia. Abstract - Eight hundred and thirteen quadrats were surveyed to sample wetland vegetation throughout the wheatbelt and adjacent south coast of Western Australia, an area of ca. 220 000 km2. Two hundred and fourteen wetlands were intensively sampled with between one and ten quadrats placed at each wetland to capture the major vegetation zonation. A further 100 quadrats were scattered through the study area to sample particular examples of wetland vegetation. Sampling spanned the full range of elevations at wetlands from inundated basins to the adjacent landforms such as lunettes. A total of 1436 taxa of vascular plants from 109 families were recorded. Naturalized taxa were 11.8% of the flora. Four hundred and twenty-eight taxa (29.7%) were categorized as restricted to wetland habitats. These included both aquatic (53 taxa) and amphibious plants (89 taxa). The wetlands of the study area represent the world centre of diversity for annual Juncaginaceae and the subfamily Salicornioideae (Chenopodiaceae). Species richness of quadrats (100 m2) ranged from 1-72 taxa, with a mean of 20.5 taxa per quadrat. Thirty-one per cent of taxa only occurred at a single quadrat (singletons) and 59.3% occurred at less than five quadrats. Eight previously unrecognized taxa were collected for the first time and the habitats and distributions of several undescribed taxa with few previous collections were clarified. Collections were made of 78 taxa listed on the Department of Conservation and Land Management's priority flora list. Eight of these were gazetted as Declared Rare Flora (Wildlife Conservation Act, 1950) with two (Frankenia conferta and F. parvula) regarded as extinct prior to the current survey... Terrestrial flora and vegetation of the wheatbelt of south western Australia N. Gibson, G.J. Keighery, M.N. Lyons and A. Webb Science Division, Department of Conservation and Land Management, P.O. Box 51, Wanneroo, Western Australia 6065, Australia. Abstract -- Six hundred and eighty-two quadrats were located across the Western Australian wheatbelt and adjacent regions to cover as much of the geographical, edaphic and geomorphological variation of the terrestrial plant communities as possible. The study area covered 230,000 km2 or 70% of the South West Botanical Province, one of the world's 25 biodiversity hotspots. It included all or part of the six biogeographical regions centered on the wheatbelt. The native vegetation in the study area is highly fragmented with 74% having been cleared for agriculture. Clearing has not been uniform; more extensive areas of bushland remain along the southern and western margins. A total of 2609 taxa of vascular plants in 103 families was recorded from the quadrats. The species frequency pattern followed a lognormal distribution. At a scale of 400 m2, there was little difference in species richness between woodland, mallee and shrubland formations but those on duplex soils had lower species richness than those on deep sand, laterite and granite soils. Over 60% of taxa were recorded in fewer than five quadrats. These uncommon taxa were not randomly distributed but concentrated at the periphery of the study area, particularly in the west and south. At least eight previously unrecognized taxa were collected for the first time. Further collections of 15 taxa listed as Declared Rare under the Wildlife Conservation Act, and 161 taxa on the Department of Conservation and Land Management's priority flora list were made.","type":"OCCURRENCE"},{"key":"8753ad24-d1b7-4cd1-a610-d081c56b6f73","title":"Inventaire de la flore des Landes 2016","description":"Campagne 2016 du programme pluriannuel d'inventaire systématique de la flore vasculaire des Landes mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"792e64d5-c1ea-4bf2-b462-b377067cbdd1","title":"Bathing Birds - National Parks Association NSW and Birdlife Australia","type":"OCCURRENCE"},{"key":"9ae2d15c-6735-4069-b255-d737d919bcd6","title":"Inventaire de la flore de Lot-et-Garonne 2016","description":"Campagne 2016 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Lot-et-Garonne mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"43408d27-f127-490c-a15f-477acd24714e","title":"Données Birdlab","description":"Données pour le programme Birdlab, transmises par le CESCO (UMR 7204), à mettre à jour annuellement","type":"OCCURRENCE"},{"key":"253ec34a-3492-45b5-a8df-d01ebde24bd2","title":"Inventaire de la flore des Pyrénées-Atlantiques 2015","description":"Campagne 2015 du programme pluriannuel d'inventaire systématique de la flore vasculaire des Pyrénées-Atlantiques (hors massif pyrénéen) mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"a855a185-cf36-4b06-89f6-bbbce2e2805d","title":"Banded Iron Formation and Greenstone survey data","description":"The data within this broad datasource are comprised from a number of surveys undertaken over the last 14 years. Specifically:\n\n1. Data from seven ranges within the Eastern Goldfields captured during 1994-1996 (370 quadrats, 8739 records);\n2. Data from the Die Hardy, Mt Jackson, Windarling and Bungalbin ranges captured during 2005 (66 quadrats, 1898 records); and\n3. The Yilgarn Banded Iron Formation Survey from 2005-08 (1217 quadrats, 31119 records)\n\nFor more information on these datasets visit the BIF theme page by clicking on Themes | Banded Iron Formations (BIF) in the main menu.","type":"OCCURRENCE"},{"key":"9a3b74a9-f614-4d9a-9191-0dc6d471f15f","title":"Abondances et caractéristiques biologiques des juvéniles de saumons échantillonnés lors des indices d'abondance du saumon dans la rivière Scorff (France)","description":"Une étude commencée en 1993 est menée chaque année au début de l'automne (septembre à début octobre) pour quantifier l'abondance des juvéniles de saumons atlantiques dans le Scorff en Bretagne. Le protocole de pêche électrique de Prévost et Baglinière (1995) est utilisé. Il cible les jeunes saumons de l'Atlantique de l'année (tacons 0+), mais les poissons plus âgés (saumons juvéniles ≥1+) sont également capturés et inclus dans cet ensemble de données. L'échantillonnage est limité aux zones où l'eau courante peu profonde coule sur un substrat de fond grossier, c'est-à-dire l'habitat préféré des jeunes saumons de l'année. Les données consistent en des indices d'abondance et des traits biologiques mesurés sur les poissons échantillonnés : sexe, état de maturité, longueur, poids et âge. Cette dernière est déterminée à partir d'échantillons d'écailles prélevés sur les poissons dont la taille ne permet pas de déterminer leur âge sans ambiguïté.","type":"OCCURRENCE"},{"key":"27108396-6c3d-4bbd-a98f-7b8fcce2f12b","title":"Inventaire de la flore des Landes 2017","description":"Campagne 2017 du programme pluriannuel d'inventaire systématique de la flore vasculaire de Gironde mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"ffac22e7-fa1f-457f-a14a-a80ba967f4e1","title":"Données du Parc Naturel Régional de la Haute Vallée de Chevreuse provenant de la base de donnée du SINP Île-de-France CETTIA","description":"Données du Parc Naturel Régional de la Haute Vallée de Chevreuse provenant de la base de donnée du SINP Île-de-France CETTIA","type":"OCCURRENCE"},{"key":"34ca4f5c-f7bd-46d0-95a0-fe954a5074b3","title":"Inventaire de la flore de Lot-et-Garonne 2018","description":"Campagne 2018 du programme pluriannuel d'inventaire systématique de la flore vasculaire du Lot-et-Garonne mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"744edc21-8dd2-474e-8a0b-b8c3d56a3c2d","title":"Taxon occurrence data for the FungalRoot database","description":"The FungalRoot database accumulates information about plant mycorrhizal status and root colonization intensity, The database was assembled based on previously published reviews, local databases and a large number of yet neglected case studies and recent studies published in nine globally most important languages. The database enables to distinguish between reports of a presence of a particular mycorrhizal type, and reports where the plants were checked for all existing mycorrhizal types. In addition, our database provides information about the locality, ecosystem type, soil chemical data, and the method of mycorrhizal assessment that enable users to build more specific, local reference databases. The database contains 36,303 species by site observations for 14,870 plant species.","type":"OCCURRENCE"},{"key":"a5f073d3-2a88-4fe0-bdcb-e332397b4b6a","title":"Insectes Coléoptères Scarabéidés Laparosticti de France métropolitaine (enquête 1)","description":"L'inventaire a officiellement été lancé en 1979. Il s'est terminé en 1989 pour les espèces non endémiques et en 1995 pour les espèces endémiques. Il s'agit d'une compilation de données issues de la bibliographie et de collections institutionnelles et d'entomologistes amateurs. Les Coléoptères concernés sont essentiellement coprophages (bousiers) et nécrophages. Ces espèces sont considérées comme des indicateurs écologiques intéressants.","type":"OCCURRENCE"},{"key":"a3e74d8a-5944-46cb-9ea0-e0fdc37631fe","title":"Inventaire de la flore de Lot-et-Garonne 2017","description":"Campagne 2017 du programme pluriannuel d'inventaire systématique de la flore vasculaire du Lot-et-Garonne mené par le CBN Sud-Atlantique","type":"OCCURRENCE"},{"key":"27414668-00c5-4479-88ab-2462a3f30cfd","title":"Observations issues des campagnes de Suivi Aérien de la Mégafaune Marine (SAMM) en 2011 et 2012","description":"Le jeu de données contient les données issues de deux campagnes : SAMM1 pour l'hiver 2011 et SAMM2 pour l'été 2012. Ces campagnes ont été réalisées dans le cadre du programme PACOMM.","type":"OCCURRENCE"},{"key":"1c124078-9b39-4042-84af-b2f948dad993","title":"Données de l'AFB acquises selon le protocole de pêche par ambiance","description":"Données AFB issues de l'application de saisies des données piscicoles et environnementales (ASPE) relatives au protocole de pêche à l'électricité par ambiance. Ce protocole n'est pas employé dans le cadre des réseaux de suivi DCE du compartiment piscicole.","type":"OCCURRENCE"}]
  recorded_at: 2020-12-08 23:53:44 GMT
  recorded_with: vcr/0.5.4, webmockr/0.7.0
