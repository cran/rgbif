http_interactions:
- request:
    method: get
    uri: https://api.gbif.org/v1/dataset/suggest?limit=100&type=OCCURRENCE
    body:
      encoding: ''
      string: ''
    headers:
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
      User-Agent: r-curl/3.2 crul/0.6.0 rOpenSci(rgbif/1.0.4.9100)
      X-USER-AGENT: r-curl/3.2 crul/0.6.0 rOpenSci(rgbif/1.0.4.9100)
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      date: Wed, 10 Oct 2018 16:24:23 GMT
      content-type: application/json
      access-control-allow-origin: '*'
      access-control-allow-methods: HEAD, GET, POST, DELETE, PUT
      server: Jetty(9.3.z-SNAPSHOT)
      x-api-url: /v1/dataset/suggest?limit=100&type=OCCURRENCE
      cache-control: public, max-age=3601
      x-varnish: 628031640 542284675
      age: '0'
      via: 1.1 varnish (Varnish/5.2)
      accept-ranges: bytes
      content-length: '75861'
      connection: keep-alive
    body:
      encoding: ASCII-8BIT
      string: 
  recorded_at: 2018-10-10 16:24:24 GMT
  recorded_with: vcr/0.1.0, webmockr/0.2.6, crul/0.6.0
