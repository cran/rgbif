http_interactions:
- request:
    method: get
    uri: https://api.gbif.org/v1/dataset/suggest?limit=100&type=metadata&type=checklist
    body:
      encoding: ''
      string: ''
    headers:
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
      User-Agent: r-curl/4.3 crul/0.9.0 rOpenSci(rgbif/2.1.0)
      X-USER-AGENT: r-curl/4.3 crul/0.9.0 rOpenSci(rgbif/2.1.0)
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      date: Wed, 12 Feb 2020 06:01:29 GMT
      content-type: application/json
      access-control-allow-origin: '*'
      access-control-allow-methods: HEAD, GET, POST, DELETE, PUT, OPTIONS
      server: Jetty(9.3.z-SNAPSHOT)
      cache-control: public, max-age=3601
      x-varnish: 524683330 523055419
      age: '0'
      via: 1.1 varnish (Varnish/5.2)
      accept-ranges: bytes
      content-length: '108693'
      connection: keep-alive
    body:
      encoding: ASCII-8BIT
      file: no
      string: W3sia2V5IjoiN2RkZjc1NGYtZDE5My00Y2M5LWIzNTEtOTk5MDY3NTRhMDNiIiwidGl0bGUiOiJDYXRhbG9ndWUgb2YgTGlmZSIsImRlc2NyaXB0aW9uIjoiPHA+VGhpcyByZWxlYXNlIG9mIHRoZSBDYXRhbG9ndWUgb2YgTGlmZSBjb250YWlucyBjb250cmlidXRpb25zIGZyb20gMTczIGRhdGFiYXNlcyB3aXRoIGluZm9ybWF0aW9uIG9uIDEsOTAwLDk4MyBzcGVjaWVzLCAxNjEsNDk5IGluZnJhc3BlY2lmaWMgdGF4YSBhbmQgYWxzbyBpbmNsdWRlcyAxLDcxMCwwOTIgc3lub255bXMgYW5kIDQzNyw5OTQgY29tbW9uIG5hbWVzIGNvdmVyaW5nIHRoZSBmb2xsb3dpbmcgZ3JvdXBzOjwvcD5cbjxwPlZpcnVzZXMgKiBWaXJ1c2VzIGFuZCBTdWJ2aXJhbCBhZ2VudHMgZnJvbSBJQ1RWX01TTFxuQmFjdGVyaWEgYW5kIEFyY2hhZWEgZnJvbSBCSU9TXG5DaHJvbWlzdGEgKiBDaHJvbWlzdGFuIGZ1bmdpIGZyb20gU3BlY2llcyBGdW5nb3J1bVxuUHJvdG96b2EgKiBNYWpvciBncm91cHMgZnJvbSBJVElTIFJlZ2lvbmFsLCAqIENpbGlhdGVzIGZyb20gQ2lsQ2F0LCAqIFBvbHljeXN0aW5lcyBmcm9tIFdvUk1TIFBvbHljeXN0aW5hIFVQREFURUQhLCAqIFByb3Rvem9hbiBmdW5naSBmcm9tIFNwZWNpZXMgRnVuZ29ydW0gYW5kIFRyaWNob215Y2V0ZXMgZGF0YWJhc2UgKiBTbGltZSBtb3VsZHMgZnJvbSBOb21lbi5ldW15Y2V0b3pvYS5jb21cbkZ1bmdpICogVmFyaW91cyB0YXhhIGluIHdob2xlIG9yIGluIHBhcnQgZnJvbSBDQUJJIEJpb3NlcnZpY2VzIGRhdGFiYXNlcyAoU3BlY2llcyBGdW5nb3J1bSwgUGh5bGxhY2hvcmFsZXMsIFJoeXRpc21hdGFsZXMsIFNhY2NoYXJvbXljZXRlcyBhbmQgWnlnb215Y2V0ZXMgZGF0YWJhc2VzKSBhbmQgZnJvbSB0aHJlZSBvdGhlciBkYXRhYmFzZXMgY292ZXJpbmcgWHlsYXJpYWNlYWUsIEdsb21lcm9teWNvdGEsIFRyaWNob215Y2V0ZXMsIERvdGhpZGVvbXljZXRlcyAqIExpY2hlbnMgZnJvbSBMSUFTXG5QbGFudGFlIChQbGFudHMpICogTW9zc2VzIGZyb20gTU9TVCAqIExpdmVyd29ydHMgYW5kIGhvcm53b3J0cyBmcm9tIEVMUFQgKiBDb25pZmVycyBmcm9tIENvbmlmZXIgRGF0YWJhc2UgKiBDeWNhZHMgYW5kIDYgZmxvd2VyaW5nIHBsYW50IGZhbWlsaWVzIGZyb20gSU9QSS1HUEMsIGFuZCA5OSBmYW1pbGllcyBmcm9tIFdDU1AgKiBQbHVzIGluZGl2aWR1YWwgZmxvd2VyaW5nIHBsYW50cyBmYW1pbGllcyBmcm9tIEFubm9uQmFzZSwgQnJhc3NpY2FjZWFlLCBDaGVub0Jhc2UsIERyb3NlcmFjZWFlIERhdGFiYXNlLCBFYmVuYUJhc2UsIEdDQywgSUxESVMsIExlY3lQYWdlcywgTEhELCBNRUxuZXQsIFJKQiBHZXJhbml1bSwgU29sYW5hY2VhZSBTb3VyY2UsIFVtYmVsbGlmZXJzLlxuQW5pbWFsaWEgKEFuaW1hbHMpICogTWFyaW5lIGdyb3VwcyBmcm9tIFVSTU8sIElUSVMgR2xvYmFsLCBIZXhhY29yYWxzLCBFVEkgV0JEIChFdXBoYXVzaWFjZWEpLCBXb1JNUzogV29STVMgQXN0ZXJvaWRlYSBVUERBVEVEISwgV29STVMgQm9jaHVzYWNlYSBVUERBVEVEISwgV29STVMgQnJhY2hpb3BvZGEgVVBEQVRFRCEsIFdvUk1TIEJyYWNoeXBvZGEgVVBEQVRFRCEsIFdvUk1TIEJyYWNoeXVyYSBVUERBVEVEISwgV29STVMgQnJ5b3pvYSBVUERBVEVEISwgV29STVMgQ2VzdG9kYSBVUERBVEVEISwgV29STVMgQ2hhZXRvZ25hdGhhIFVQREFURUQhLCBXb1JNUyBDdW1hY2VhIFVQREFURUQhLCBXb1JNUyBFY2hpbm9pZGVhIFVQREFURUQhLCBXb1JNUyBHYXN0cm90cmljaGEgVVBEQVRFRCEsIFdvUk1TIEduYXRob3N0b211bGlkYSBVUERBVEVEISwgV29STVMgSG9sb3RodXJvaWRlYSBVUERBVEVEISwgV29STVMgSHlkcm96b2EgVVBEQVRFRCEsIFdvUk1TIElzb3BvZGEgVVBEQVRFRCEsIFdvUk1TIExlcHRvc3RyYWNhIFVQREFURUQhLCBXb1JNUyBNb25vZ2VuZWEgVVBEQVRFRCEsIFdvUk1TIE15c3RhY29jYXJpZGEgVVBEQVRFRCEsIFdvUk1TIE15eG96b2EgVVBEQVRFRCEsIFdvUk1TIE5lbWVydGVhIFVQREFURUQhLCBXb1JNUyBPbGlnb2NoYWV0YSBVUERBVEVEISwgV29STVMgT3BoaXVyb2lkZWEgVVBEQVRFRCEsIFdvUk1TIFBob3JvbmlkYSBVUERBVEVEISwgV29STVMgUGxhY296b2EgVVBEQVRFRCEsIFdvUk1TIFBvbHljaGFldGEgVVBEQVRFRCEsIFdvUk1TIFBvbHljeXN0aW5hIFVQREFURUQhLCBXb1JNUyBQb3JpZmVyYSBVUERBVEVEISwgV29STVMgUHJpYXB1bGlkYSBVUERBVEVEISwgV29STVMgUHJvc2VyaWF0YS1LYWx5cHRvcmh5bmNoaWEgVVBEQVRFRCEsIFdvUk1TIFJlbWlwZWRpYSBVUERBVEVEISwgV29STVMgU2NhcGhvcG9kYSBVUERBVEVEISwgV29STVMgVGFuYWlkYWNlYSBVUERBVEVEISwgV29STVMgVGFudHVsb2NhcmlkYSBVUERBVEVEISwgV29STVMgVGhlcm1vc2JhZW5hY2VhIFVQREFURUQhLCBXb1JNUyBUcmVtYXRvZGEgVVBEQVRFRCEsIFdvUk1TIFhlbm90dXJiZWxsaWRhIFVQREFURUQhICogUm90aWZlcnMsIG1heWZsaWVzLCBmcmVzaHdhdGVyIGhhaXJ3b3JtcywgcGxhbmFyaWFucyBmcm9tIEZBREEgZGF0YWJhc2VzOiBGQURBIFJvdGlmZXJhLCBGQURBIEVwaGVtZXJvcHRlcmEsIEZBREEgTmVtYXRvbW9ycGhhICZhbXA7IEZBREEgVHVyYmVsbGFyaWEgKiBFbnRvcHJvY3RzLCB3YXRlciBiZWFycyBmcm9tIElUSVMgR2xvYmFsICogU3BpZGVycywgc2NvcnBpb25zLCB0aWNrcyAmYW1wOyBtaXRlcyBmcm9tIFNwaWRDYXQgdmlhIElUSVMsIFNhbHRpY2lkREIgLCBJVElTIEdsb2JhbCwgVGlja3NCYXNlLCBTcG1XZWIgQmRlbGxvaWRlYUJhc2UgVVBEQVRFRCEgJmFtcDsgTWl0ZXMgR1NEczogT2xvZ2FtYXNpZEJhc2UsIFBoeXRvc2VpaWRCYXNlLCBSaG9kYWNhcmlkQmFzZSAmYW1wOyBUZW51aXBhbHBpZEJhc2UgKiBEaXBsb3BvZHMsIGNlbnRpcGVkZXMsIHBhdXJvcG9kcyBhbmQgc3ltcGh5bGFucyBmcm9tIFN5c015ciBVUERBVEVEISAmYW1wOyBDaGlsb0Jhc2UgKiBEcmFnb25mbGllcyBhbmQgZGFtc2VsZmxpZXMgZnJvbSBPZG9uYXRhIGRhdGFiYXNlICogU3RvbmVmbGllcyBmcm9tIFBsZWNvcHRlcmFTRiAqIENvY2tyb2FjaGVzIGZyb20gQmxhdHRvZGVhU0YgKiBQcmF5aW5nIG1hbnRpZHMgZnJvbSBNYW50b2RlYVNGICogU3RpY2sgYW5kIGxlYWYgaW5zZWN0cyBmcm9tIFBoYXNtaWRhU0YgKiBHcmFzc2hvcHBlcnMsIGxvY3VzdHMsIGthdHlkaWRzIGFuZCBjcmlja2V0cyBmcm9tIE9ydGhvcHRlcmFTRiAqIFdlYnNwaW5uZXJzIGZyb20gRW1iaW9wdGVyYVNGICogQmFyayAmYW1wOyBwYXJhc2l0aWMgbGljZXMgZnJvbSBQc29jb2RlYVNGICogU29tZSBncm91cHMgb2YgdHJ1ZSBidWdzIGZyb20gU2NhbGVOZXQsIEZMT1csIENPT0wsIFBzeWxsaXN0LCBBcGhpZFNGICwgTUJCLCAzaSBDaWNhZGVsbGluYWUsIDNpIFR5cGhsb2N5YmluYWUsIE1PV0QgJmFtcDsgQ29yZW9pZGVhU0YqIFR3aXN0ZWQtd2luZyBwYXJhc2l0ZXMgZnJvbSBTdHJlcHNpcHRlcmEgRGF0YWJhc2UgKiBMYWNld2luZ3MsIGFudGxpb25zLCBvd2xmbGllcywgZmlzaGZsaWVzLCBkb2Jzb25mbGllcyAmYW1wOyBzbmFrZWZsaWVzIGZyb20gTERMIE5ldXJvcHRlcmlkYSAqIFNvbWUgYmVldGxlIGdyb3VwcyBmcm9tIHRoZSBTY2FyYWJzIFVQREFURUQhLCBUSVRBTiwgV1RheGEgJmFtcDsgSVRJUyBHbG9iYWwgKiBGbGVhcyBmcm9tIFBhcmhvc3QgKiBGbGllcywgbW9zcXVpdG9lcywgYm90cywgbWlkZ2VzIGFuZCBnbmF0cyBmcm9tIFN5c3RlbWEgRGlwdGVyb3J1bSwgQ0NXICZhbXA7IENJUEEgKiBCdXR0ZXJmbGllcyBhbmQgbW90aHMgZnJvbSBMZXBJbmRleCwgR2xvQklTIChHQVJUKSwgVGluZWlkYWUgTkhNLCBXb3JsZCBHcmFjaWxsYXJpaWRhZSAqIEJlZXMgJmFtcDsgd2FzcHMgZnJvbSBJVElTIEJlZXMsIFRheGFwYWQgSWNobmV1bW9ub2lkZWEsIFVDRCwgWk9CT0RBVCBWZXNwb2lkZWEgJmFtcDsgSHltSVMgUmhvcGFsb3NvbWF0aWRhZSogTW9sbHVzY3MgZnJvbSBXb1JNUyBNb2xsdXNjYSBVUERBVEVEISwgRkFEQSBCaXZhbHZpYSwgTW9sbHVzY2FGVyAmYW1wOyBBRkQgKFB1bG1vbmF0YSkgKiBGaXNoZXMgZnJvbSBGaXNoQmFzZSAqIFJlcHRpbGVzIGZyb20gUmVwdGlsZURCIFVQREFURUQhICogQW1waGliaWFucywgYmlyZHMgYW5kIG1hbW1hbHMgZnJvbSBJVElTIEdsb2JhbCBQTFVTIGFkZGl0aW9uYWwgc3BlY2llcyBvZiBtYW55IGdyb3VwcyBmcm9tIElUSVMgUmVnaW9uYWwsIE5aSUIgYW5kIENvTCBDaGluYTwvcD4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIiwic3VidHlwZSI6IlRBWE9OT01JQ19BVVRIT1JJVFkifSx7ImtleSI6ImQ5YTRlZWRiLWU5ODUtNDQ1Ni1hZDQ2LTNkZjg0NzJlMDBlOCIsInRpdGxlIjoiVGhlIFBsYW50IExpc3Qgd2l0aCBsaXRlcmF0dXJlIiwiZGVzY3JpcHRpb24iOiJUaGlzIGRhdGFzZXQgaXMgYSBkZXJpdmF0aXZlIHdvcmsgdW5kZXIgdGhlIFwiVGVybXMgb2YgVXNlIGZvciBUaGUgUGxhbnQgTGlzdFwiIGh0dHA6Ly93d3cudGhlcGxhbnRsaXN0Lm9yZy8xLjEvdGVybXMvIHRoYXQgKGEpIGNvbnZlcnRzIFRoZSBQbGFudCBMaXN0IHZlcnNpb24gMS4xIENTViBmaWxlcyBpbnRvIGEgRGFyd2luIENvcmUgQXJjaGl2ZSwgYW5kIChiKSBhZGRzIGlkZW50aWZpZXJzIChlLmcuLCBET0lzKSBhbmQgY29tcGxldGUgYmlibGlvZ3JhcGhpYyBkZXRhaWxzIHRvIHRoZSBvcmlnaW5hbCBjaXRhdGlvbnMgZm9yIG1hbnkgb2YgdGhlIHBsYW50IG5hbWVzLjwvYnI+VGhlIFBsYW50IExpc3QgaHR0cDovL3d3dy50aGVwbGFudGxpc3Qub3JnLyBpcyBhIHdvcmtpbmcgbGlzdCBvZiBhbGwga25vd24gcGxhbnQgc3BlY2llcy4gVmVyc2lvbiAxLjEsIHJlbGVhc2VkIGluIFNlcHRlbWJlciAyMDEzLCBhaW1zIHRvIGJlIGNvbXByZWhlbnNpdmUgZm9yIHNwZWNpZXMgb2YgVmFzY3VsYXIgcGxhbnQgKGZsb3dlcmluZyBwbGFudHMsIGNvbmlmZXJzLCBmZXJucyBhbmQgdGhlaXIgYWxsaWVzKSBhbmQgb2YgQnJ5b3BoeXRlcyAobW9zc2VzIGFuZCBsaXZlcndvcnRzKS4gSXQgZG9lcyBub3QgaW5jbHVkZSBhbGdhZSBvciBmdW5naS4gVmVyc2lvbiAxLjEgY29udGFpbnMgMSwyOTMsNjg1IHNjaWVudGlmaWMgcGxhbnQgbmFtZXMgb2Ygd2hpY2ggMzUwLDY5OSBhcmUgYWNjZXB0ZWQgc3BlY2llcyBuYW1lcy4gSXQgaW5jbHVkZXMgbm8gdmVybmFjdWxhciBvciBjb21tb24gcGxhbnQgbmFtZXMuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiMDQ2YmJjNTAtY2FlMi00N2ZmLWFhNDMtNzI5ZmJmNTNmN2M1IiwidGl0bGUiOiJJbnRlcm5hdGlvbmFsIFBsYW50IE5hbWVzIEluZGV4IiwiZGVzY3JpcHRpb24iOiJUaGUgSW50ZXJuYXRpb25hbCBQbGFudCBOYW1lcyBJbmRleCAoSVBOSSkgaXMgYSBkYXRhYmFzZSBvZiB0aGUgbmFtZXMgYW5kIGFzc29jaWF0ZWQgYmFzaWMgYmlibGlvZ3JhcGhpY2FsIGRldGFpbHMgb2Ygc2VlZCBwbGFudHMsIGZlcm5zIGFuZCBseWNvcGh5dGVzLiBcblx0XHRcdFx0SXRzIGdvYWwgaXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciByZXBlYXRlZCByZWZlcmVuY2UgdG8gcHJpbWFyeSBzb3VyY2VzIGZvciBiYXNpYyBiaWJsaW9ncmFwaGljIGluZm9ybWF0aW9uIGFib3V0IHBsYW50IG5hbWVzLiBcblx0XHRcdFx0VGhlIGRhdGEgYXJlIGZyZWVseSBhdmFpbGFibGUgYW5kIGFyZSBncmFkdWFsbHkgYmVpbmcgc3RhbmRhcmRpemVkIGFuZCBjaGVja2VkLiBcblx0XHRcdFx0SVBOSSBpcyBhIGR5bmFtaWMgcmVzb3VyY2UsIGRlcGVuZGluZyBvbiBkaXJlY3QgY29udHJpYnV0aW9ucyBieSBhbGwgbWVtYmVycyBvZiB0aGUgYm90YW5pY2FsIGNvbW11bml0eS5cblx0XHRcdFx0SVBOSSBpcyB0aGUgcHJvZHVjdCBvZiBhIGNvbGxhYm9yYXRpb24gYmV0d2VlbiBUaGUgUm95YWwgQm90YW5pYyBHYXJkZW5zLCBLZXcsIFRoZSBIYXJ2YXJkIFVuaXZlcnNpdHkgSGVyYmFyaWEsIGFuZCB0aGUgQXVzdHJhbGlhbiBOYXRpb25hbCBIZXJiYXJpdW0uIiwidHlwZSI6IkNIRUNLTElTVCIsInN1YnR5cGUiOiJOT01FTkNMQVRPUl9BVVRIT1JJVFkifSx7ImtleSI6IjZjZmQ2N2Q2LTRmOWItNDAwYi04NTQ5LTE5MzNhYzI3OTM2ZiIsInRpdGxlIjoiR0JJRiBUeXBlIFNwZWNpbWVuIE5hbWVzIiwiZGVzY3JpcHRpb24iOiJBIGNoZWNrbGlzdCBvZiBuYW1lcyBleHRyYWN0ZWQgZnJvbSBhbGwgR0JJRiB0eXBlIHNwZWNpbWVuIHdpdGggcGFyc2FibGUgbmFtZXMuXG4gICAgICAgICAgICAgICAgVGhlIGxpc3QgdXNlcyB0aGUgdmVyYmF0aW0sIG9yaWdpbmFsIGRhdGEgbm90IGludGVycHJldGVkIGJ5IEdCSUYgd2l0aCB0aGUgZXhjZXB0aW9uXG4gICAgICAgICAgICAgICAgb2YgdGhlIG5hbWUgaXRzZWxmIHdoaWNoIGlzIHBhcnNlZCB1c2luZyB0aGUgR0JJRiBOYW1lIFBhcnNlci5cbiAgICAgICAgICAgICAgICBUaGUgZGV0YWlsZWQgcHJvY2VkdXJlIGNhbiBiZSBmb3VuZCBhdCBodHRwczovL2dpdGh1Yi5jb20vZ2JpZi90eXBlLXNwZWNpbWVuLWNoZWNrbGlzdC4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIyZDU5ZTVkYi01N2FkLTQxZmYtOTdkNi0xMWY1ZmIyNjQ1MjciLCJ0aXRsZSI6IldvcmxkIFJlZ2lzdGVyIG9mIE1hcmluZSBTcGVjaWVzIiwiZGVzY3JpcHRpb24iOiJBbiBhdXRob3JpdGF0aXZlIGNsYXNzaWZpY2F0aW9uIGFuZCBjYXRhbG9ndWUgb2YgbWFyaW5lIG5hbWVzIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiOWNhOTI1NTItZjIzYS00MWE4LWExNDAtMDFhYmFhMzFjOTMxIiwidGl0bGUiOiJJbnRlZ3JhdGVkIFRheG9ub21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gKElUSVMpIiwiZGVzY3JpcHRpb24iOiJUaGUgV2hpdGUgSG91c2UgU3ViY29tbWl0dGVlIG9uIEJpb2RpdmVyc2l0eSBhbmQgRWNvc3lzdGVtIER5bmFtaWNzIGhhcyBpZGVudGlmaWVkIHN5c3RlbWF0aWNzIGFzIGEgcmVzZWFyY2ggcHJpb3JpdHkgdGhhdCBpcyBmdW5kYW1lbnRhbCB0byBlY29zeXN0ZW0gbWFuYWdlbWVudCBhbmQgYmlvZGl2ZXJzaXR5IGNvbnNlcnZhdGlvbi4gVGhpcyBwcmltYXJ5IG5lZWQgaWRlbnRpZmllZCBieSB0aGUgU3ViY29tbWl0dGVlIHJlcXVpcmVzIGltcHJvdmVtZW50cyBpbiB0aGUgb3JnYW5pemF0aW9uIG9mLCBhbmQgYWNjZXNzIHRvLCBzdGFuZGFyZGl6ZWQgbm9tZW5jbGF0dXJlLiBJVElTIChvcmlnaW5hbGx5IHJlZmVycmVkIHRvIGFzIHRoZSBJbnRlcmFnZW5jeSBUYXhvbm9taWMgSW5mb3JtYXRpb24gU3lzdGVtKSB3YXMgZGVzaWduZWQgdG8gZnVsZmlsbCB0aGVzZSByZXF1aXJlbWVudHMuIEluIHRoZSBmdXR1cmUsIHRoZSBJVElTIHdpbGwgcHJvdmlkZSB0YXhvbm9taWMgZGF0YSBhbmQgYSBkaXJlY3Rvcnkgb2YgdGF4b25vbWljIGV4cGVydGlzZSB0aGF0IHdpbGwgc3VwcG9ydCB0aGUgc3lzdGVtLlxuXG5UaGUgSVRJUyBpcyB0aGUgcmVzdWx0IG9mIGEgcGFydG5lcnNoaXAgb2YgZmVkZXJhbCBhZ2VuY2llcyBmb3JtZWQgdG8gc2F0aXNmeSB0aGVpciBtdXR1YWwgbmVlZHMgZm9yIHNjaWVudGlmaWNhbGx5IGNyZWRpYmxlIHRheG9ub21pYyBpbmZvcm1hdGlvbi4gU2luY2UgaXRzIGluY2VwdGlvbiwgSVRJUyBoYXMgZ2FpbmVkIHZhbHVhYmxlIG5ldyBwYXJ0bmVycyBhbmQgdW5kZXJnb25lIGEgbmFtZSBjaGFuZ2U7IElUSVMgbm93IHN0YW5kcyBmb3IgdGhlIEludGVncmF0ZWQgVGF4b25vbWljIEluZm9ybWF0aW9uIFN5c3RlbS5cblxuVGhlIGdvYWwgaXMgdG8gY3JlYXRlIGFuIGVhc2lseSBhY2Nlc3NpYmxlIGRhdGFiYXNlIHdpdGggcmVsaWFibGUgaW5mb3JtYXRpb24gb24gc3BlY2llcyBuYW1lcyBhbmQgdGhlaXIgaGllcmFyY2hpY2FsIGNsYXNzaWZpY2F0aW9uLiBUaGUgZGF0YWJhc2Ugd2lsbCBiZSByZXZpZXdlZCBwZXJpb2RpY2FsbHkgdG8gZW5zdXJlIGhpZ2ggcXVhbGl0eSB3aXRoIHZhbGlkIGNsYXNzaWZpY2F0aW9ucywgcmV2aXNpb25zLCBhbmQgYWRkaXRpb25zIG9mIG5ld2x5IGRlc2NyaWJlZCBzcGVjaWVzLiBUaGUgSVRJUyBpbmNsdWRlcyBkb2N1bWVudGVkIHRheG9ub21pYyBpbmZvcm1hdGlvbiBvZiBmbG9yYSBhbmQgZmF1bmEgZnJvbSBib3RoIGFxdWF0aWMgYW5kIHRlcnJlc3RyaWFsIGhhYml0YXRzLlxuXG5UaGUgb3JpZ2luYWwgSVRJUyBwYXJ0bmVycyBpbmNsdWRlOlxuRGVwYXJ0bWVudCBvZiBDb21tZXJjZVxuICAgIE5hdGlvbmFsIE9jZWFuaWMgYW5kIEF0bW9zcGhlcmljIEFkbWluaXN0cmF0aW9uIChOT0FBKVxuRGVwYXJ0bWVudCBvZiBJbnRlcmlvciAoRE9JKVxuICAgIEdlb2xvZ2ljYWwgU3VydmV5IChVU0dTKVxuRW52aXJvbm1lbnRhbCBQcm90ZWN0aW9uIEFnZW5jeSAoRVBBKVxuRGVwYXJ0bWVudCBvZiBBZ3JpY3VsdHVyZSAoVVNEQSlcbiAgICBBZ3JpY3VsdHVyZSBSZXNlYXJjaCBTZXJ2aWNlIChBUlMpXG4gICAgTmF0dXJhbCBSZXNvdXJjZXMgQ29uc2VydmF0aW9uIFNlcnZpY2UgKE5SQ1MpXG5TbWl0aHNvbmlhbiBJbnN0aXR1dGlvblxuICAgIE5hdGlvbmFsIE11c2V1bSBvZiBOYXR1cmFsIEhpc3RvcnkgKE5NTkgpXG5cblRoZXNlIGFnZW5jaWVzIHNpZ25lZCBhIE1lbW9yYW5kdW0gb2YgVW5kZXJzdGFuZGluZyBhbmQgaGF2ZSBmb3JtZWQgYSBTdGVlcmluZyBDb21taXR0ZWUgdGhhdCBkaXJlY3RzIHR3byB0ZWNobmljYWwgd29yayBncm91cHMgLSB0aGUgRGF0YWJhc2UgV29yayBHcm91cCAoRFdHKSBhbmQgdGhlIFRheG9ub215IFdvcmsgR3JvdXAgKFRXRykuIFRoZSBEV0cgaXMgcmVzcG9uc2libGUgZm9yIHRoZSBkYXRhYmFzZSBkZXNpZ24gYW5kIG92ZXJzZWVpbmcgZGV2ZWxvcG1lbnQgb2YgdGhlIHN5c3RlbSB0byBtZWV0IHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIElUSVMgcGFydG5lcnMuIFRoZSBUV0cgaXMgcmVzcG9uc2libGUgZm9yIHRoZSBxdWFsaXR5IGFuZCBpbnRlZ3JpdHkgb2YgdGhlIGRhdGFiYXNlIGluZm9ybWF0aW9uLiBJbiBhZGRpdGlvbiB0byB0aGUgZGF0YWJhc2UsIHRoZSB3b3JraW5nIGdyb3VwcyBoYXZlIGNyZWF0ZWQgJiMzNDtUYXhvbm9taWMgV29ya2JlbmNoJiMzNDsgc29mdHdhcmUgZGVzaWduZWQgZm9yIGVhc3kgZW50cnkgYW5kIG1hbmlwdWxhdGlvbiBvZiB0YXhvbm9taWMgZGF0YS5cblxuUHJpbWFyeSBvYmplY3RpdmVzIG9mIHRoZSBUV0cgaW5jbHVkZSB0aGUgcmV2aWV3IG9mIGRhdGEgcHJpb3IgdG8gaW5jb3Jwb3JhdGlvbiBpbnRvIHRoZSBJVElTIGFuZCB0aGUgZXN0YWJsaXNobWVudCBvZiBhIHByb2Nlc3MgZm9yIHBlcmlvZGljIHBlZXIgcmV2aWV3IHRvIGVuc3VyZSBkYXRhIHF1YWxpdHkuIFRoZSBUV0cgaGFzIGV2YWx1YXRlZCB0aGUgdGF4b25vbWljIGluZm9ybWF0aW9uIHByaW9yaXRpZXMgb2YgdGhlIGFnZW5jaWVzIGFuZCBpcyBsb2NhdGluZyBkYXRhIHNvdXJjZXMgZm9yIHRoZSBoaWdoZXN0IHByaW9yaXR5IGdyb3Vwcy4gRWZmb3J0cyB0byBnYXRoZXIgZGF0YSBhcmUgaGVscGluZyB0byBpZGVudGlmeSBnYXBzIGluIHRheG9ub21pYyBjb3ZlcmFnZSBpbiBib3RoIHNjaWVudGlmaWMgZXhwZXJ0aXNlIGFuZCBhdmFpbGFibGUgaW5mb3JtYXRpb24uIFRoZSBUV0cgaG9wZXMgdG8gcHJvbW90ZSBjb2xsYWJvcmF0aW9uIGFtb25nLCBhbmQgcHJvdmlkZSBhIHBvaW50IG9mIGZvY3VzIGZvciwgdGF4b25vbWlzdHMsIHNjaWVudGlmaWMgaW5zdGl0dXRpb25zLCBhbmQgdGF4b25vbWljIGluZm9ybWF0aW9uIHVzZXJzLlxuXG5Gb3IgZWFjaCBzY2llbnRpZmljIG5hbWUsIElUSVMgd2lsbCBpbmNsdWRlIHRoZSBhdXRob3JpdHkgKGF1dGhvciBhbmQgZGF0ZSksIHRheG9ub21pYyByYW5rLCBhc3NvY2lhdGVkIHN5bm9ueW1zIGFuZCB2ZXJuYWN1bGFyIG5hbWVzIHdoZXJlIGF2YWlsYWJsZSwgYSB1bmlxdWUgdGF4b25vbWljIHNlcmlhbCBudW1iZXIsIGRhdGEgc291cmNlIGluZm9ybWF0aW9uIChwdWJsaWNhdGlvbnMsIGV4cGVydHMsIGV0Yy4pIGFuZCBkYXRhIHF1YWxpdHkgaW5kaWNhdG9ycy4gRXhwZXJ0IHJldmlld3MgYW5kIGNoYW5nZXMgdG8gdGF4b25vbWljIGluZm9ybWF0aW9uIGluIHRoZSBkYXRhYmFzZSB3aWxsIGJlIHRyYWNrZWQuIEdlb2dyYXBoaWMgY292ZXJhZ2Ugd2lsbCBiZSB3b3JsZHdpZGUgd2l0aCBpbml0aWFsIGVtcGhhc2lzIG9uIE5vcnRoIEFtZXJpY2FuIHRheGEuIFRoZSBUV0cgaXMgY29vcmRpbmF0aW5nIGl0cyBlZmZvcnRzIHdpdGggc2V2ZXJhbCBuYXRpb25hbCBhbmQgaW50ZXJuYXRpb25hbCBiaW9kaXZlcnNpdHkgcHJvZ3JhbXMuXG5cbklUSVMgd2lsbCBiZSBhIHNpZ25pZmljYW50IGNvbnRyaWJ1dGlvbiB0byB0aGUgc2NpZW50aWZpYyBpbmZyYXN0cnVjdHVyZSB0aGF0IGlzIGZ1bmRhbWVudGFsIHRvIHRoZSBkZXNjcmlwdGlvbiwgY29uc2VydmF0aW9uLCBhbmQgbWFuYWdlbWVudCBvZiB0aGUgbmF0aW9uJiMzOTtzIGJpb2RpdmVyc2l0eS4gVXNlIG9mIHRoZSBJVElTIGFuZCB0aGUgdGF4b25vbWljIHNlcmlhbCBudW1iZXJzIHdpbGwgZmFjaWxpdGF0ZSBzaGFyaW5nIG9mIGJpb2xvZ2ljYWwgaW5mb3JtYXRpb24gYW1vbmcgcmVzZWFyY2hlcnMgYW5kIGNvb3BlcmF0aW5nIGFnZW5jaWVzIGJ5IHByb3ZpZGluZyBhIGNvbW1vbiBmcmFtZXdvcmsgZm9yIHRheG9ub21pYyBkYXRhLiBBZ2VuY2llcyB0aGF0IHR5cGljYWxseSBjYW5ub3QgYWZmb3JkIHRvIG1haW50YWluIHRheG9ub21pYyBkYXRhIHdpbGwgaGF2ZSBhY2Nlc3MgdG8gaGlnaCBxdWFsaXR5IHRheG9ub21pYyBpbmZvcm1hdGlvbiB0aHJvdWdoIElUSVMuIFRoaXMgcHJvamVjdCBhbGxvd3MgdGhlIGNvb3JkaW5hdGlvbiBvZiBlZmZvcnRzIGFtb25nIGZlZGVyYWwgYWdlbmNpZXMsIHRoZXJlYnkgaW5jcmVhc2luZyBwcm9kdWN0aXZpdHkgYW5kIHNhdmluZyByZXNvdXJjZXMuXG5cblN0YXR1cyByZXBvcnRzIG9uIElUSVMgc3lzdGVtIGRldmVsb3BtZW50IG1heSBiZSBmb3VuZCBpbiB0aGUgV2hhdCYjMzk7cyBOZXcgc2VjdGlvbi4gWW91IGNhbiBhbHNvIGNvbnRhY3QgR2VyYWxkIEd1YWxhLCBQaC5ELiwgRGlyZWN0b3IsIEludGVncmF0ZWQgVGF4b25vbWljIEluZm9ybWF0aW9uIFN5c3RlbSAoSVRJUykgYXQgVS5TLiBHZW9sb2dpY2FsIFN1cnZleSwgMTIyMDEgU3VucmlzZSBWYWxsZXkgRHJpdmUsIE1TIDMwMiwgUmVzdG9uLCBWQSAyMDE5MiBvciB2aWEgZW1haWwgYXQgaXRpc3dlYm1hc3RlciYjNjQ7aXRpcy5nb3YgLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjM0YTk2ZWJlLWU1MWMtNDIyMi05ZDA4LTVjMjA0M2MzOWRlYyIsInRpdGxlIjoiR2xvYmFsIE5hbWVzIFVzYWdlIEJhbmsiLCJkZXNjcmlwdGlvbiI6IlRoZSBHbG9iYWwgTmFtZXMgVXNhZ2UgQmFuayAoR05VQikgaXMgb25lIG9mIHRoZSB0d28gbWFqb3IgaW5kZXhlcyB3aXRoaW4gdGhlIEdsb2JhbCBOYW1lcyBBcmNoaXRlY3R1cmUgKEdOQSkuICBSZWZlcnJlZCB0byBhcyB0aGUg4oCcY2xlYW4gYnVja2V04oCdIG9mIHRheG9uIG5hbWVzLCB0aGUgY29yZSBvYmplY3QgaXMgYSDigJxUYXhvbiBOYW1lIFVzYWdl4oCdIChUTlU7IHJlY29yZHMgcmVwcmVzZW50aW5nIHRoZSB1c2FnZSBvZiBhIHBhcnRpY3VsYXIiLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIwOTM4MTcyYi0yMDg2LTQzOWMtYTFkZC1jMjFjYjAxMDllZDUiLCJ0aXRsZSI6IlRoZSBJbnRlcmltIFJlZ2lzdGVyIG9mIE1hcmluZSBhbmQgTm9ubWFyaW5lIEdlbmVyYSIsImRlc2NyaXB0aW9uIjoiVGhlIEludGVyaW0gUmVnaXN0ZXIgb2YgTWFyaW5lIGFuZCBOb25tYXJpbmUgR2VuZXJhIGlzIGEgcHJvdmlzaW9uYWwgKG9yIOKAmGludGVyaW3igJkpIGNvbXBpbGF0aW9uIG9mIGdlbnVzIG5hbWVzIOKAkyBpbmNsdWRpbmcgc3BlY2llcyBuYW1lcyBpbiBtYW55IGNhc2VzIOKAkyBhbmQgY292ZXJzIGJvdGggbGl2aW5nIGFuZCBleHRpbmN0IGJpb3RhIGludG8gYSBzaW5nbGUgc3lzdGVtIHRvIHN1cHBvcnQgdGF4b25vbWljIGFuZCBvdGhlciBxdWVyaWVzIGRlYWxpbmcgd2l0aCBlLmcuIGhvbW9ueW1zLCBhdXRob3JpdGllcywgcGFyZW50LWNoaWxkIHJlbGF0aW9uc2hpcHMsIHNwZWxsaW5nIHZhcmlhdGlvbnMgYW5kIGRpc3RpbmN0aW9ucyBiZXR3ZWVuIG1hcmluZSBhbmQgbm9uLW1hcmluZSBvciBmb3NzaWwgYW5kIHJlY2VudCB0YXhhIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiYmYzZGI3YzktNWU1ZC00ZmQwLWJkNWItOTQ1MzllYWY5NTk4IiwidGl0bGUiOiJJbmRleCBGdW5nb3J1bSIsImRlc2NyaXB0aW9uIjoiVGhlIEluZGV4IEZ1bmdvcnVtLCB0aGUgZ2xvYmFsIGZ1bmdhbCBub21lbmNsYXRvciBjb29yZGluYXRlZCBhbmQgc3VwcG9ydGVkIGJ5IHRoZSBJbmRleCBGdW5nb3J1bSBQYXJ0bmVyc2hpcCwgY29udGFpbnMgbmFtZXMgb2YgZnVuZ2kgKGluY2x1ZGluZyB5ZWFzdHMsIGxpY2hlbnMsIGNocm9taXN0YW4gZnVuZ2ksIHByb3Rvem9hbiBmdW5naSBhbmQgZm9zc2lsIGZvcm1zKSBhdCBzcGVjaWVzIGxldmVsIGFuZCBiZWxvdy4gRnVuZGluZyBmcm9tIEdCSUYgKDIwMDMtMjAwNCkgdW5kZXIgdGhlIEVDQVQgd29yayBwcm9ncmFtbWUgZW5hYmxlZCB0aGUgYWRkaXRpb24gb2YgbW9zdCBtaXNzaW5nIGF1dGhvciBjaXRhdGlvbnMgYW5kIHllYXIgb2YgcHVibGljYXRpb24gYW5kIHRoZSBsaW5raW5nIG9mIG1vc3QgaG9tb3R5cGljIG5hbWVzLiBOZXcgbmFtZXMgZnJvbSB0aGUgSW5kZXggb2YgRnVuZ2ksIGNvbXBpbGVkIGF0IENBQkktVUsgYW5kIHB1Ymxpc2hlZCBieSBDQUJJLCBhcmUgYWRkZWQgZXZlcnkgdGhyZWUgbW9udGhzLlxuXG5UaGUgQmlibGlvZ3JhcGh5IG9mIFN5c3RlbWF0aWMgTXljb2xvZ3kgcHJvdmlkZXMgYSBzdXJ2ZXkgb2YgdGhlIGxpdGVyYXR1cmUgZW5jb21wYXNzaW5nIHRoZSBiaW9kaXZlcnNpdHksIGNsYXNzaWZpY2F0aW9uLCBkaXN0cmlidXRpb24sIGV2b2x1dGlvbiwgaWRlbnRpZmljYXRpb24sIG5vbWVuY2xhdHVyZSwgcGh5bG9nZW55LCBzeXN0ZW1hdGljcyBhbmQgdGF4b25vbXkgb2YgZnVuZ2kgKGFzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzIHBhcmFncmFwaCkuIFlvdSBjYW4gc2VhcmNoIHRoZSBkYXRhYmFzZSB1c2luZyB0aGUgaW5kZXggb2YgY2l0ZWQgZ2VuZXJpYyBuYW1lcyBvciBhdXRob3IgbmFtZXMuXG5cblRoZSBEaWN0aW9uYXJ5IG9mIHRoZSBGdW5naSAoY3VycmVudGx5IDEwdGggZWRpdGlvbiwgMjAwOCkgcHVibGlzaGVkIGJ5IENBQkkgYWxzbyBjb250YWlucyB0aGUgY3VycmVudCBjb25zZW5zdXMgb24gdGhlIGZ1bmdhbCB0YXhvbm9taWMgaGllcmFyY2h5IHRvIHRoZSByYW5rIG9mIGdlbnVzLiBIZXJlIHlvdSBjYW4gc2VhcmNoIHRoZSBkYXRhYmFzZSBmb3IgdGhlIHN0YXR1cyBvZiBnZW5lcmljIG5hbWVzLCBvciB3YWxrIGRvd24gdGhlIGhpZXJhcmNoeSBmcm9tIHRoZSByYW5rIG9mIEtpbmdkb20uIFRoZSBlbnRyaWVzIGZvciBlYWNoIGdlbnVzIGdlbmVyYWxseSBpbmNsdWRlIGF1dGhvcnMgYW5kIHBsYWNlIG9mIHB1YmxpY2F0aW9uIHRvZ2V0aGVyIHdpdGggdGhlIHR5cGUgc3BlY2llcyAobGlua2VkIHRvIEluZGV4IEZ1bmdvcnVtKSBhbmQgb3RoZXIgZGF0YS4gQSBkYXRhYmFzZSBvZiBmYW1pbHkgbmFtZXMgd2hpY2ggaW5jbHVkZXMgYXV0aG9ycywgcGxhY2Ugb2YgcHVibGljYXRpb24gYW5kIHR5cGUgZ2VudXMgKGxpbmtlZCB0byB0aGUgRGljdGlvbmFyeSBvZiB0aGUgRnVuZ2kgaGllcmFyY2h5KSBpcyBub3cgc3VwcGxlbWVudGVkIGJ5IG9uZSB3aGljaCBjb250YWlucyBuYW1lcyBhdCBhbGwgc3VwcmEtZmFtaWxpYWwgcmFua3MgYWx0aG91Z2ggaXQgaXMgZmFyIGZyb20gY29tcGxldGlvbi5cblxuQ0FCSSBCaW9zY2llbmNlIGlzIHByZXNlbnRseSBjb29yZGluYXRpbmcgdGhlIGZ1bmdhbCBjb21wb25lbnQgb2YgdGhlIFNwZWNpZXMgMjAwMCBwcm9qZWN0IGFuZCBpdHMgY29udHJpYnV0aW9uLCBpbiBwYXJ0bmVyc2hpcCB3aXRoIElUSVMsIHRvIHRoZSBDYXRhbG9ndWUgb2YgTGlmZSAoY3VycmVudGx5IHVzZWQgaW4gdGhlIEdCSUYgcG9ydGFsKTsgZm9yIG1vcmUgaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoaXMgZ2xvYmFsIGluaXRpYXRpdmUgdmlzaXQgdGhlaXIgd2Vic2l0ZS4gWW91IG1heSBzZWFyY2ggaGVyZSBhIHNtYWxsIGJ1dCBncm93aW5nIG51bWJlciBvZiB0YXhvbm9taWNhbGx5IGNvbXBsZXRlIGRhdGFzZXRzIC0gZ2xvYmFsIHNwZWNpZXMgZGF0YWJhc2VzLiBQbGVhc2UgY29udGFjdCBQYXVsIEtpcmsgaWYgeW91IHlvdSB3b3VsZCBsaWtlIHRvIGNvbnRyaWJ1dGUuXG5cbkFsbCB0aGVzZSBkYXRhYmFzZXMgbmVlZCB0byBiZSBpbXByb3ZlZCBhbmQgdXBkYXRlZCBpbiB0ZXJtcyBvZiBkYXRhIGNvbnRlbnQuIFBsZWFzZSBjb250YWN0IFBhdWwgS2lyayBpZiB5b3UgaGF2ZSBhbnkgYWRkaXRpb25zIG9yIHN1Z2dlc3RlZCBjaGFuZ2VzICh3aGljaCB3aWxsIGJlIGFja25vd2xlZGdlZCkuIFRoZSBkYXRhYmFzZSBzdHJ1Y3R1cmVzIGhhdmUgYmVlbiBkZXZlbG9wZWQgYnkgSmVycnkgQ29vcGVyIGFuZCBQYXVsIEtpcmsgYW5kIHRoZSB3ZWIgaW50ZXJmYWNlIGJ5IEplcnJ5IENvb3Blci4gUGxlYXNlIGNvbnRhY3QgSmVycnkgQ29vcGVyIGlmIHlvdSBoYXZlIGFueSBwcm9ibGVtcyB3aXRoIHBhZ2VzIG9yIGRhdGFiYXNlIHNlYXJjaGVzLiIsInR5cGUiOiJDSEVDS0xJU1QiLCJzdWJ0eXBlIjoiTk9NRU5DTEFUT1JfQVVUSE9SSVRZIn0seyJrZXkiOiJjMzNjZTJmMi1jM2NjLTQzYTUtYTM4MC1mZTQ1MjZkNjM2NTAiLCJ0aXRsZSI6IlRoZSBQYWxlb2Jpb2xvZ3kgRGF0YWJhc2UiLCJkZXNjcmlwdGlvbiI6IlRoZSBQYWxlb2Jpb2xvZ3kgRGF0YWJhc2UgaXMgYSBwdWJsaWMgZGF0YWJhc2Ugb2YgcGFsZW9udG9sb2dpY2FsIGRhdGEgdGhhdCBhbnlvbmUgY2FuIHVzZSwgbWFpbnRhaW5lZCBieSBhbiBpbnRlcm5hdGlvbmFsIG5vbi1nb3Zlcm5tZW50YWwgZ3JvdXAgb2YgcGFsZW9udG9sb2dpc3RzLlxuXG5Gb3NzaWwgb2NjdXJyZW5jZXMgZnJvbSBzY2llbnRpZmljIHB1YmxpY2F0aW9ucyBhcmUgYWRkZWQgdG8gdGhlIGRhdGFiYXNlIGJ5IG91ciBjb250cmlidXRpbmcgbWVtYmVycy4gVGhhbmtzIHRvIG91ciBtZW1iZXJzaGlwLCB3aGljaCBpbmNsdWRlcyBuZWFybHkgNDAwIHNjaWVudGlzdHMgZnJvbSBvdmVyIDEzMCBpbnN0aXR1dGlvbnMgaW4gMjQgY291bnRyaWVzLCB0aGUgUGFsZW9iaW9sb2d5IERhdGFiYXNlIGlzIGFibGUgdG8gcHJvdmlkZSBzY2llbnRpc3RzIGFuZCB0aGUgcHVibGljIHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIGZvc3NpbCByZWNvcmQuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiOTBkOWU4YTYtMGNlMS00NzJkLWI2ODItMzQ1MTA5NWRiYzVhIiwidGl0bGUiOiJGYXVuYSBFdXJvcGFlYSIsImRlc2NyaXB0aW9uIjoiVGhlIEZhdW5hIEV1cm9wYWVhIHByb2plY3QgKEVWUjEtMTk5OS0yMDAwMSkgaGFzIGJlZW4gZnVuZGVkIGJ5IHRoZSBFdXJvcGVhbiBDb21taXNzaW9uIGZvciBhIHBlcmlvZCBvZiBmb3VyIHllYXJzICgxIE1hcmNoIDIwMDAgLSAxIE1hcmNoIDIwMDQpIHdpdGhpbiB0aGUgRmlmdGggRnJhbWV3b3JrIFByb2dyYW1tZSAoNUZQKS4gRmF1bmEgRXVyb3BhZWEgaGFzIGFzc2VtYmxlZCBhIGRhdGFiYXNlIG9mIHRoZSBzY2llbnRpZmljIG5hbWVzIGFuZCBkaXN0cmlidXRpb24gb2YgYWxsIGxpdmluZyBtdWx0aWNlbGx1bGFyIEV1cm9wZWFuIGxhbmQgYW5kIGZyZXNoLXdhdGVyIGFuaW1hbHMuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiMWJkNDJjMmItYjU4YS00YTAxLTgxNmItYmVjOGM4OTc3OTI3IiwidGl0bGUiOiJFVU5JUyBCaW9kaXZlcnNpdHkgRGF0YWJhc2UiLCJkZXNjcmlwdGlvbiI6IlRoZSBFVU5JUyBEYXRhYmFzZSBpcyB0aGUgRXVyb3BlYW4gTmF0dXJlIEluZm9ybWF0aW9uIFN5c3RlbSwgZGV2ZWxvcGVkIGFuZCBtYW5hZ2VkIGJ5IHRoZSBFdXJvcGVhbiBUb3BpYyBDZW50cmUgb24gQmlvbG9naWNhbCBEaXZlcnNpdHkgKEVUQy9CRCBpbiBQYXJpcykgZm9yIHRoZSBFdXJvcGVhbiBFbnZpcm9ubWVudCBBZ2VuY3kgKEVFQSkgYW5kIHRoZSBFdXJvcGVhbiBFbnZpcm9ubWVudGFsIEluZm9ybWF0aW9uIE9ic2VydmF0aW9uIE5ldHdvcmsoRWlvbmV0KS48L2JyPlRoZSBFVU5JUyBEYXRhYmFzZSB3ZWIgYXBwbGljYXRpb24gcHJvdmlkZXMgYWNjZXNzIHRvIHB1YmxpY2x5IGF2YWlsYWJsZSBkYXRhIGluIGEgY29uc29saWRhdGVkIGRhdGFiYXNlLiBUaGUgaW5mb3JtYXRpb24gaW5jbHVkZXM6PC9icj5EYXRhIG9uIFNwZWNpZXMsIEhhYml0YXRzIGFuZCBTaXRlcyBjb21waWxlZCBpbiB0aGUgZnJhbWV3b3JrIG9mIE5BVFVSQTIwMDAgKEVVIEhhYml0YXRzIGFuZCBCaXJkcyBEaXJlY3RpdmVzKSxcbkRhdGEgY29sbGVjdGVkIGZyb20gZnJhbWV3b3JrcywgZGF0YSBzb3VyY2VzIG9yIG1hdGVyaWFsIHB1Ymxpc2hlZCBieSBFVEMvQkQgKGZvcm1lcmx5IHRoZSBFdXJvcGVhbiBUb3BpYyBDZW50cmUgZm9yIE5hdHVyZSBDb25zZXJ2YXRpb24pLlxuSW5mb3JtYXRpb24gb24gU3BlY2llcywgSGFiaXRhdHMgYW5kIFNpdGVzIHRha2VuIGludG8gYWNjb3VudCBpbiByZWxldmFudCBpbnRlcm5hdGlvbmFsIGNvbnZlbnRpb25zIG9yIGZyb20gSW50ZXJuYXRpb25hbCBSZWQgTGlzdHMuXG5TcGVjaWZpYyBkYXRhIGNvbGxlY3RlZCBpbiB0aGUgZnJhbWV3b3JrIG9mIHRoZSBFRUEncyByZXBvcnRpbmcgYWN0aXZpdGllcywgd2hpY2ggYWxzbyBjb25zdGl0dXRlIGEgY29yZSBzZXQgb2YgZGF0YSB0byBiZSB1cGRhdGVkIHBlcmlvZGljYWxseS4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiJjODIyN2JiNC00MTQzLTQ0M2YtOGNiMi01MWY5NTc2YWZmMTQiLCJ0aXRsZSI6Ilpvb0JhbmsiLCJkZXNjcmlwdGlvbiI6Ik5vbWVuY2xhdHVyYWwgcmVjb3JkcyBpbiBab29CYW5rIiwidHlwZSI6IkNIRUNLTElTVCIsInN1YnR5cGUiOiJOT01FTkNMQVRPUl9BVVRIT1JJVFkifSx7ImtleSI6IjRjZWM4ZmVmLWYxMjktNDk2Ni04OWI3LTRmODQzOWFiYTA1OCIsInRpdGxlIjoiSW50ZXJuYXRpb25hbCBCYXJjb2RlIG9mIExpZmUgcHJvamVjdCAoaUJPTCkgQmFyY29kZSBJbmRleCBOdW1iZXJzIChCSU5zKSIsImRlc2NyaXB0aW9uIjoiPHA+RXN0YWJsaXNoZWQgaW4gMjAwOCwgdGhlIEludGVybmF0aW9uYWwgQmFyY29kZSBvZiBMaWZlIENvbnNvcnRpdW0gKGlCT0wsIGh0dHA6Ly93d3cuaWJvbC5vcmcvKSBpcyBhIHJlc2VhcmNoIGFsbGlhbmNlIG9mIG5hdGlvbnMgd2l0aCB0aGUgZGVzaXJlIHRvIHRyYW5zZm9ybSBiaW9kaXZlcnNpdHkgc2NpZW5jZSBieSBidWlsZGluZyB0aGUgRE5BIGJhcmNvZGUgcmVmZXJlbmNlIGxpYnJhcmllcywgdGhlIHNlcXVlbmNpbmcgZmFjaWxpdGllcywgdGhlIGluZm9ybWF0aWNzIHBsYXRmb3JtcywgdGhlIGFuYWx5dGljYWwgcHJvdG9jb2xzLCBhbmQgdGhlIGludGVybmF0aW9uYWwgY29sbGFib3JhdGlvbiByZXF1aXJlZCB0byBpbnZlbnRvcnkgYW5kIGFzc2VzcyBiaW9kaXZlcnNpdHkuPC9wPlxuPHA+aUJPTCBoYXMgb3ZlcnNlZW4gdGhlIGNvbXBsZXRpb24gb2Ygb25lIG1ham9yIHByb2dyYW0sIEJBUkNPREUgNTAwSywgYW5kIGEgc2Vjb25kIHByb2dyYW0sIEJJT1NDQU4gcnVucyBmb3Igc2V2ZW4geWVhcnMgZnJvbSBKdW5lIDIwMTkuIFRoZSBmaXJzdCBwcm9ncmFtIGJhcmNvZGVkIDUwMCwwMDAgc3BlY2llcyByZWZsZWN0aW5nIHRoZSBpbnZlc3RtZW50IG9mICQxNTAgbWlsbGlvbiBieSByZXNlYXJjaCBvcmdhbml6YXRpb25zIGluIDI1IG5hdGlvbnMuIEJ1aWxkaW5nIG9uIHRoaXMgc3VjY2VzcywgQklPU0NBTiB3aWxsIGV4dGVuZCBiYXJjb2RlIGNvdmVyYWdlIHRvIDIuNSBtaWxsaW9uIHNwZWNpZXMgYnkgMjAyNS4gVGhpcyBwcm9ncmFtIHdpbGwgc3RpbXVsYXRlIGFjdGl2YXRpb24gb2YgdGhlIFBsYW5ldGFyeSBCaW9kaXZlcnNpdHkgTWlzc2lvbiAoUEJNKSDigJMgaUJPTOKAmXMgZmluYWwgcHJvamVjdC4gUEJNIGlzIGEgcmVzZWFyY2ggaW5pdGlhdGl2ZSB0aGF0IHdpbGwgZGVsaXZlciBhIGNvbXByZWhlbnNpdmUgdW5kZXJzdGFuZGluZyBvZiB0aGUgY29tcG9zaXRpb24gYW5kIGRpc3RyaWJ1dGlvbiBvZiBtdWx0aS1jZWxsdWxhciBsaWZlIGJ5IDIwNDUuPC9wPlxuPHA+aUJPTCBtYWludGFpbnMgdGhlIEJhcmNvZGUgb2YgTGlmZSBEYXRhIFN5c3RlbSAoQk9MRCwgaHR0cDovL3d3dy5ib2xkc3lzdGVtcy5vcmcvKS4gQk9MRCBpcyBhIGNsb3VkLWJhc2VkIGRhdGEgc3RvcmFnZSBhbmQgYW5hbHlzaXMgcGxhdGZvcm0gZGV2ZWxvcGVkIGF0IHRoZSBDZW50cmUgZm9yIEJpb2RpdmVyc2l0eSBHZW5vbWljcyBpbiBDYW5hZGEuIEl0IGNvbnNpc3RzIG9mIGZvdXIgbWFpbiBtb2R1bGVzLCBhIGRhdGEgcG9ydGFsLCBhbiBlZHVjYXRpb25hbCBwb3J0YWwsIGEgcmVnaXN0cnkgb2YgQklOcyAocHV0YXRpdmUgc3BlY2llcyksIGFuZCBhIGRhdGEgY29sbGVjdGlvbiBhbmQgYW5hbHlzaXMgd29ya2JlbmNoLjwvcD4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiJkZTg5MzRmNC1hMTM2LTQ4MWMtYTg3YS1iMGIyMDJiODBhMzEiLCJ0aXRsZSI6IkR5bnRheGEuIFN2ZW5zayB0YXhvbm9taXNrIGRhdGFiYXMiLCJkZXNjcmlwdGlvbiI6IkR5bnRheGEgaXMgYSBTd2VkaXNoIHRheG9ub21pYyBkYXRhYmFzZSBvZiBvcmdhbmlzbXMgb2NjdXJyaW5nIGluIFN3ZWRpc2ggbmF0dXJlLiBGb3Igb3RoZXIgZGF0YWJhc2VzIGF0IHRoZSBTd2VkaXNoIFNwZWNpZXMgSW5mb3JtYXRpb24gQ2VudHJlLCBlLmcuIEFydHBvcnRhbGVuLCBpdCBoYXMgYSBub3JtYXRpdmUgZnVuY3Rpb24gZm9yIHRheG9ub21pYyBjb25jZXB0cywgYW5kIGlzIGluY3JlYXNpbmdseSByZWZlcmVuY2VkIGJ5IGV4dGVybmFsIFN3ZWRpc2ggdXNlcnMuIFRvIGRhdGUgKE9jdG9iZXIgMjAxOCkgRHludGF4YSBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCA2MSw1MDAgc3BlY2llcyBvY2N1cnJpbmcgaW4gU3dlZGVuLiBUaGlzIGluY2x1ZGVzIGFib3V0IDk1JSBvZiBrbm93biBtdWx0aWNlbGx1bGFyIHNwZWNpZXMg4oCTIHJlbWFpbmluZyBnYXBzIG1haW5seSBmb3VuZCBhbW9uZyB0aGUgZnVuZ2kuIE91ciBnb2FsIGlzIHRvIGluY2x1ZGUgaW4gdGhlIGRhdGFiYXNlIGFsbCBzcGVjaWVzIGRvY3VtZW50ZWQgZnJvbSBTd2VkZW4g4oCTIGF0IGxlYXN0IHRoZSBtdWx0aWNlbGx1bGFyIG9uZXMgYW5kIHN1Y2ggdW5pY2VsbHVsYXIgc3BlY2llcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBlbnZpcm9ubWVudGFsIG1vbml0b3JpbmcgYnkgdGhlIFN3ZWRpc2ggRVBBLiBJbiBhZGRpdGlvbiB0byB0aGVzZSBzcGVjaWVzIHRoZXJlIGFyZSBtYW55IG5hbWVzIGF0IG90aGVyIHRheG9ub21pYyBsZXZlbHMsIHNjaWVudGlmaWMgc3lub255bXMsIFN3ZWRpc2ggdmVybmFjdWxhcnMsIGV0Yy4gSW4gYWxsLCB0aGUgZGF0YWJhc2UgaW5jbHVkZXMgbW9yZSB0aGFuIDI5MCwwMDAgbmFtZXMgKE9jdG9iZXIgMjAxOCkuIER5bnRheGEgaXMgY29udGludW91c2x5IHVwZGF0ZWQgd2l0aCBuZXcgc3BlY2llcywgY2hhbmdlcyBpbiB0YXhvbm9teSBhbmQgYWRkZWQgU3dlZGlzaCBuYW1lcyBhbmQgc2NpZW50aWZpYyBzeW5vbnltcy4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIzNzcyZGEyZi1kYWExLTRmMDctYTQzOC0xNWE4ODFhMjE0MmMiLCJ0aXRsZSI6IkNhdGFsb2d1ZSBvZiBMaWZlIENoaW5hLCAyMDEzIEFubnVhbCBDaGVja2xpc3QoQmlvZGl2ZXJzaXR5IENvbW1pdHRlZSwgQ2hpbmVzZSBBY2FkZW15IG9mIFNjaWVuY2VzKSIsImRlc2NyaXB0aW9uIjoiT3JnYW5pemVkIGJ5IHRoZSBCaW9kaXZlcnNpdHkgQ29tbWl0dGVlIG9mIENoaW5lc2UgQWNhZGVteSBvZiBTY2llbmNlcyAoQkMtQ0FTKSxDYXRhbG9ndWUgb2YgTGlmZSBDaGluYSAyMDEzIEFubnVhbCBDaGVja2xpc3QgZWRpdGlvbiBoYXMgYmVlbiBjb21waWxlZCBieSBTcGVjaWVzIDIwMDAgQ2hpbmEgTm9kZSwgcHVibGlzaGVkIGJ5IFNjaWVuY2UgUHJlc3MgYW5kIHJlbGVhc2VkIGR1cmluZyB0aGUgM3JkIE5hdGlvbmFsIEJpb2RpdmVyc2l0eSBJbmZvcm1hdGljcyBDb25mZXJlbmNlIGluIFNoYW5naGFpIG9uIFNlcHRlbWJlciAxNC5cbkNvbnNpc3RlbnQgd2l0aCB0aGUgU3BlY2llcyAyMDAwIGRhdGEgc3RhbmRhcmQsIGVhY2ggc3BlY2llcyBwYWdlIGluY2x1ZGVzIHNjaWVudGlmaWMgbmFtZSwgc3lub255bXMsIGNvbW1vbiBuYW1lLCBsaXRlcmF0dXJlLCBjbGFzc2lmaWNhdGlvbiBzeXN0ZW0sIGRpc3RyaWJ1dGlvbiBhbmQgQ2hpbmVzZSBuYW1lIHdpdGggUGlueWluLiBUaGUgcmV2aWV3ZXJzIGZvciBlYWNoIHJlY29yZCBhcmUgYWxzbyBsaXN0ZWQuXG5UaGVyZSBhcmUgNjY3MDggc3BlY2llcywgOTc1NGluZnJhc3BlY2lmaWMgdGF4YSwgOTUzNjIgc3lub255bXMgYW5kIDMyMzI3IGNvbW1vbiBuYW1lcyBpbiB0aGlzIGVkaXRpb24sIGluY2x1ZGluZyA3IGtpbmdkb21zLCAzMCBwaHlsdW1zLCA4MyBjbGFzc2VzLCAzOTcgb3JkZXJzLCAxIDk1OSBmYW1pbGllcyBhbmQgMTEgNzMxIGdlbmVyYS4gQ29tcGFyZSB3aXRoIHRoZSBsYXN0IGVkaXRpb24sIGFub3RoZXIgNiAwMDAgc3BlY2llcyBvcmluZnJhc3BlY2lmaWMgdGF4YSBhbmQgbW9yZSB0aGFuIDE3MCAwMDAgTGF0aW4gYXJlIGFkZGVkLlxuVGhlIG1haW4gY2hhbmdlIGluIHRoZSAyMDEzIGVkaXRpb24gYXJlOmFib3V0IDQwMDAgc3BlY2llcyBvciBpbmZyYXNwZWNpZmljIHRheGEgd2VyZSBhZGRlZCBpbiBBbmltYWxpYSBBcnRocm9wb2RhOyBhYm91dCAxODAwIHNwZWNpZXMgb3IgaW5mcmFzcGVjaWZpYyB0YXhhIHdlcmUgYWRkZWQgaW4gRnVuZ2kgQmFzaWRpb215Y290YTsgYWJvdXQgMjUwIHNwZWNpZXMgb3IgaW5mcmFzcGVjaWZpYyB0YXhhIHdlcmUgYWRkZWQgaW4gUGxhbnRhZSBBbmdpb3NwZXJtczsgYWJvdXQgMzkwIHNwZWNpZXMgb3IgaW5mcmFzcGVjaWZpYyB0YXhhIHdlcmUgYWRkZWQgaW4gUHJvdG96b2EsIEFtb2ViYS5cblRoZSBuYXRpb25hbCBhbm51YWwgc3BlY2llcyBjaGVja2xpc3QgaGFzIGJlZW4gY29tcGlsZWQgYW5kIHJlbGVhc2VkIHNpbmNlIDIwMDggYnkgdGhlIHBhcnRpY2lwYW50cyBvZiBTcGVjaWVzIDIwMDAgQ2hpbmEgTm9kZSwgdG9nZXRoZXIgd2l0aCBtb3JlIHRoYW4gMTAwIGRvbWVzdGljIGFuZCBvdmVyc2VhcyB0YXhvbm9taXN0cy4gSXQgZm9sbG93cyB0aGUgZGF0YSBzdGFuZGFyZCBvZiB0aGUgU3RhbmRhcmQgRGF0YXNldCBvZiB0aGUgU3BlY2llcyAyMDAwLCBhbmQgcHJvdmlkZXMgdGhlIENhdGFsb2d1ZSBvZiBMaWZlIENoaW5hIHRvIGFsbCB1c2VycyBpbiB0aGUgd29ybGQuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiYTZjNmNlYWQtYjVjZS00YTRlLThjZjUtMTU0MmJhNzA4ZGVjIiwidGl0bGUiOiJBcnRzbmF2bmViYXNlbiIsImRlc2NyaXB0aW9uIjoiQXJ0c25hdm5lYmFzZW4gKHRoZSBTcGVjaWVzIE5vbWVuY2xhdHVyZSBEYXRhYmFzZSkgYWltcyB0byBjb21waWxlIGEgY29tcGxldGUgbGlzdCBvZiBhbGwgZXhpc3Rpbmcgc3BlY2llcyBpbiBOb3J3YXksIGFuZCBhbHNvIGNvbnRhaW5zIG5hbWVzIG9mIHNwZWNpZXMgbm90IGZvdW5kIGluIE5vcndheSBidXQgcHJlc2VudCBpbiBOb3J3ZWdpYW4gbXVzZXVtIGNvbGxlY3Rpb25zIGFuZCBoZXJiYXJpYS4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiI2NmRkMDk2MC0yZDdkLTQ2ZWUtYTQ5MS04N2I5YWRjZmU3YjEiLCJ0aXRsZSI6IkdSSU4gVGF4b25vbXkiLCJkZXNjcmlwdGlvbiI6IkdSSU4gdGF4b25vbWljIGRhdGEgcHJvdmlkZSB0aGUgc3RydWN0dXJlIGFuZCBub21lbmNsYXR1cmUgZm9yIGFjY2Vzc2lvbnMgb2YgdGhlIE5hdGlvbmFsIFBsYW50IEdlcm1wbGFzbSBTeXN0ZW0gKE5QR1MpLCBwYXJ0IG9mIHRoZSBOYXRpb25hbCBHZW5ldGljIFJlc291cmNlcyBQcm9ncmFtIChOR1JQKSBvZiB0aGUgVW5pdGVkIFN0YXRlcyBEZXBhcnRtZW50IG9mIEFncmljdWx0dXJlJiMzOTtzIChVU0RBJiMzOTtzKSBBZ3JpY3VsdHVyYWwgUmVzZWFyY2ggU2VydmljZSAoQVJTKS4gSW4gR1JJTiBUYXhvbm9teSBmb3IgUGxhbnRzIGFsbCBmYW1pbGllcyBhbmQgZ2VuZXJhIG9mIHZhc2N1bGFyIHBsYW50cyBhbmQgb3ZlciA0NiwwMDAgc3BlY2llcyBmcm9tIHRocm91Z2hvdXQgdGhlIHdvcmxkIGFyZSByZXByZXNlbnRlZCwgZXNwZWNpYWxseSBlY29ub21pYyBwbGFudHMgYW5kIHRoZWlyIHJlbGF0aXZlcy4gSW5mb3JtYXRpb24gb24gc2NpZW50aWZpYyBhbmQgY29tbW9uIG5hbWVzLCBjbGFzc2lmaWNhdGlvbiwgZGlzdHJpYnV0aW9uLCByZWZlcmVuY2VzLCBhbmQgZWNvbm9taWMgaW1wYWN0cyBhcmUgcHJvdmlkZWQuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiYWFjZDgxNmQtNjYyYy00OWQyLWFkMWEtOTdlNjZlMmEyOTA4IiwidGl0bGUiOiJCcmF6aWxpYW4gRmxvcmEgMjAyMCBwcm9qZWN0IC0gUHJvamV0byBGbG9yYSBkbyBCcmFzaWwgMjAyMCIsImRlc2NyaXB0aW9uIjoiSW4gMjAxMCwgQnJhemlsIHB1Ymxpc2hlZCB0aGUgQ2F0YWxvZyBvZiBQbGFudHMgYW5kIEZ1bmdpIG9mIEJyYXppbCBhbmQgbGF1bmNoZWQgdGhlIGZpcnN0IG9ubGluZSB2ZXJzaW9uIG9mIHRoZSBMaXN0IG9mIFNwZWNpZXMgb2YgdGhlIEJyYXppbGlhbiBGbG9yYSwgbWVldGluZyBUYXJnZXQgMSBvZiB0aGUgR2xvYmFsIFN0cmF0ZWd5IGZvciBQbGFudCBDb25zZXJ2YXRpb24gKEdTUEMtQ0JEKS4gVGhpcyBib3RhbmljYWwgbWlsZXN0b25lIHdhcyBvbmx5IGFjaGlldmVkIGR1ZSB0byB0aGUgY29tbWl0bWVudCBvZiBtb3JlIHRoYW4gNDAwICBCcmF6aWxpYW5zIGFuZCBmb3JlaWduIHRheG9ub21pc3RzIHdobyB3b3JrZWQgb24gYSBwbGF0Zm9ybSB3aGVyZSBpbmZvcm1hdGlvbiBhYm91dCBvdXIgZmxvcmEgd2FzIGluY2x1ZGVkIGFuZCBkaXNzZW1pbmF0ZWQgaW4gcmVhbCB0aW1lLiBUaGUgJiMzNDtCcmF6aWxpYW4gTGlzdCYjMzQ7LCBhcyBpdCB3YXMgcG9wdWxhcmx5IGtub3duLCBjbG9zZWQgaW4gTm92ZW1iZXIgMjAxNSB3aXRoIHRoZSBwdWJsaWNhdGlvbiBvZiBmaXZlIHBhcGVycyBhbmQgdGhlaXIgcmVzcGVjdGl2ZSBkYXRhYmFzZXMgKHNlZSBEb3dubG9hZCBhcyBhYm92ZSkgZGVhbGluZyB3aXRoIHRoZSBkaWZmZXJlbnQgZ3JvdXBzIG9mIGZ1bmdpIGFuZCBwbGFudHMuIFdlIGVudGh1c2lhc3RpY2FsbHkgcHJlc2VudCwgaW4gMjAxNiwgdGhlIGJyYW5kIG5ldyBzeXN0ZW0gdGhhdCBob3VzZXMgdGhlIEJyYXppbGlhbiBGbG9yYSAyMDIwIHByb2plY3QsIGFpbWluZyB0byBhY2hpZXZlIFRhcmdldCAxIGVzdGFibGlzaGVkIGZvciAyMDIwIGJ5IHRoZSBHU1BDLUNCRC4gVGhpcyBuZXcgcHJvamVjdCBpY2x1ZGVzIHByb3Zpc2lvbnMgdG8gaW5jbHVkZSBkZXNjcmlwdGlvbnMsIGlkZW50aWZpY2F0aW9uIGtleXMgYW5kIGlsbHVzdHJhdGlvbnMgdG8gYWxsIHNwZWNpZXMgb2YgcGxhbnRzLCBhbGdhZSBhbmQgZnVuZ2kga25vd24gaW4gdGhlIGNvdW50cnkuIFRoZSBCcmF6aWxpYW4gRmxvcmEgMjAyMCBwcm9qZWN0IGlzIHBhcnQgb2YgdGhlIFJlZmxvcmEgUHJvZ3JhbW1lIGFuZCBpcyBiZWluZyBjb25kdWN0ZWQgd2l0aCB0aGUgc3VwcG9ydCBvZiB0aGUgU2lzdGVtYSBkZSBJbmZvcm1hw6fDo28gc29icmUgYSBCaW9kaXZlcnNpZGFkZSBCcmFzaWxlaXJhIChTaUJCcikuIEF0IHRoZSBtb21lbnQgaGFzIG5lYXJseSA3MDAgc2NpZW50aXN0cyB3b3JraW5nIGluIGEgbmV0d29yayB0byBwcmVwYXJlIHRoZSBtb25vZ3JhcGhzLiBUaGVzZSByZXNlYXJjaGVycyBhcmUgYWxzbyByZXNwb25zaWJsZSBmb3Igbm9tZW5jbGF0dXJhbCBpbmZvcm1hdGlvbiBhbmQgZ2VvZ3JhcGhpYyBkaXN0cmlidXRpb24gKGNvdmVyYWdlIGluIEJyYXppbCwgZW5kZW1pc20gYW5kIGJpb21lcyksIGFzIHdlbGwgYXMgdmFsdWFibGUgZGF0YSByZWdhcmRpbmcgbGlmZSBmb3Jtcywgc3Vic3RyYXRlIGFuZCB2ZWdldGF0aW9uIHR5cGVzIGZvciBlYWNoIHNwZWNpZXMuIFRoZSBzZWFyY2ggcmVzdWx0cyBvbiB0aGlzIHBhZ2UgaW5jbHVkZSBpbmZvcm1hdGlvbiBvbiBlbmRhbmdlcmVkIHNwZWNpZXMgKHRoYW5rcyB0byB0aGUgY29vcGVyYXRpb24gd2l0aCB0aGUgQ2VudHJvIE5hY2lvbmFsIGRlIENvbnNlcnZhw6fDo28gZGEgRmxvcmEpIGFuZCBhbGxvdyBhY2Nlc3MgdG8gdGhlIEluZGV4IEhlcmJhcmlvcnVtIChkdWUgdG8gdGhlIGNvbGxhYm9yYXRpb24gb2YgVGhlIE5ldyBZb3JrIEJvdGFuaWNhbCBHYXJkZW4pLiBCZXNpZGVzIHRoaXMgaW5mb3JtYXRpb24sIHVzZXJzIGNhbiBhbHNvIGFjY2VzcyBpbWFnZXMgb2YgaGVyYmFyaXVtIHNwZWNpbWVucywgaW5jbHVkaW5nIG5vbWVuY2xhdHVyYWwgdHlwZXMsIGZyb20gYm90aCB0aGUgUmVmbG9yYSBWaXJ0dWFsIEhlcmJhcml1bSBhbmQgSU5DVCBWaXJ0dWFsIEhlcmJhcml1bSBvZiBGbG9yYSBhbmQgRnVuZ2k7IGFzIHdlbGwgYXMgaW1hZ2VzIG9mIGxpdmUgcGxhbnRzIGFuZCBzY2llbnRpZmljIGlsbHVzdHJhdGlvbnMgd2l0aCBhbGwgaW1hZ2VzIGluY2x1ZGVkIGJ5IHRoZSBleHBlcnRzIGluIGVhY2ggZ3JvdXAuXG5cblRvIGRhdGUgKDIwMTgtMDItMDYpLCA0NjQ4NSBzcGVjaWVzIGFyZSByZWNvZ25pemVkIGZvciBCcmF6aWwmIzM5O3MgZmxvcmE6IDQ3NTQgQWxnYWUsIDMzMDg3IEFuZ2lvc3Blcm1zLCAxNTY3IEJyeW9waHl0ZXMsIDU3MTggRnVuZ2ksIDMwIEd5bW5vc3Blcm1zIGFuZCAxMzI5IEZlcm5zIGFuZCBMeWNvcGh5dGVzLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjRkZDMyNTIzLWEzYTMtNDNiNy04NGRmLTRjZGEwMmYxNWNmNyIsInRpdGxlIjoiQ2hlY2tsaXN0IER1dGNoIFNwZWNpZXMgUmVnaXN0ZXIgLSBOZWRlcmxhbmRzIFNvb3J0ZW5yZWdpc3RlciIsImRlc2NyaXB0aW9uIjoiPHA+VGhlIER1dGNoIFNwZWNpZXMgUmVnaXN0ZXIgcHJvdmlkZXMgYSBjdXJyZW50IGFuZCBjb21wcmVoZW5zaXZlIG92ZXJ2aWV3IG9mIER1dGNoIGJpb2RpdmVyc2l0eS4gSXQgaXMgYmFzZWQgb24gbnVtZXJvdXMgcHVibGlzaGVkIHBhcGVycywgcmVwb3J0cywgYm9va3MgYW5kIGNoZWNrbGlzdHMgcHJvdmlkZWQgYnkgZXhwZXJ0cywgY292ZXJpbmcgYWxsIGFzcGVjdHMgb2YgdGhlIER1dGNoIGZsb3JhIGFuZCBmYXVuYS4gVGhlIER1dGNoIFNwZWNpZXMgUmVnaXN0ZXIgY29tYmluZXMgdGhpcyBpbmZvcm1hdGlvbiBpbnRvIGFuIGF1dGhvcml0YXRpdmUgYW5kIGZyZXF1ZW50bHkgdXBkYXRlZCBuYXRpb25hbCBjaGVja2xpc3QuPC9wPlxuPHA+QWxsIG11bHRpY2VsbHVsYXIgYW5pbWFscywgcGxhbnRzIGFuZCBmdW5naSBhcmUgaW5jbHVkZWQgaW4gdGhlIGNoZWNrbGlzdCwgd2l0aCB0aGUgZXhjZXB0aW9uIG9mIHNwZWNpZXMgdW5kZXIgZGlyZWN0IHN1cGVydmlzaW9uIG9mIGh1bWFucyAoZS5nLiBwZXRzKSBhbmQgc3BlY2llcyBub3QgcmVjb3JkZWQgc2luY2UgMTc1OCAoaS5lLiBzdWJmb3NzaWwgYW5kIGZvc3NpbCBzcGVjaWVzKS48L3A+XG48cD5UaGUgY2hlY2tsaXN0IGluY2x1ZGVzIGF2YWlsYWJsZSBzeW5vbnltcyBhbmQgcHJlZmVycmVkIER1dGNoIG5hbWUgYW5kIGhpZ2hlciBjbGFzc2lmaWNhdGlvbiwgaW5jbHVkaW5nIGFzc29jaWF0ZWQgc291cmNlIGFuZCBleHBlcnQuIEZ1cnRoZXJtb3JlLCBhbGwgc3BlY2llcyBhbmQgbG93ZXIgdGF4YSBhcmUgYXNzaWduZWQgYSBzdGFuZGFyZGl6ZWQgY29kZSBmb3IgdGhlaXIgb2NjdXJyZW5jZSBzdGF0dXMgd2l0aGluIHRoZSBOZXRoZXJsYW5kcy48L3A+XG48cD5UaGUgRHV0Y2ggU3BlY2llcyBSZWdpc3RlciBpcyBjb29yZGluYXRlZCBhbmQgaG9zdGVkIGJ5IE5hdHVyYWxpcyBCaW9kaXZlcnNpdHkgQ2VudGVyIGluIGNsb3NlIGNvbGxhYm9yYXRpb24gd2l0aCBFdXJvcGVhbiBJbnZlcnRlYnJhdGUgU3VydmV5IChFSVMpIC0gdGhlIE5ldGhlcmxhbmRzLiBBIGxhcmdlIG51bWJlciBvZiBzY2llbnRpZmljIGluc3RpdHV0aW9ucywgaW5kaXZpZHVhbCBleHBlcnRzIGFuZCBvcmdhbml6YXRpb25zIG9mIHZvbHVudGVlciByZWNvcmRlcnMgY29udHJpYnV0ZSB0byB0aGUgRHV0Y2ggU3BlY2llcyBSZWdpc3Rlci4gVGhlIHByb2plY3QgaXMgc3VwcG9ydGVkIGJ5IHRoZSBEdXRjaCBNaW5pc3RyeSBvZiBFY29ub21pYyBBZmZhaXJzIGFuZCBOTEJJRi48L3A+IiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiMWVjNjEyMDMtMTRmYS00ZmJkLThlZTUtYTRhODAyNTdiNDVhIiwidGl0bGUiOiJUaGUgTmF0aW9uYWwgQ2hlY2tsaXN0IG9mIFRhaXdhbiIsImRlc2NyaXB0aW9uIjoiVGhlIGNhdGFsb2cgb2YgVGFpd2FuZXNlIHNwZWNpZXMgaXMgY2FsbCBcIlRhaUJORVRcIiBhbmQgdGhlIG5hdGlvbmFsIG5vZGUgb2YgR0JJRiAoR2xvYmFsIEJpb2RpdmVyc2l0eSBJbmZvcm1hdGlvbiBGYWNpbGl0eSkgaW4gVGFpd2FuIGlzIGNhbGxlZCBcIlRhaUJJRlwiLiBDdXJyZW50bHksIHRoZSB3ZWJzaXRlcyBoYXZlIGJlZW4gZXN0YWJsaXNoZWQgYXQgQWNhZGVtaWEgU2luaWNhIChodHRwOi8vdGFpYm5ldC5zaW5pY2EuZWR1LnR3IGFuZCBodHRwOi8vd3d3LmdiaWYub3JnLnR3KS4gQm90aCBvZiB0aGUgQmlvZGl2ZXJzaXR5IFJlc2VhcmNoIENlbnRlciBhbmQgdGhlIENvbXB1dGluZyBDZW50ZXIgb2YgQWNhZGVtaWEgU2luaWNhIGFyZSBpbiBjaGFyZ2Ugb2YgdGhlIG1haW50ZW5hbmNlIGFuZCB0aGUgdXBkYXRpbmcgYmlvZGl2ZXJzaXR5IHJlbGF0ZWQgaW5mb3JtYXRpb24gYW5kIGRhdGEuXG5cblRocm91Z2ggdGhlIG5vZGUsIHRoZSBiYWNrZ3JvdW5kIG9mIHBhcnRpY2lwYXRpbmcgR0JJRiwgcmVsYXRlZCBkb2N1bWVudHMsIG5ld3MsIHVwY29taW5nIGNvbmZlcmVuY2VzLCBuYW1lIGxpc3Qgb2YgVGFpd2FuZXNlIHRheG9ub21pc3RzLCBjYXRhbG9nIG9mIGxpZmUgaW4gVGFpd2FuLCBzcGVjaW1lbiBkYXRhYmFzZSwgYmlvZGl2ZXJzaXR5IHJlbGF0ZWQgb3JnYW5pemF0aW9uLCB0ZWFtIHJlc2VhcmNoIHByb2plY3RzLCBpbmRlcGVuZGVudCBiaW9sb2dpY2FsIGRhdGFiYXNlcywgbmF0dXJhbCBoZXJpdGFnZSwgYW5kIGxvY2FsIHB1YmxpY2F0aW9ucyBldGMuIGNhbiBiZSBhY2Nlc3NlZC4gQW1vbmcgdGhlbSwgXCJOYW1lIGxpc3Qgb2YgVGFpd2FuZXNlIHRheG9ub21pc3RzXCIgYW5kIFwiQ2F0YWxvZyBvZiBMaWZlIG9mIFRhaXdhblwiIGFyZSBvbmUgcHJvbW90aW5nIHByb2plY3Qgc3BvbnNvcmVkIGJ5IHRoZSBOYXRpb25hbCBTY2llbmNlIENvdW5jaWwuIFNvIGZhciwgMjM2IGxvY2FsIHRheG9ub21pc3RzIGhhdmUgaW5jbHVkZWQgdGhlaXIgdGl0bGVzLCB0ZWxlcGhvbmVzLCBlLW1haWwgYWRkcmVzc2VzLCBhbmQgdGhlIHRheGEgdGhhdCB0aGV5IGFyZSBleHBlcnRpc2VkLiBJbiB0aGUgZnV0dXJlLCB3ZSBob3BlIHRvIGluY2x1ZGUgYWxsIG9mIHRoZSBlY29sb2dpc3RzIG9yIHRoZSBhcHBsaWVkIHNjaWVudGlzdHMgaW4gYWdyaWN1bHR1cmUsIGZvcmVzdHJ5LCBmaXNoZXJ5LCBhbmQgYW5pbWFsIGh1c2JhbmRyeSBpbiB0aGUgbmFtZSBsaXN0LlxuXG5UaGUgZmlyc3QgcGhhc2Ugb2YgQ2F0YWxvZyBvZiBMaWZlIGluIFRhaXdhbiB3aWxsIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBpdGVtcyBvZiBhbmltYWxzIChpbmNsdWRpbmcgaW5zZWN0cyksIHBsYW50cywgYW5kIGZ1bmdpOiBzcGVjaWVzIG5hbWVzLCBhdXRob3JzIGFuZCB5ZWFyLCBzdWdnZXN0ZWQgQ2hpbmVzZSBuYW1lcywgZW5kZW1pYyBpbiBUYWl3YW4gb3Igbm90LCB0aGVpciBjbGFzc2lmaWNhdGlvbiBoaWVyYXJjaHksIHRoZSBtb3N0IGF1dGhvcml6ZWQgY2l0YXRpb24gcHJvdmluZyB0aGF0IHBhcnRpY3VsYXIgc3BlY2llcyBoYXMgb2NjdXJyZWQgaW4gVGFpd2FuLiBVc2VycyBjYW4gZ2V0IHRoZSBuYW1lIGxpc3Qgb2Ygb25lIGdyb3VwIG9mIG9yZ2FuaXNtcyB0aHJvdWdoIGtleXdvcmRzIHNlYXJjaCwgc3BlY2llcyBuYW1lIHNlYXJjaGluZywgb3IgaW1hZ2Ugc2VhcmNoaW5nIGV0Yy4gRnVydGhlciBpbmZvcm1hdGlvbiBvZiBlYWNoIHNwZWNpZXMgY2FuIGJlIG9idGFpbmVkIHRocm91Z2ggdGhlIGh5cGVybGluayB0byBtb3JlIHRoYW4gMTggd2VsbC1rbm93biBnbG9iYWwgZGF0YWJhc2VzIG9yIG5ldHdvcmtzLCBzdWNoIGFzIFNwZWNpZXMyMDAwIGFuZCBJVElTIGV0Yy4gUmlnaHQgbm93LCBtb3JlIHRoYW4gMzAsMDAwIHNwZWNpZXMgaGF2ZSBiZWVuIGNvbXBpbGVkLCBhbmQgd2UgaG9wZSB0byBjb2xsZWN0IG1vcmUgdGhhbiA2MCwwMDAgc3BlY2llcyBieSBKdWx5IDIwMDQuIFNwZWNpZXMgY2hlY2tsaXN0IG9mIHRoZSBtaWNyb29yZ2FuaXNtcyB3aWxsIGJlIGluY2x1ZGVkIG5leHQgeWVhci4gV2UgaG9wZSB0byBnZXQgbW9yZSBmdW5kaW5nIGFuZCBjb2xsYWJvcmF0b3JzIGluIHRoZSBuZXh0IHBoYXNlIHRvIGNvbGxlY3Qgc3BlY2ltZW4gb3IgZWNvbG9naWNhbCBwaG90b3MgKGVuZGVtaWMgc3BlY2llcyBmaXJzdCksIGRlc2NyaXB0aW9uIChtb3JwaG9sb2d5LCBlY29sb2d5IGFuZCBiaW9sb2d5KSwgZ2VvZ3JhcGhpY2FsIGRpc3RyaWJ1dGlvbiwgc3lub255bXMsIGxpdGVyYXR1cmVzLCBhcyB3ZWxsIGFzIGRlcG9zaXRlZCBzcGVjaW1lbiBkYXRhIGZvciBlYWNoIHNwZWNpZXMuXG5cblRocm91Z2ggdGhpcyBub2RlLCB0aGUgbW9zdCBhdXRob3JpemVkIGluZm9ybWF0aW9uIG9mIGhpZ2ggYmlvZGl2ZXJzaXR5IGFuZCBlbmRlbWlzbSBvZiBUYWl3YW4gY2FuIGJlIGV4Y2hhbmdlZCBhbmQgc2hhcmVkIHdpdGggb3RoZXIgR0JJRiBwYXJ0aWNpcGFudHMuIFRoaXMgbWlzc2lvbiBpcyBhbHNvIHJlcXVlc3RlZCBieSBib3RoIG9mIHRoZSBDb252ZW50aW9uIG9uIEJpb2xvZ2ljYWwgRGl2ZXJzaXR5IGFuZCBHQklGIHRvIGVhY2ggbWVtYmVyIGJlY2F1c2UgaW4gc3VjaCBhIHdheSwgZWR1Y2F0aW9uLCByZXNlYXJjaCwgYW5kIGNvbnNlcnZhdGlvbiBvZiBiaW9kaXZlcnNpdHkgaW4gdGhlIHdvcmxkIGNvdWxkIGJlIHByb21vdGVkIGVmZmVjdGl2ZWx5LiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjM5NjUzZjNlLThkNmItNGE5NC1hMjAyLTg1OTM1OWMxNjRjNSIsInRpdGxlIjoiQmVsZ2lhbiBTcGVjaWVzIExpc3QiLCJkZXNjcmlwdGlvbiI6IlRoaXMgcmVzb3VyY2Ugd2FzIGNyZWF0ZWQgYnkgcHVibGlzaGluZyB0aGUgYmFja2VuZCBkYXRhYmFzZSBvZiB0aGUgQmVsZ2lhbiBTcGVjaWVzIExpc3Qgd2Vic2l0ZSAod3d3LnNwZWNpZXMuYmUpLiBUaGlzIHB1Ymxpc2hpbmcgd29yayBoYXMgYmVlbiBkb25lIGJ5IHRoZSBCZWxnaWFuIEJpb2RpdmVyc2l0eSBQbGF0Zm9ybSAoaHR0cDovL3d3dy5iaW9kaXZlcnNpdHkuYmUpIGluIHRoZSBmcmFtZXdvcmsgb2YgdGhlICYjMzQ7R0JJRiBhd2FyZCBmb3IgZXZhbHVhdGluZyBjaGVja2xpc3QgcHVibGljYXRpb24gZm9ybWF0JiMzNDsgZHVyaW5nIE1heSAyMDExLlxuXG5EYXRhIGV4dHJhY3RlZCBieSBGcmFuY2lzIFN0cm9iYmUgb24gTWF5IDI3dGggMjAxMS5cblxuQWJzdHJhY3Qgb2YgdGhlIEJlbGdpYW4gU3BlY2llcyBMaXN0IHByb2plY3Q6XG5TaW5jZSBhbG1vc3QgYSB5ZWFyIG5vdywgcGVvcGxlIG9mIGFsbCBhZ2VzIGNhbiBhY2Nlc3MgdGhlIEJlbGdpYW4gU3BlY2llcyBMaXN0IGZvciBhbiBleHRlbnNpdmUgb3ZlcnZpZXcgb2YgdGhlIGJpb2RpdmVyc2l0eSBpbiBCZWxnaXVtLiBBbmltYWxzLCBwbGFudHMsIGZ1bmdpOiB5b3UgY2FuIG1ha2UgeW91ciB3YXkgdGhyb3VnaCBhIHRvdGFsIG9mIG1vcmUgdGhhbiAzMi4wMDAgc3BlY2llcyFcblxuVGhlIEJlbGdpYW4gc3BlY2llcyBsaXN0IHdhcyBzZXQgdXAgYnkgdGhlIFJCSU5TIOKAkyB0aGUgcmVzZWFyY2ggaW5zdGl0dXRpb24gYmVoaW5kIHRoZSBNdXNldW0gb2YgTmF0dXJhbCBTY2llbmNlcyDigJMgaW4gY29vcGVyYXRpb24gd2l0aCBkaWZmZXJlbnQgQmVsZ2lhbiBhbmQgaW50ZXJuYXRpb25hbCBpbnN0aXR1dGlvbnMgYW5kIG9yZ2FuaXphdGlvbnMuXG5cblRoZSBwdXJwb3NlIG9mIHRoZSBzcGVjaWVzIGxpc3QgaXMgdG8gYmVjb21lIHRoZSBvbmxpbmUgcmVmZXJlbmNlIGluIG5hbWluZyBhbmQgb2NjdXJyZW5jZSBvZiBzcGVjaWVzIGluIEJlbGdpdW0sIGVhc3kgdG8gY29uc3VsdCBpbiBqdXN0IG9uZSB3ZWJzaXRlIHRoYXQgY2VudHJhbGl6ZXMgYW5kIHN0YW5kYXJkaXplcyB0aGUgaW5mb3JtYXRpb24uIEZvciBldmVyeSBzcGVjaWVzIHRoYXQmIzM5O3MgYmVlbiBkZXNjcmliZWQsIGluZm9ybWF0aW9uIGlzIGdpdmVuIG9uIGFtb25nIG90aGVyIHRoaW5ncyB0aGUgY29uc2VydmF0aW9uIHN0YXR1cywgdGhlIGRpc3RyaWJ1dGlvbiwgdGhlIGhhYml0YXQgYW5kIG11Y2ggbW9yZS4gTW9yZSBhbmQgbW9yZSBzcGVjaWVzIGluZGV4IGNhcmRzIGFyZSBmaXR0ZWQgd2l0aCBwaWN0dXJlcyBhbmQgaW50ZXJlc3RpbmcgbGlua3MuXG5cblRoZSB3ZWJzaXRlIGlzIGFpbWVkIGF0IGEgYnJvYWQgYXVkaWVuY2U6IHJlc2VhcmNoZXJzLCBkZWNpc2lvbiBtYWtlcnMsIHN0dWRlbnRzLCBqb3VybmFsaXN0cywgbmF0dXJlIGNvbnZlcnNhdGlvbmlzdHMgYW5kIGFsbCBuYXR1cmUgbG92ZXJzLlxuXG5XYW50IHRvIGtub3cgbW9yZT8gXG5Mb2cgb24gdG8gd3d3LnNwZWNpZXMuYmUhIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiM2Q5Yjk3ZTktMmYyYy00NThlLTg4M2ItNDg4YTYyOGEzZmE1IiwidGl0bGUiOiJGcmVzaHdhdGVyIEFuaW1hbCBEaXZlcnNpdHkgQXNzZXNzbWVudCIsImRlc2NyaXB0aW9uIjoiVGhlIEZyZXNod2F0ZXIgQW5pbWFsIERpdmVyc2l0eSBBc3Nlc3NtZW50IChGQURBKSBkYXRhYmFzZSBjb250YWlucyBhdXRob3JpdGF0aXZlIHNwZWNpZXMgbGlzdHMgZm9yIHNldmVyYWwgdGF4b25vbWljIGdyb3VwcyBhbmQgZGlzdHJpYnV0aW9uIGRhdGEgYXQgdGhlIGxldmVsIG9mIGZhdW5pc3RpYyByZWdpb25zLiBUaGUgZ3JvdXBzIGN1cnJlbnRseSBwdWJsaXNoZWQgKDI2LTA2LTIwMTUpIGluY2x1ZGUgSGFsYWNhcmlkYWUsIENuaWRhcmlhLUh5ZHJvaWRhLCBDbGFkb2NlcmEsIENvcGVwb2RhLCBNeXNpZGFjZWFlLCBFcGhlbWVyb3B0ZXJhLCBQbGVjb3B0ZXJhLCBUcmljaG9wdGVyYSwgTWFjcm9waHl0ZXMsIEJpdmFsdmlhLCBOZW1hdG9tb3JwaGEsIFJvdGlmZXJhLCBUdXJiZWxsYXJpYSwgRmlzaCwgTWFtbWFscywgRGlwdGVyYS1DaGlyb25vbWlkYWUtVGFueXRhcnNpbmksIERpcHRlcmEtQ3VsaWNpZGFlLCBDb2xlb3B0ZXJhLVBzZXBoZW5pZGFlLCBDb2xlb3B0ZXJhLUR5dGlzY2lkYWUsIENvbGVvcHRlcmEtR3lyaW5pZGFlLCBDb2xlb3B0ZXJhLUhhbGlwbGlkYWUsIENvbGVvcHRlcmEtRG9uYWNpaW5hZSBhbmQgR2FzdHJvdHJpY2hhIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiNjVjOTEwM2YtMmZiZi00MTRiLTliMGItZTQ3Y2E5NmM1ZGYyIiwidGl0bGUiOiJBZnJvbW90aHMsIG9ubGluZSBkYXRhYmFzZSBvZiBBZnJvdHJvcGljYWwgbW90aCBzcGVjaWVzIChMZXBpZG9wdGVyYSkiLCJkZXNjcmlwdGlvbiI6IlRoaXMgZGF0YXNldCBjb3ZlcnMgYWxsIHJlbGV2YW50IGluZm9ybWF0aW9uIG9uIGV2ZXJ5IEFmcm90cm9waWNhbCBtb3RoIHNwZWNpZXMuXG5cblRoZSB6b29nZW9ncmFwaGljIGFyZWEgY292ZXJlZCBjYW4gYmUgZGVmaW5lZCBhcyB0aGUgQWZyaWNhIGNvbnRpbmVudCBzb3V0aCBvZiB0aGUgU2FoYXJhIChpLmUuIGV4Y2wuIE1vcm9jY28sIEFsZ2VyaWEsIFR1bmlzaWEsIExpYnlhIGFuZCBFZ3lwdCksIHRoZSBpc2xhbmRzIGluIHRoZSBBdGxhbnRpYyBPY2VhbjogQW1zdGVyZGFtIElzbGFuZCwgQXNjZW5zaW9uLCBDYXBlIFZlcmRlIEFyY2hpcGVsYWdvLCBJbmFjY2Vzc2libGUgSXNsYW5kLCBTdC4gSGVsZW5hLCBTw6NvIFRvbcOpIGFuZCBQcmluY2lwZSwgVHJpc3RhbiBkYSBDdW5oYSwgYW5kIHRoZSBpc2xhbmRzIGluIHRoZSBJbmRpYW4gT2NlYW46IENvbW9yZXMgKEFuam91YW4sIEdyYW5kZSBDb21vcmUsIE1heW90dGUsIE1vaMOpbGkpLCBNYWRhZ2FzY2FyLCBNYXNjYXJlbmUgSXNsYW5kcyAoTGEgUsOpdW5pb24sIE1hdXJpdGl1cywgUm9kcmlndWVzKSwgU2V5Y2hlbGxlcyAoRsOpbGljaXTDqSwgTWFow6ksIFByYXNsaW4sIFNpbGhvdWV0dGUsIGEuby4pLlxuXG5GdXJ0aGVybW9yZSwgYWxzbyB0aG9zZSBtb3RoIHNwZWNpZXMgb2NjdXJyaW5nIGluIHRoZSB0cmFuc2l0aW9uIHpvbmUgdG8gdGhlIFBhbGFlYXJjdGljIGZhdW5hIGhhdmUgYmVlbiBpbmNsdWRlZCwgbmFtZWx5IG1vc3Qgb2YgdGhlIEFyYWJpYSBQZW5pbnN1bGEgKEt1d2FpdCwgT21hbiwgU2F1ZGkgQXJhYmlhLCBVbml0ZWQgQXJhYiBFbWlyYXRlcywgWWVtZW4gd2l0aCBTb2NvdHJhKSBidXQgbm90IElyYXEsIEpvcmRhbiBhbmQgZnVydGhlciBub3J0aC4gQWxzbywgc29tZSBTYWhhcmFuIHNwZWNpZXMgaGF2ZSBiZWVuIGluY2x1ZGVkIChlLiBnLiBIb2dnYXIgTXRzLiBpbiBBbGdlcmlhLCBUaWJlc3RpIE10cy4gaW4gU291dGggTGlieWEpLlxuXG5VdG1vc3QgY2FyZSB3YXMgdGFrZW4gdGhhdCB0aGUgZGF0YSBpbmNvcnBvcmF0ZWQgaW4gdGhlIGRhdGFiYXNlIGFyZSBjb3JyZWN0LiBXZSBkZWNsaW5lIGFueSByZXNwb25zaWJpbGl0eSBpbiBjYXNlIG9mIGRhbWFnZSB0byBzb2Z0LSBvciBoYXJkd2FyZSBiYXNlZCBvbiBpbmZvcm1hdGlvbiB1c2VkIGluIHRoaXMgd2Vic2l0ZS4gUGVyc29ucyByZXRyaWV2aW5nIGluZm9ybWF0aW9uIGZyb20gdGhpcyB3ZWJzaXRlIGZvciB0aGVpciBvd24gcmVzZWFyY2ggb3IgZm9yIGFwcGxpZWQgYXNwZWN0cyBzdWNoIGFzIHBlc3QgY29udHJvbCBwcm9ncmFtbWVzLCBzaG91bGQgYWNrbm93bGVkZ2UgdGhlIHVzYWdlIG9mIGRhdGEgZnJvbSB0aGlzIHdlYnNpdGUgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG5cbkRlIFByaW5zLCBKLiAmYW1wOyBEZSBQcmlucywgVy4gMjAxMS4gQWZyb21vdGhzLCBvbmxpbmUgZGF0YWJhc2Ugb2YgQWZyb3Ryb3BpY2FsIG1vdGggc3BlY2llcyAoTGVwaWRvcHRlcmEpLiBXb3JsZCBXaWRlIFdlYiBlbGVjdHJvbmljIHB1YmxpY2F0aW9uICh3d3cuYWZyb21vdGhzLm5ldCkiLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiJhZjY2ZDRjZi0wZmQyLTQzNGItOTMzNC05ODA2YTVlZmE2ZjciLCJ0aXRsZSI6Ik9ydGhvcHRlcmEgU3BlY2llcyBGaWxlIiwiZGVzY3JpcHRpb24iOiJUaGlzIGZpbGUgY29udGFpbnMgdGF4b24gbmFtZXMgYW5kIHJlbGF0ZWQgbm9tZW5jbGF0dXJhbCBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yZGVyIE9ydGhvcHRlcmEgb3JpZ2luYXRpbmcgZnJvbSB0aGUgT3J0aG9wdGVyYSBTcGVjaWVzIEZpbGUgbWFpbnRhaW5lZCBieSB0aGUgU3BlY2llcyBGaWxlIEdyb3VwIChodHRwOi8vc29mdHdhcmUuc3BlY2llc2ZpbGUub3JnKSBhdCB0aGUgVW5pdmVyc2l0eSBvZiBJbGxpbm9pcywgSWxsaW5vaXMgTmF0dXJhbCBIaXN0b3J5IFN1cnZleS4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiI5ZmU3YzAyYy1hNDVlLTRmMzEtYWZjYS00ODQwZWFkMmQ2MmEiLCJ0aXRsZSI6IkZpc2hlcyBvZiB0aGUgTmVvdHJvcGljcyIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjI1OTlkMTVmLTU4ZTEtNDc2Ni1iYmFmLTkzMzQ0YmQwOWJiNiIsInRpdGxlIjoiRWNoaW5vZGVybXMiLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiI0N2YxNjUxMi1iZjMxLTQxMGYtYjI3Mi1kMTUxYzk5NmIyZjYiLCJ0aXRsZSI6IlRoZSBDbGVtZW50cyBDaGVja2xpc3QiLCJkZXNjcmlwdGlvbiI6IlRoZSBDbGVtZW50cyBDaGVja2xpc3Qgb2YgQmlyZHMgb2YgdGhlIFdvcmxkLCA2dGggRWRpdGlvbiB3YXMgcHVibGlzaGVkIGFuZCByZWxlYXNlZCBieSBDb3JuZWxsIFVuaXZlcnNpdHkgUHJlc3MgaW4gSnVuZSAyMDA3LiBUaGUgYm9vayB3YXMgcHJvZHVjZWQgZnJvbSBhIG5lYXJseSBjb21wbGV0ZWQgbWFudXNjcmlwdCBsZWZ0IGJ5IEphbWVzIENsZW1lbnRzIHVwb24gaGlzIGRlYXRoIGluIDIwMDUuXG5cblRoZSBDb3JuZWxsIExhYiBvZiBPcm5pdGhvbG9neSBoYXMgYWNjZXB0ZWQgdGhlIGpvYiBvZiBtYWludGFpbmluZyB0aGUgZXZlci1jaGFuZ2luZyBsaXN0IG9mIHNwZWNpZXMsIHN1YnNwZWNpZXMsIEVuZ2xpc2ggbmFtZXMsIGFuZCBhcHByb3hpbWF0ZSBkaXN0cmlidXRpb25zLCBiZWdpbm5pbmcgd2l0aCBwdWJsaWNhdGlvbiBvZiB0aGUgNnRoIEVkaXRpb24uIE91ciBwcm9jZWR1cmVzIGZvciBhY2NvbXBsaXNoaW5nIHRoaXMgb25nb2luZyB0YXNrIGluY2x1ZGUgdXNpbmcgdGhlIGNvbnNpZGVyYWJsZSBleHBlcnRpc2Ugb2Ygb3VyIHJlc2VhcmNoIG9ybml0aG9sb2dpc3RzIG9uIHN0YWZmLCBhaWRlZCBlbm9ybW91c2x5IGJ5IGlucHV0IGZyb20ga25vd2xlZGdlYWJsZSBwcm9mZXNzaW9uYWwgYW5kIGFtYXRldXIgY29vcGVyYXRvcnMgd29ybGR3aWRlLiBXZSBpbnZpdGUgaW5wdXQgb24ga25vd24gb3Igc3VzcGVjdGVkIGVycm9ycyBvciB1cGRhdGVzIGF0IGFueSB0aW1lLlxuXG5UaGlzIHdlYnNpdGUgc2VydmVzIGFzIHRoZSBjbGVhcmluZ2hvdXNlIGZvciBrZWVwaW5nIHlvdXIgQ2xlbWVudHMgQ2hlY2tsaXN0IHVwIHRvIGRhdGUuIFdlIHdpbGwgcG9zdCBhbGwgY29ycmVjdGlvbnMgb25jZSBhIHllYXIgaW4gQXVndXN0LiBBdCB0aGUgc2FtZSB0aW1lLCB3ZeKAmWxsIHBvc3QgdXBkYXRlcyB0byB0aGUgdGF4b25vbXksIHNjaWVudGlmaWMgYW5kIEVuZ2xpc2ggbm9tZW5jbGF0dXJlLCBhbmQgcmFuZ2UgZGVzY3JpcHRpb25zLCB0byBpbmNvcnBvcmF0ZSBjaGFuZ2VzIHRoYXQgaGF2ZSBtYWRlIHRoZWlyIHdheSBpbnRvIHRoZSBsaXRlcmF0dXJlIGFuZCBhcmUgZ2VuZXJhbGx5IGFjY2VwdGVkIGJ5IHRoZSBhcHByb3ByaWF0ZSBzY2llbnRpZmljIGJvZHkgb3IgY29tbXVuaXR5LiBJbiB0aGUgZnV0dXJlLCB3ZSB3aWxsIGFsc28gYmUgcG9zdGluZyBhIGxpc3Qgb2YgYWx0ZXJuYXRpdmUgRW5nbGlzaCBuYW1lcy4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIxNTViMzNkMi04NGIxLTRhMzEtOTI4Ny05ZDllOTAwYmM2YzgiLCJ0aXRsZSI6IlRheG9uIGxpc3Qgb2YgZnVuZ2kgYW5kIGZ1bmdhbC1saWtlIG9yZ2FuaXNtcyBmcm9tIEdlcm1hbnkgY29tcGlsZWQgYnkgdGhlIERHZk0iLCJkZXNjcmlwdGlvbiI6Imh0dHA6Ly93d3cuZGl2ZXJzaXR5bW9iaWxlLm5ldC93aWtpL0Fib3V0XyUyMlRheG9uX2xpc3Rfb2ZfZnVuZ2lfYW5kX2Z1bmdhbC1saWtlX29yZ2FuaXNtc19mcm9tX0dlcm1hbnlfY29tcGlsZWRfYnlfdGhlX0RHZk0lMjIiLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiI5ZDAxNTk5MS00MzhhLTQwOTMtYThkMi05YTgwMDY0OTIxMjEiLCJ0aXRsZSI6IkVPTCBIb3RsaXN0IiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiYTUzNThhOGQtOWIxYS00M2EzLWI3NjktNTBkM2U2ZWY4YmQ5IiwidGl0bGUiOiJDbmlkYXJpYSIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjNmOGExMjk3LTMyNTktNDcwMC05MWZjLWFjYzQxNzBiMjdjZSIsInRpdGxlIjoiRGF0YWJhc2Ugb2YgVmFzY3VsYXIgUGxhbnRzIG9mIENhbmFkYSAoVkFTQ0FOKSIsImRlc2NyaXB0aW9uIjoiVGhlIERhdGFiYXNlIG9mIFZhc2N1bGFyIFBsYW50cyBvZiBDYW5hZGEgb3IgVkFTQ0FOIChodHRwOi8vZGF0YS5jYW5hZGVuc3lzLm5ldC92YXNjYW4pIGlzIGEgY29tcHJlaGVuc2l2ZSBhbmQgY3VyYXRlZCBjaGVja2xpc3Qgb2YgYWxsIHZhc2N1bGFyIHBsYW50cyByZXBvcnRlZCBpbiBDYW5hZGEsIEdyZWVubGFuZCAoRGVubWFyayksIGFuZCBTYWludCBQaWVycmUgYW5kIE1pcXVlbG9uIChGcmFuY2UpLiBWQVNDQU4gd2FzIGRldmVsb3BlZCBhdCB0aGUgVW5pdmVyc2l0w6kgZGUgTW9udHLDqWFsIEJpb2RpdmVyc2l0eSBDZW50cmUgYW5kIGlzIG1haW50YWluZWQgYnkgYSBncm91cCBvZiBlZGl0b3JzIGFuZCBjb250cmlidXRvcnMuIEZvciBldmVyeSBjb3JlIHRheG9uIGluIHRoZSBjaGVja2xpc3QgKHNwZWNpZXMsIHN1YnNwZWNpZXMsIG9yIHZhcmlldHkpLCBWQVNDQU4gcHJvdmlkZXMgdGhlIGFjY2VwdGVkIHNjaWVudGlmaWMgbmFtZSwgdGhlIGFjY2VwdGVkIEZyZW5jaCBhbmQgRW5nbGlzaCB2ZXJuYWN1bGFyIG5hbWVzLCBhbmQgdGhlaXIgc3lub255bXMvYWx0ZXJuYXRpdmVzIGluIENhbmFkYSwgYXMgd2VsbCBhcyB0aGUgZGlzdHJpYnV0aW9uIHN0YXR1cyAobmF0aXZlLCBpbnRyb2R1Y2VkLCBlcGhlbWVyYWwsIGV4Y2x1ZGVkLCBleHRpcnBhdGVkLCBkb3VidGZ1bCBvciBhYnNlbnQpIG9mIHRoZSBwbGFudCBmb3IgZWFjaCBwcm92aW5jZSBvciB0ZXJyaXRvcnksIGFuZCB0aGUgaGFiaXQgKHRyZWUsIHNocnViLCBoZXJiIGFuZC9vciB2aW5lKSBvZiB0aGUgcGxhbnQgaW4gQ2FuYWRhLiBGb3IgcmVwb3J0ZWQgaHlicmlkcyAobm90aG90YXhhIG9yIGh5YnJpZCBmb3JtdWxhcykgVkFTQ0FOIGFsc28gcHJvdmlkZXMgdGhlIGh5YnJpZCBwYXJlbnRzLCBleGNlcHQgaWYgdGhlIHBhcmVudHMgb2YgdGhlIGh5YnJpZCBkbyBub3Qgb2NjdXIgaW4gQ2FuYWRhLiBBbGwgdGF4YSBhcmUgbGlua2VkIHRvIGEgY2xhc3NpZmljYXRpb24uIFZBU0NBTiByZWZlcnMgdG8gYSBzb3VyY2UgZm9yIGFsbCBuYW1lLCBjbGFzc2lmaWNhdGlvbiBhbmQgZGlzdHJpYnV0aW9uIGluZm9ybWF0aW9uLlxuXG5BbGwgZGF0YSBoYXZlIGJlZW4gcmVsZWFzZWQgdG8gdGhlIHB1YmxpYyBkb21haW4gdW5kZXIgYSBDQzAgd2FpdmVyIGFuZCBhcmUgYXZhaWxhYmxlIHRocm91Z2ggQ2FuYWRlbnN5cyBhbmQgdGhlIEdsb2JhbCBCaW9kaXZlcnNpdHkgSW5mb3JtYXRpb24gRmFjaWxpdHkgKEdCSUYpLiBWQVNDQU4gaXMgYSBzZXJ2aWNlIHRvIHRoZSBzY2llbnRpZmljIGNvbW11bml0eSBhbmQgdGhlIGdlbmVyYWwgcHVibGljLCBpbmNsdWRpbmcgYWRtaW5pc3RyYXRpb25zLCBjb21wYW5pZXMsIGFuZCBub24tZ292ZXJubWVudGFsIG9yZ2FuaXphdGlvbnMuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiM2U4ODQyMmItMzQwYy00YjdkLWFmODgtMTUxZTgxN2YzMDc3IiwidGl0bGUiOiJQZXJhY2FyaWRhIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiMTZjM2Y5Y2ItNGIxOS00NTUzLWFjOGUtZWJiOTAwMDNhYTAyIiwidGl0bGUiOiJHZXJtYW4gV2lraXBlZGlhIC0gU3BlY2llcyBQYWdlcyIsImRlc2NyaXB0aW9uIjoiU3BlY2llcyBwYWdlcyBleHRyYWN0ZWQgZnJvbSB0aGUgJExBTkcgV2lraXBlZGlhIGFydGljbGUgWE1MIGR1bXAgZnJvbSAkREFURS5cbk11bHRpbWVkaWEsIHZlcm5hY3VsYXIgbmFtZXMgYW5kIHRleHR1YWwgZGVzY3JpcHRpb25zIGFyZSBleHRyYWN0ZWQsIGJ1dCBvbmx5IHBhZ2VzIHdpdGggYSB0YXhvYm94IG9yIHNwZWNpZXNib3ggdGVtcGxhdGUgYXJlIHJlY29nbml6ZWQuXG5cblNlZSBodHRwczovL2dpdGh1Yi5jb20vbWRvZXJpbmcvd2lraXBlZGlhLWR3Y2EgZm9yIGRldGFpbHMuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiNjFhNWYxNzgtYjVmYi00NDg0LWI2ZDgtOWIxMjk3MzllNTlkIiwidGl0bGUiOiJVTklURSAtIFVuaWZpZWQgc3lzdGVtIGZvciB0aGUgRE5BIGJhc2VkIGZ1bmdhbCBzcGVjaWVzIGxpbmtlZCB0byB0aGUgY2xhc3NpZmljYXRpb24iLCJkZXNjcmlwdGlvbiI6IlVOSVRFIGlzIGEgckROQSBzZXF1ZW5jZSBkYXRhYmFzZSBkZXNpZ25lZCB0byBwcm92aWRlIGEgc3RhYmxlIGFuZCByZWxpYWJsZSBwbGF0Zm9ybSBmb3Igc2VxdWVuY2UtYm9ybmUgaWRlbnRpZmljYXRpb24gb2YgYWxsIGZ1bmdhbCBzcGVjaWVzLiBVTklURSBwcm92aWRlcyBhIHVuaWZpZWQgd2F5IGZvciBkZWxpbWl0aW5nLCBpZGVudGlmeWluZywgY29tbXVuaWNhdGluZywgYW5kIHdvcmtpbmcgd2l0aCBETkEtYmFzZWQgU3BlY2llcyBIeXBvdGhlc2VzIChTSCkuIEFsbCBmdW5nYWwgSVRTIHNlcXVlbmNlcyBpbiB0aGUgSW50ZXJuYXRpb25hbCBOdWNsZW90aWRlIFNlcXVlbmNlIERhdGFiYXNlcyAoSU5TRDogR2VuQmFuaywgRU5BLCBEREJKKSBhcmUgY2x1c3RlcmVkIHRvIGFwcHJveGltYXRlbHkgdGhlIHNwZWNpZXMgbGV2ZWwgYnkgYXBwbHlpbmcgYSBzZXQgb2YgZHluYW1pYyBkaXN0YW5jZSB2YWx1ZXMgKCZsdDswLjUgLSAzLjAlKS4gQWxsIHNwZWNpZXMgaHlwb3RoZXNlcyBhcmUgZ2l2ZW4gYSB1bmlxdWUsIHN0YWJsZSBuYW1lIGluIHRoZSBmb3JtIG9mIGEgRE9JLCBhbmQgdGhlaXIgdGF4b25vbWljIGFuZCBlY29sb2dpY2FsIGFubm90YXRpb25zIGFyZSB2ZXJpZmllZCB0aHJvdWdoIGRpc3RyaWJ1dGVkLCB3ZWItYmFzZWQgdGhpcmQtcGFydHkgYW5ub3RhdGlvbiBlZmZvcnRzLiBTSHMgYXJlIGNvbm5lY3RlZCB0byBhIHRheG9uIG5hbWUgYW5kIGl0cyBjbGFzc2lmaWNhdGlvbiBhcyBmYXIgYXMgcG9zc2libGUgKHBoeWx1bSwgY2xhc3MsIG9yZGVyLCBldGMuKSBieSB0YWtpbmcgaW50byBhY2NvdW50IGlkZW50aWZpY2F0aW9ucyBmb3IgYWxsIHNlcXVlbmNlcyBpbiB0aGUgU0guIEFuIGF1dG9tYXRpY2FsbHkgb3IgbWFudWFsbHkgZGVzaWduYXRlZCBzZXF1ZW5jZSBpcyBjaG9zZW4gdG8gcmVwcmVzZW50IGVhY2ggc3VjaCBTSC4gVGhlc2Ugc2VxdWVuY2VzIGFyZSByZWxlYXNlZMKgKGh0dHBzOi8vdW5pdGUudXQuZWUvcmVwb3NpdG9yeS5waHApwqBmb3IgdXNlIGJ5IHRoZSBzY2llbnRpZmljIGNvbW11bml0eSBpbiwgZm9yIGV4YW1wbGUsIGxvY2FsIHNlcXVlbmNlIHNpbWlsYXJpdHkgc2VhcmNoZXMgYW5kIG5leHQtZ2VuZXJhdGlvbiBzZXF1ZW5jaW5nIGFuYWx5c2lzIHBpcGVsaW5lcy4gVGhlIHN5c3RlbSBhbmQgdGhlIGRhdGEgYXJlIHVwZGF0ZWQgYXV0b21hdGljYWxseSBhcyB0aGUgbnVtYmVyIG9mIHB1YmxpYyBmdW5nYWwgSVRTIHNlcXVlbmNlcyBncm93cy4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIzYzM3ZWJjNi1kM2Q4LTQ5NmMtOTZlOC01NWE2MDg4YWFlY2IiLCJ0aXRsZSI6IkFubmVsaWRhIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiZDhmYjE2MDAtZDYzNi00YjM1LWFhMGQtZDRmMjkyYzFiNDI0IiwidGl0bGUiOiJGYXVuYSBFdXJvcGFlYSAtIExlcGlkb3B0ZXJhIiwiZGVzY3JpcHRpb24iOiJBbGwgTGVwaWRvcHRlcmEgZnJvbSB0aGUgRmF1bmEgRXVyb3BhZWEgcHJvamVjdCwgd2hpY2ggaGFzIGFzc2VtYmxlZCBhIGRhdGFiYXNlIG9mIHRoZSBzY2llbnRpZmljIG5hbWVzIGFuZCBkaXN0cmlidXRpb24gb2YgYWxsIGxpdmluZyBtdWx0aWNlbGx1bGFyIEV1cm9wZWFuIGxhbmQgYW5kIGZyZXNoLXdhdGVyIGFuaW1hbHMuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiM2U5YTk0OTMtNDdlNC00ZGM5LWE3M2EtMDBjMjMxNTZiMTAwIiwidGl0bGUiOiJDb2xhYm9yYWNpb25lcyBBbWVyaWNhbmFzIFNvYnJlIEF2ZXMiLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiJiYjM5NWEwYS03MmYwLTRjNTAtYjliNi1lMTAxMGI3OWQ1YzkiLCJ0aXRsZSI6IllhbmF5YWN1IE5hdHVyYWwgSGlzdG9yeSBSZXNlYXJjaCBHcm91cCIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjBlMzVjOGE4LWQ3N2EtNGRlNS05MmU5LWU4NzE2NmVkMDI4YSIsInRpdGxlIjoiQW50aG9waGlsYS0gYW4gb25saW5lIHJlcG9zaXRvcnkgb2YgYmVlIGRpdmVyc2l0eSIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjQ3YmFhNTZjLWE1MTEtNDc2NC1iNTA2LTM0MmQ2M2E5ZWNiZSIsInRpdGxlIjoiUG9yaWZlcmEiLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIwYjE3MzVmZi02YTY2LTQ1NGItODY4Ni1jYWUxY2JjNzMyYTIiLCJ0aXRsZSI6IkNoZWNrbGlzdCBvZiBWZXJtb250IFNwZWNpZXMiLCJkZXNjcmlwdGlvbiI6IjxwPlRoZSBhaW0gb2YgdGhlIENoZWNrbGlzdCBvZiBWZXJtb250IFNwZWNpZXMgKFZUc3BlY2llcykgaXMgdG8gcHJvdmlkZSBhIGNvbXByZWhlbnNpdmUgbGlzdCBvZiBuYW1lcyBvZiBvcmdhbmlzbXMsIGluY2x1ZGluZyBpbmZvcm1hdGlvbiBvbiBzeW5vbnlteSwgdGhhdCBoYXZlIGJlZW4gcmVjb3JkZWQgaW4gdGhlIFN0YXRlIG9mIFZlcm1vbnQsIFVuaXRlZCBTdGF0ZXMuIExpa2UgYWxsIHNjaWVuY2UsIFZUc3BlY2llcyBpcyBhIHdvcmsgaW4gcHJvZ3Jlc3MuIE1hbnkgdGF4b25vbWljIGdyb3VwcyByZW1haW4gZGVmaWNpZW50IGFuZCBsaXR0bGUgc3R1ZGllcyBpbiB0aGUgc3RhdGUsIGFuZCB1c2VycyB3aWxsIG5vdGljZSB0aGF0IG1hbnkgc3BlY2llcyBhcmUgc3RpbGwgbWlzc2luZyBmcm9tIHRoZSBkYXRhYmFzZS4gWW91ciBjb250cmlidXRpb25zIGFuZCBmZWVkYmFjayBhcmUgZXNzZW50aWFsIHRvIGZ1cnRoZXIgaW1wcm92ZSB0aGUgcXVhbGl0eSBhbmQgdGF4b25vbWljIGNvdmVyYWdlIG9mIFZUc3BlY2llcy48L3A+XG48cD5XaGlsZSB0aGUgaGlnaGVzdCBwcmlvcml0eSBpcyB0byBwcm92aWRlIHZhbGlkIG5hbWVzLCBvdGhlciBuYW1lcyBpbiB1c2UgYXJlIGluY2x1ZGVkIHNvIHRoYXQgdGhpcyByZWdpc3RlciBjYW4gc2VydmUgYXMgYSBndWlkZSB0byBpbnRlcnByZXQgdGF4b25vbWljIGxpdGVyYXR1cmUgYW5kIGV4cGxvcmUgYmlvZGl2ZXJzaXR5IGRhdGEgZnJvbSB0aGUgc3RhdGUuIENvbXBsZXRpbmcgYSBjaGVja2xpc3Qgb2YgYWxsIHNwZWNpZXMgYW5kIGtlZXBpbmcgaXQgdXAtdG8tZGF0ZSBpcyBhIGNvbnRpbnVvdXMgcHJvY2Vzcy4gTmV3IGluZm9ybWF0aW9uIGlzIGNvbnRpbnVhbGx5IGRpc2NvdmVyZWQgYW5kIGFkZGVkLiBPZnRlbiBkYXRhIGFsc28gY29tZSBpbiBmcm9tIGNvbnRyaWJ1dGlvbnMgb2YgbGFyZ2UgZGF0YXNldHMsIHN1Y2ggYXMgZ2xvYmFsIG9yIHJlZ2lvbmFsIHNwZWNpZXMgbGlzdHMuIFBsZWFzZSBjb250YWN0IHVzIHdpdGggZXJyb3JzLCBvbWlzc2lvbnMsIG9yIHF1ZXN0aW9ucyB0byBoZWxwIHVzIG1ha2UgdGhpcyByZXNvdXJjZSBhcyBjb21wbGV0ZSBhcyBwb3NzaWJsZS48L3A+XG48cD5WVHNwZWNpZXMgY29udGFpbnMgYW5pbWFscywgcGxhbnRzLCBhbmQgZnVuZ2kuIEZvciBlYWNoIHNwZWNpZXMgd2UgcHJvdmlkZSBzY2llbnRpZmljIG5hbWUocyksIGF1dGhvcnMgYW5kIHllYXIsIHZlcm5hY3VsYXIgbmFtZShzKSwgY2xhc3NpZmljYXRpb24gaGllcmFyY2h5LCBjaXRhdGlvbiBwcm92aW5nIHRoYXQgcGFydGljdWxhciBzcGVjaWVzIGhhcyBvY2N1cnJlZCBpbiBWZXJtb250LCBhbmQgbW9yZS4gRnVydGhlciBpbmZvcm1hdGlvbiBvZiBlYWNoIHNwZWNpZXMgY2FuIGJlIG9idGFpbmVkIGF0IHRoZSBWZXJtb250IEF0bGFzIG9mIExpZmUgKFZBTCkgYXQgaHR0cDovL3ZhbC52dGVjb3N0dWRpZXMub3JnLjwvcD5cbjxwPlZUc3BlY2llcyB1c2VzIGEgc2V0IG9mIGdlbmVyYWxseSBhY2NlcHRlZCByZWZlcmVuY2VzLCBhdWdtZW50ZWQgYnkgcmVjZW50IHNjaWVudGlmaWMgbGl0ZXJhdHVyZSBhbmQgZXhwZXJ0IG9waW5pb24sIHRvIGVzdGFibGlzaCBhIHN0YW5kYXJkIHNjaWVudGlmaWMgbmFtZSBmb3IgZXZlcnkgc3BlY2llcyBhbmQgdGhlaXIgaGllcmFyY2hpY2FsIGNsYXNzaWZpY2F0aW9uLiBHZW5lcmFsbHksIFZUc3BlY2llcyBmb2xsb3dzIHRoZSBJbnRlZ3JhdGVkIFRheG9ub21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gKElUSVM7IGh0dHBzOi8vd3d3Lml0aXMuZ292L1xuKSBmb3IgYXV0aG9yaXRhdGl2ZSB0YXhvbm9taWMgaW5mb3JtYXRpb24gb24gcGxhbnRzLCBhbmltYWxzLCBhbmQgZnVuZ2kgb2YgTm9ydGggQW1lcmljYSwgYXMgd2VsbCBhcyB0aGUgR0JJRiBiYWNrYm9uZSB0YXhvbm9teSAoaHR0cHM6Ly93d3cuZ2JpZi5vcmcvZGF0YXNldC9kN2RkZGJmNC0yY2YwLTRmMzktOWIyYS1iYjA5OWNhYWUzNmMpLjwvcD4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiI1MmE0MjNkMi0wNDg2LTRlNzctYmNlZS02MzUwZDcwOGQ2ZmYiLCJ0aXRsZSI6IlByb2thcnlvdGljIE5vbWVuY2xhdHVyZSBVcC10by1kYXRlIiwiZGVzY3JpcHRpb24iOiImIzM0O1Byb2thcnlvdGljIE5vbWVuY2xhdHVyZSB1cC10by1kYXRlJiMzNDsgaXMgYSBjb21waWxhdGlvbiBvZiBhbGwgbmFtZXMgb2YgQmFjdGVyaWEgYW5kIEFyY2hhZWEgd2hpY2ggaGF2ZSBiZWVuIHZhbGlkbHkgcHVibGlzaGVkIGFjY29yZGluZyB0byB0aGUgQmFjdGVyaW9sb2dpY2FsIENvZGUgc2luY2UgMS4gSmFuLiAxOTgwLCBhbmQgbm9tZW5jbGF0dXJhbCBjaGFuZ2VzIHdoaWNoIGhhdmUgYmVlbiB2YWxpZGx5IHB1Ymxpc2hlZCBzaW5jZS4gSXQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIHB1YmxpY2F0aW9uIG9mIGVhY2ggbmV3IGlzc3VlIG9mIHRoZSBJbnQuIEouIFN5c3QuIEV2b2wuIE1pY3JvYmlvbC4gKElKU0VNKS4gJiMzNDtQcm9rYXJ5b3RpYyBOb21lbmNsYXR1cmUgdXAtdG8tZGF0ZSYjMzQ7IGlzIHB1Ymxpc2hlZCBieSB0aGUgTGVpYm5pei1JbnN0aXR1dCBEU01aIC0gRGV1dHNjaGUgU2FtbWx1bmcgdm9uIE1pa3Jvb3JnYW5pc21lbiB1bmQgWmVsbGt1bHR1cmVuIEdtYkguIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiNzE2NjcxNTQtMjU3ZC00ZDhlLWEyYTUtNzExYWFmOWIyZDc0IiwidGl0bGUiOiJQaHRoaXJhcHRlcmEuaW5mbyIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6Ijg4ZjRlMzVhLWJkZjgtNGFhMi05YTFiLTU2NDAxZDRlZWQxNSIsInRpdGxlIjoiVGF4b24gbGlzdCBvZiBhbmltYWxzIHdpdGggR2VybWFuIG5hbWVzICh3b3JsZHdpZGUpIGNvbXBpbGVkIGF0IHRoZSBTTU5TIiwiZGVzY3JpcHRpb24iOiJodHRwOi8vd3d3LmRpdmVyc2l0eW1vYmlsZS5uZXQvd2lraS9BYm91dF8lMjJUYXhvbl9saXN0X29mX2FuaW1hbHNfd2l0aF9HZXJtYW5fbmFtZXNfJTI4d29ybGR3aWRlJTI5X2NvbXBpbGVkX2F0X3RoZV9TTU5TJTIyIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiMzlmMzZmMTAtNTU5Yi00MjdmLThjODYtMmQyOGFmZmY2OGNhIiwidGl0bGUiOiJEQUlTSUUgLSBJbnZlbnRvcnkgb2YgYWxpZW4gaW52YXNpdmUgc3BlY2llcyBpbiBFdXJvcGUiLCJkZXNjcmlwdGlvbiI6IjxwPlRoZSBEQUlTSUUgLSBpbnZlbnRvcnkgb2YgYWxpZW4gaW52YXNpdmUgc3BlY2llcyBpbiBFdXJvcGUgaXMgYSBzcGVjaWVzIGNoZWNrbGlzdCBkYXRhc2V0IHB1Ymxpc2hlZCBieSB0aGUgUmVzZWFyY2ggSW5zdGl0dXRlIGZvciBOYXR1cmUgYW5kIEZvcmVzdCAoSU5CTykgYW5kIHRoZSBDZW50cmUgZm9yIEVjb2xvZ3kgYW5kIEh5ZHJvbG9neSAoQ0VIKS4gSXQgY29udGFpbnMgaW5mb3JtYXRpb24gb24gMTIsMTA0IHRheGEgKG1vc3RseSBzcGVjaWVzIGFuZCBtb3N0bHkgaW50cm9kdWNlZCkgb2NjdXJyaW5nIGluIHRoZSB3aWxkIGluIEV1cm9wZSBzaW5jZSAxNTAwLiBJdCBjb3ZlcnMgYSBicm9hZCB0YXhvbm9taWMgc3BlY3RydW0gb2YgdGVycmVzdHJpYWwgYW5kIGFxdWF0aWMgZnJlZSBsaXZpbmcgYW5kIHBhcmFzaXRpYyBvcmdhbmlzbXMuIFRoZSBjb2xsYXRpb24gb2YgdGhlIGFsaWVuIHNwZWNpZXMgbGlzdCBpcyB0aGUgcmVzdWx0IG9mIHRoZSBlZmZvcnRzIG9mIHRoZSBEQUlTSUUgKGh0dHA6Ly93d3cuZXVyb3BlLWFsaWVucy5vcmcvKSBwcm9qZWN0IHBhcnRuZXJzIGFuZCBtb3JlIHRoYW4gMzAwIGNvbGxhYm9yYXRvcnMgZnJvbSBFdXJvcGUgYW5kIG5laWdoYm91cmluZyBjb3VudHJpZXMsIGludm9sdmVkIGluIGRpZmZlcmVudCBmaWVsZHMgb2YgZXhwZXJ0aXNlIGFuZCBvcmdhbmlzYXRpb25zLiBIZXJlIHRoZSBEQUlTSUUgY2hlY2tsaXN0IGlzIHB1Ymxpc2hlZCBhcyBhIHN0YW5kYXJkaXplZCBEYXJ3aW4gQ29yZSBBcmNoaXZlIGFuZCBpbmNsdWRlcyBmb3IgZWFjaCBzcGVjaWVzOiB0aGUgc2NpZW50aWZpYyBuYW1lLCBoaWdoZXIgY2xhc3NpZmljYXRpb24sIGFuZCBzdGFibGUgdGF4b24gaWRlbnRpZmllciAoaW4gdGhlIHRheG9uIGNvcmUpLCB0aGUgdmVybmFjdWxhciBuYW1lcyAoaW4gdGhlIHZlcm5hY3VsYXIgbmFtZXMgZXh0ZW5zaW9uKSwgdGhlIHByZXNlbmNlIGluIGEgc3BlY2lmaWMgcmVnaW9uLCB0aGUgeWVhciBvZiB0aGUgZmlyc3QgaW50cm9kdWN0aW9uIChmaXJzdCBjb2xsZWN0aW9uKSBhbmQvb3IgbGFzdCBhc3Nlc3NtZW50L29ic2VydmF0aW9uIGluIHRoYXQgcmVnaW9uLCBhcyB3ZWxsIGFzIGV4dHJhIGluZm9ybWF0aW9uIChpbiB0aGUgZGlzdHJpYnV0aW9uIGV4dGVuc2lvbiksIGFuZCB0aGUgaGFiaXRhdCwgbmF0aXZlIHJhbmdlLCBhbmQgZWNvZnVuY3Rpb25hbCBncm91cCAoaW4gdGhlIGRlc2NyaXB0aW9uIGV4dGVuc2lvbikuIFRoZSBEQUlTSUUgZGF0YXNldCBpcyBubyBsb25nZXIgbWFpbnRhaW5lZCwgYnV0IGNhbiBiZSB1c2VkIGFzIGEgaGlzdG9yaWNhbCBhcmNoaXZlIGZvciByZXNlYXJjaGluZyBhbmQgbWFuYWdpbmcgYWxpZW4gcGxhbnRzIG9yIGNvbXBpbGluZyByZWdpb25hbCBhbmQgbmF0aW9uYWwgcmVnaXN0cmllcyBvZiBhbGllbiBzcGVjaWVzLiBJc3N1ZXMgd2l0aCB0aGUgZGF0YXNldCBjYW4gYmUgcmVwb3J0ZWQgYXQgaHR0cHM6Ly9naXRodWIuY29tL3RyaWFzLXByb2plY3QvZGFpc2llLWNoZWNrbGlzdDwvcD5cbjxwPldlIGhhdmUgcmVsZWFzZWQgdGhpcyBkYXRhc2V0IHVuZGVyIGEgQ3JlYXRpdmUgQ29tbW9ucyBBdHRyaWJ1dGlvbiBsaWNlbnNlIChDQy1CWSA0LjApLiBXZSB3b3VsZCBhcHByZWNpYXRlIGl0IGlmIHlvdSBmb2xsb3cgdGhlIEdCSUYgY2l0YXRpb24gZ3VpZGVsaW5lcyAoaHR0cHM6Ly93d3cuZ2JpZi5vcmcvY2l0YXRpb24tZ3VpZGVsaW5lcykgd2hlbiB1c2luZyB0aGUgZGF0YS4gSWYgeW91IGhhdmUgYW55IHF1ZXN0aW9ucyByZWdhcmRpbmcgdGhpcyBkYXRhc2V0LCBkb27igJl0IGhlc2l0YXRlIHRvIGNvbnRhY3QgdXMgdmlhIHRoZSBjb250YWN0IGluZm9ybWF0aW9uIHByb3ZpZGVkIGluIHRoZSBtZXRhZGF0YSBvciB2aWEgaHR0cHM6Ly90d2l0dGVyLmNvbS90cmlhc19wcm9qZWN0LjwvcD5cbjxwPlRoZSBwdWJsaWNhdGlvbiBvZiB0aGUgY2hlY2tsaXN0IHRvIEdCSUYgd2FzIHN1cHBvcnRlZCBieSB0aGUgRXVyb3BlYW4gQ29vcGVyYXRpb24gaW4gU2NpZW5jZSBhbmQgVGVjaG5vbG9neSAoQ09TVCkgYWN0aW9uIEFsaWVuIENTSSDigJxDQTE3MTIyIC0gSW5jcmVhc2luZyB1bmRlcnN0YW5kaW5nIG9mIGFsaWVuIHNwZWNpZXMgdGhyb3VnaCBjaXRpemVuIHNjaWVuY2XigJ0gYXMgYSBTaG9ydCBUZXJtIFNjaWVudGlmaWMgTWlzc2lvbiDigJxQdWJsaXNoaW5nIGFsaWVuIHNwZWNpZXMgY2hlY2tsaXN0IGRhdGEgZm9yIEV1cm9wZSB0aHJvdWdoIHJlcGVhdGFibGUsIG9wZW4gd29ya2Zsb3dz4oCdLCAgd2l0aCB0ZWNobmljYWwgc3VwcG9ydCBwcm92aWRlZCBieSB0aGUgUmVzZWFyY2ggSW5zdGl0dXRlIGZvciBOYXR1cmUgYW5kIEZvcmVzdCAoSU5CTykuPC9wPiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjZmYjkyNjVjLTJkOTgtNDBhZC05ODlkLTdiNmJmNDgyMDUxOSIsInRpdGxlIjoiUHNvY29kZWEgU3BlY2llcyBGaWxlIiwiZGVzY3JpcHRpb24iOiJUaGlzIGZpbGUgY29udGFpbnMgdGF4b24gbmFtZXMgYW5kIHJlbGF0ZWQgbm9tZW5jbGF0dXJhbCBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yZGVyIFBzb2NvZGVhIG9yaWdpbmF0aW5nIGZyb20gdGhlIFBzb2NvZGVhIFNwZWNpZXMgRmlsZSBtYWludGFpbmVkIGJ5IHRoZSBTcGVjaWVzIEZpbGUgR3JvdXAgKGh0dHA6Ly9zb2Z0d2FyZS5zcGVjaWVzZmlsZS5vcmcpIGF0IHRoZSBVbml2ZXJzaXR5IG9mIElsbGlub2lzLCBJbGxpbm9pcyBOYXR1cmFsIEhpc3RvcnkgU3VydmV5LiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImUwOWUxZTFmLTI0NjAtNDAxNy1hOTY0LWU5OTlhYmQyYmY2NiIsInRpdGxlIjoiS29yZWFuIFBlbmluc3VsYSBGbG9yYSIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImVjMWEwYmZiLTdkOGUtNGM2Yi1iYzRkLWRmZDY4YTFlODQ0ZiIsInRpdGxlIjoiQSBsaXN0IG9mIHRoZSB0ZXJyZXN0cmlhbCBhbmQgbWFyaW5lIGJpb3RhIGZyb20gdGhlIEF6b3JlcyIsImRlc2NyaXB0aW9uIjoiVGhlIEF6b3JlcyBpcyBhIHJlbW90ZSBvY2VhbmljIGFyY2hpcGVsYWdvIG9mIG5pbmUgaXNsYW5kcyB3aGljaCBiZWxvbmdzIHRvIHRoZSBNYWNhcm9uZXNpYSBiaW9nZW9ncmFwaGljYWwgcmVnaW9uIGFuZCBpcyBhbW9uZyB0aGUgcmljaGVzdCByZWdpb25zIGNvbmNlcm5pbmcgZnVuZ2ksIHBsYW50IGFuZCBhbmltYWwgZGl2ZXJzaXR5IGluIEV1cm9wZS4gVGhpcyBjaGVja2xpc3QgbGlzdHMgYWxsIHRoZSBzcGVjaWVzIG9mIHRoZSBtb3N0IGltcG9ydGFudCB0ZXJyZXN0cmlhbCBhbmQgbWFyaW5lIHRheG9ub21pYyBncm91cHMuIFxuXG5UaGUgdG90YWwgbnVtYmVyIG9mIHRlcnJlc3RyaWFsIGFuZCBtYXJpbmUgdGF4YSAoc3BlY2llcyBhbmQgc3Vic3BlY2llcykgaW4gdGhlIEF6b3Jlc1xuaXMgZXN0aW1hdGVkIGluIGFib3V0IDgwNDcuIFRoZSBtYXJpbmUgb3JnYW5pc21zIGN1cnJlbnRseSBsaXN0ZWQgbWFrZSB1cCBhYm91dCAyMyUgb2YgdGhlIEF6b3JlYW4gYmlvZGl2ZXJzaXR5LiBUaGUgdG90YWwgbnVtYmVyIG9mIHRlcnJlc3RyaWFsIGFuZCBtYXJpbmUgZW5kZW1pYyB0YXhhIChzcGVjaWVzIGFuZCBzdWJzcGVjaWVzKSBpbiB0aGUgQXpvcmVzIGlzIGVzdGltYXRlZCBvZiBhYm91dCA0OTEuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiMmI5NGEwNDItZmUwMS00ZDlmLTg5OTUtZDk5NmMyMWQzM2NkIiwidGl0bGUiOiJDaGVja2xpc3Qgb2YgRGFuaXNoIEZ1bmdpIiwiZGVzY3JpcHRpb24iOiJDaGVja2xpc3Qgb2YgRnVuZ2kgaW5jbHVkaW5nIGxpY2hlbnMsIGFjY2VwdGVkIGFzIERhbmlzaC4gVGhlIGxpc3QgaXMgZ2VuZXJhdGVkIGZyb20gdGhlIHRheG9ub21pYyBiYWNrYm9uZSBvZiB0aGUgRGFuaXNoIGZ1bmdhbCBhdGxhcy5cblJlYWQgbW9yZSBhdCBzdmFtcGUuZGF0YWJhc2VuLm9yZyAtIHRoZSBEYW5pc2ggTXljb2xvZ2ljYWwgU29jaWV0eXMgZnVuZ2FsIHJlY29yZHMgZGF0YWJhc2UuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiOGI0ZWNkMjAtODUwZi00NzNlLWFmOGMtZGJmNWQxZTc2OTMyIiwidGl0bGUiOiJMw61uZWEgYmFzZSBkZSBlc3BlY2llcyBlbiB0w6lybWlub3MgZGUgc3Ugdm9jYWNpw7NuIGRlIGNvbnNlcnZhY2nDs24geSB1c28gc29zdGVuaWJsZSBkZWwgZGVwYXJ0YW1lbnRvIGRlIFNhbnRhbmRlciAtIFByb3llY3RvIFNhbnRhbmRlciBCSU8iLCJkZXNjcmlwdGlvbiI6IkVsIGRlcGFydGFtZW50byBkZSBTYW50YW5kZXIgY3VlbnRhIGNvbiB1bmFzIGNhcmFjdGVyw61zdGljYXMgaMOtZHJpY2FzLCBnZW9sw7NnaWNhcyB5IGNsaW3DoXRpY2FzIHF1ZSBoYWNlbiBxdWUgZWwgZGVwYXJ0YW1lbnRvIHRlbmdhIHVuYSByaXF1ZXphIGRlIGVjb3Npc3RlbWFzIHkgcmVjdXJzb3MgYmlvbMOzZ2ljb3MgaW1wb3J0YW50ZSBhIG5pdmVsIG5hY2lvbmFsLiBQb3IgbG8gdGFudG8sIGVsIHJlY29ub2NpbWllbnRvIGRlbCBjb21wb25lbnRlIGJpb2zDs2dpY28gZGUgbGEgcmVnacOzbiByZXN1bHRhIGRldGVybWluYW50ZSBmcmVudGUgYSBsYSB0b21hIGRlIGRlY2lzaW9uZXMgcmVsYWNpb25hZGFzIGNvbiBsYSBwcmVzZXJ2YWNpw7NuIHkgZWwgdXNvIHNvc3RlbmlibGUgZGUgZXN0b3MgcmVjdXJzb3MuIExhIGNvbnN0cnVjY2nDs24gZGUgdW5hIGzDrW5lYSBiYXNlIGRlIGluZm9ybWFjacOzbiBzb2JyZSBiaW9kaXZlcnNpZGFkIGRlIGVzY3JpdG9yaW8gcG9zaWJpbGl0YSBpZGVudGlmaWNhciBuZWNlc2lkYWRlcyB5IGVzdGFibGVjZXIgcGxhbmVzIGRlIGFjY2nDs24gcXVlIHNlcsOhbiDDunRpbGVzIHkgY29tcGxlbWVudGFyw6FuIGxvcyBkYXRvcyBvYnRlbmlkb3MgZW4gbGFzIGV4cGVkaWNpb25lcyBTYW50YW5kZXIgQmlvIHJlYWxpemFkYXMgcG9yIGVsIEluc3RpdHV0byBIdW1ib2xkdCB5IGxhIFVuaXZlcnNpZGFkIEluZHVzdHJpYWwgZGUgU2FudGFuZGVyIGVuIFNhbnRhbmRlci4gTGEgcHJlc2VudGUgbGlzdGEgY29udGllbmUgdW4gdG90YWwgZGUgOTQ4NSBlc3BlY2llcyAocGxhbnRhcywgbMOtcXVlbmVzLCBpbnZlcnRlYnJhZG9zLCBhdmVzLCBtYW3DrWZlcm9zLCBwZWNlcywgcmVwdGlsZXMsIGFuZmliaW9zLCBob25nb3MgeSBiYWN0ZXJpYXMpICBjb24gcG90ZW5jaWFsIGRpc3RyaWJ1Y2nDs24gZW4gZWwgZGVwYXJ0YW1lbnRvIGRlIFNhbnRhbmRlci4gRGUgbGFzIGVzcGVjaWVzIGVuY29udHJhZGFzIDEwNjkgc29uIGVuZMOpbWljYXMsIDE0OCBzb24gaW52YXNvcmFzLCAxOTYgdGllbmVuIGFsZ8O6biBncmFkbyBkZSBhbWVuYXphIHNlZ8O6biByZXNvbHVjacOzbiBNQURTIE5vLjE5MTIgZGUgMjAxNyB5IDIxOCBlc3BlY2llcyBlbnRyYW4gZW4gYWxnw7puIGFww6luZGljZSBDSVRFUy4gTGFzIHRyZXMgaW5zdGl0dWNpb25lcyBxdWUgbcOhcyBhcG9ydGFyb24gaW5mb3JtYWNpw7NuIHNlZ8O6biBsYXMgZnVlbnRlcyBjb25zdWx0YWRhcyBmdWVyb24gZWwgSW5zdGl0dXRvIEh1bWJvbGR0LCBsYSBVbml2ZXJzaWRhZCBJbmR1c3RyaWFsIGRlIFNhbnRhbmRlciB5IGxhIENvcnBvcmFjacOzbiBBdXTDs25vbWEgUmVnaW9uYWwgcGFyYSBsYSBEZWZlbnNhIGRlIGxhIE1lc2V0YSBkZSBCdWNhcmFtYW5nYS4gU2UgZGVzdGFjYSBsYSBpbmljaWF0aXZhIGRlIGNpZW5jaWEgcGFydGljaXBhdGl2YSBlQmlyZCBjb21vIGxhIGluaWNpYXRpdmEgcXVlIG3DoXMgYXBvcnRhIGRhdG9zIHNvYnJlIGxhIGZhdW5hIGRlbCBkZXBhcnRhbWVudG8gY29uIHVuIDM1JSBkZWwgdG90YWwgZGUgcmVnaXN0cm9zIGRlIHByZXNlbmNpYSBkZSBlc3BlY2llcy4gVmFyaW9zIGRlIGxvcyBtdW5pY2lwaW9zIGRlIFNhbnRhbmRlciBxdWUgY3VlbnRhbiBjb24gbGEgbWF5b3IgY2FudGlkYWQgZGUgaW5mb3JtYWNpw7NuIGVuIGxhcyBiYXNlcyBkZSBkYXRvcyBkZSBsaWJyZSBhY2Nlc28gc2UgZW5jdWVudHJhbiBlbiBlbCDDoXJlYSBNZXRyb3BvbGl0YW5hIGRlIEJ1Y2FyYW1hbmdhLiBMYSBsaXN0YSBkZSBlc3BlY2llcyBmdWUgY29uc3RydWlkYSBhIHBhcnRpciBkZSByZWdpc3Ryb3MgYmlvbMOzZ2ljb3MgZGlzcG9uaWJsZXMgeSBkZSBsaXRlcmF0dXJhIGNvbXBsZW1lbnRhcmlhLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImUxYzllODg1LTlkOGMtNDViNS05ZjdkLWI3MTBhYzJiMzAzYiIsInRpdGxlIjoiRW5kZW1pYyBzcGVjaWVzIGluIFRhaXdhbiIsImRlc2NyaXB0aW9uIjoiVGFpd2FuIGlzIGEgY29udGluZW50YWwgaXNsYW5kLCBsb2NhdGVkIGJldHdlZW4gdGhlIHNvdXRoZWFzdGVybiBjb2FzdGxpbmUgb2YgbWFpbmxhbmQgQ2hpbmEgYW5kIEphcGFuJ3MgUnl1a3l1IElzbGFuZHMuIFdpdGggZGl2ZXJzZSB0ZXJyYWluIGFuZCB3aWRlIHJhbmdlIG9mIHZlcnRpY2FsIGVsZXZhdGlvbnMsIFRhaXdhbiBoYXMgdHJvcGljYWwsIHN1YnRyb3BpY2FsLCB0ZW1wZXJhdGUsIGFuZCBmcmlnaWQgY2xpbWF0ZSB6b25lcy4gVGhlc2UgdW5pcXVlIGdlb2dyYXBoaWNhbCBjb25kaXRpb25zLCBjb3VwbGVkIHdpdGggdGhlIGVmZmVjdCBvZiBoYWJpdGF0IGlzb2xhdGlvbiwgZ2F2ZSBUYWl3YW4gaXRzIGhpZ2ggYmlvZGl2ZXJzaXR5LlxuXG5UaGUgZW5kZW1pYyBzcGVjaWVzIG9mIFRhaXdhbiBkZW5vdGVzIHRoZSBuYXRpdmUgcGxhbnRzIGFuZCBhbmltYWxzIG9mIFRhaXdhbiBhbmQgaXRzIG9mZnNob3JlIGlzbGFuZHMgc3VjaCBhcyBQZW5naHUgQXJjaGlwZWxhZ28sIE9yY2hpZCBJc2xhbmQsIEdyZWVuIElzbGFuZCwgZXRjLiBFdmVuIHRob3VnaCB0aGUgYXJlYXMgYXJlIHNtYWxsLCB0aGUgQ2hlY2tsaXN0IG9mIFRhaXdhbiAoVGFpQk5FVCkgbGlzdHMgYXJvdW5kIDUwLDAwMCB2YWxpZCBzcGVjaWVzIHNjaWVudGlmaWMgbmFtZXMuIEFtb25nIHRoZW0sIDgsMDAwIGFyZSBlbmRlbWljIHNwZWNpZXMgKGluY2x1ZGluZyBlbmRlbWljIHN1YnNwZWNpZXMgYW5kIHZhcmlldGFzKSwgc2hvd2luZyB0aGUgYWJ1bmRhbmNlIG9mIFRhaXdhbuKAmXMgZW5kZW1pYyBTcGVjaWVzLiBUYWlCTkVUIGFsc28gcHJvdmlkZXMgaW5mb3JtYXRpb24gb24gdGhlc2Ugc3BlY2llcywgc3VjaCBhcyB0aGVpciBzY2llbnRpZmljIG5hbWVzIChpbmNsdWRpbmcgYXV0aG9ycyBhbmQgeWVhcnMpLCBjb21tb24gbmFtZXMsIGFuZCBzeW5vbnltcy4gVGhyb3VnaCBUYWl3YW4gQmlvZGl2ZXJzaXR5IEluZm9ybWF0aW9uIEZhY2lsaXR5IChUYWlCSUYpLCB0aGUgaW5mb3JtYXRpb24gb24gdGhlc2UgZW5kZW1pYyBzcGVjaWVzIGFyZSBwdWJsaXNoZWQgYW5kIHRoZW4gc2hhcmVkIGFuZCBleGNoYW5nZWQgd2l0aCBvdGhlciBHQklGIHBhcnRpY2lwYW50cy4gVXNlcnMgY2FuIHVzZSBrZXl3b3JkcyB0byBsaW5rIHRvIG90aGVyIHdlYnNpdGVzIHdpdGggcmVsZXZhbnQgaW5mb3JtYXRpb24uIEFsbCB0aGVzZSBlZmZvcnRzIHdpbGwgcmVzdWx0IGluIHRoZSBjaXJjdWxhdGlvbiBhbmQgdXRpbGl6YXRpb24gb2YgaW5mb3JtYXRpb24gaW4gdGhlIGFyZWFzIG9mIHJlc2VhcmNoLCBlZHVjYXRpb24gYW5kIGNvbnNlcnZhdGlvbi4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiI2NzJhY2EzMC1mMWI1LTQzZDMtOGEyYi1jMTYwNjEyNWZhMWIiLCJ0aXRsZSI6Ik1hbW1hbCBTcGVjaWVzIG9mIHRoZSBXb3JsZCIsImRlc2NyaXB0aW9uIjoiVGhlIGRhdGEgaW4gdGhpcyBjaGVja2xpc3Qgb2YgbWFtbWFsIHNwZWNpZXMgb2YgdGhlIHdvcmxkIGFyZSBiZWluZyBwcmVzZW50ZWQgZm9yIG5vbi1jb21tZXJjaWFsLCBwZXJzb25hbCwgYW5kIGNvbGxlY3Rpb25zIG1hbmFnZW1lbnQgdXNlIG9ubHkuIENvcHlpbmcgb3IgcmVkaXN0cmlidXRpbmcgdGhlc2UgZGF0YSBpbiBhbnkgbWFubmVyIGZvciBwZXJzb25hbCBvciBjb3Jwb3JhdGUgZ2FpbiBpcyBub3QgcGVybWl0dGVkLiAgQSBsaXN0IG9mIHRoZSBhdXRob3JzIHJlc3BvbnNpYmxlIGZvciB2YXJpb3VzIHBvcnRpb25zIG9mIHRoZSB0ZXh0IGNhbiBiZSBmb3VuZCBoZXJlLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImE0M2VjNmQ4LTdiOGEtNDg2OC1hZDc0LTU2YjgyNGM3NTY5OCIsInRpdGxlIjoiQSBsaXN0IG9mIHRoZSB0ZXJyZXN0cmlhbCBmdW5naSwgZmxvcmEgYW5kIGZhdW5hIG9mIE1hZGVpcmEgYW5kIFNlbHZhZ2VucyBhcmNoaXBlbGFnb3MiLCJkZXNjcmlwdGlvbiI6IlRoaXMgY2hlY2tsaXN0IGluY2x1ZGVzLCBhcyByaWdvcm91c2x5IGFzIHBvc3NpYmxlLCBhbGwgdGhlIGtub3duIHRlcnJlc3RyaWFsIGFuZCBmcmVzaHdhdGVyLCBpLmUuIGluc3VsYXIsIGZ1bmdpLCBwbGFudHMgYW5kIGFuaW1hbHMgb2YgdGhlIE1hZGVpcmEgYW5kIFNlbHZhZ2VucyBhcmNoaXBlbGFnb3Mgd2l0aCB0aGUgaW5kaWNhdGlvbiBvZiB0aGVpciBrbm93biBwcmVzZW5jZSBvbiB0aGUgaXNsYW5kcyBvZiBNYWRlaXJhLCBQb3J0byBTYW50bywgRGVzZXJ0YXMgYW5kIFNlbHZhZ2Vucy4gSXQgcmVzdWx0cyBmcm9tIHRoZSBjb2xsYWJvcmF0aXZlIHdvcmsgb2YgbWFueSB0YXhvbm9taXN0cyBmcm9tIGRpZmZlcmVudCBQb3J0dWd1ZXNlIGFuZCBmb3JlaWduIGluc3RpdHV0aW9ucyAoYWJvdXQgOTAgdGF4b25vbWlzdHMpLCB1bmRlciB0aGUgZWRpdG9yaWFsIGNvb3JkaW5hdGlvbiBvZiB0aGUgQXpvcmVhbiBCaW9kaXZlcnNpdHkgR3JvdXAgKGh0dHA6Ly93d3cuZ2JhLnVhYy5wdCkuXG5cblRoZSB0b3RhbCBlc3RpbWF0ZWQgbnVtYmVyIG9mIHRlcnJlc3RyaWFsIHNwZWNpZXMgYW5kIHN1YnNwZWNpZXMgaW4gdGhlIE1hZGVpcmEgYW5kIFNlbHZhZ2VucyBhcmNoaXBlbGFnb3Mgd2FzIGFib3V0IDcsNTcxICg3LDQ1MiBzcGVjaWVzIGFuZCA0MjEgc3Vic3BlY2llcykuIEZ1bmdpIGFuZCBwbGFudHMgcmVwcmVzZW50IGFib3V0IDQyJSBvZiB0aGUgdGVycmVzdHJpYWwgZGl2ZXJzaXR5LiBIb3dldmVyLCBhbmltYWxzIGRvbWluYXRlLCBhcnRocm9wb2RzIGJlaW5nIHRoZSBtYWpvcml0eSAoNTElKSBvZiBhbGwgcmVjb3JkZWQgdGF4YS5cblxuVGhlIHRvdGFsIG51bWJlciBvZiBlbmRlbWljIHNwZWNpZXMgYW5kIHN1YnNwZWNpZXMgZnJvbSB0aGUgTWFkZWlyYSBhbmQgU2VsdmFnZW5zIGFyY2hpcGVsYWdvcyBpcyBhYm91dCAxLDQxOSAoMSwyODYgc3BlY2llcyBhbmQgMTgyIHN1YnNwZWNpZXMpLCB3aGljaCByZXByZXNlbnRzIDE5JSBvZiB0aGUgb3ZlcmFsbCBzcGVjaWVzIGRpdmVyc2l0eS4gVGhlIGFuaW1hbCBQaHlsYSBhcmUgdGhlIG1vc3QgZGl2ZXJzZSBpbiBlbmRlbWljIHRheGEsIG5hbWVseSBNb2xsdXNjYSAoMjEwKSBhbmQgQXJ0aHJvcG9kYSAoOTc5KSwgY29tcHJpc2luZyBhYm91dCA4NCUgb2YgdGhlIE1hZGVpcmFuIGVuZGVtaWNzLiBUaGUgcGVyY2VudGFnZSBvZiBlbmRlbWlzbSB3aXRoaW4gTW9sbHVzY2EgaXMgcGFydGljdWxhcmx5IHJlbWFya2FibGUsIHJlYWNoaW5nIDcxJS4gV2l0aGluIHZhc2N1bGFyIHBsYW50cyB0aGVyZSBhcmUgMTU0IGVuZGVtaWMgc3BlY2llcyBhbmQgc3Vic3BlY2llcyAoMTMlIG9mIHRoZSBvdmVyYWxsIHBsYW50IHNwZWNpZXMgZGl2ZXJzaXR5KSB3aGlsZSB0aGUgcmVtYWluaW5nIGhpZ2hlciB0YXhvbm9taWMgZ3JvdXBzIGFyZSBsZXNzIGRpdmVyc2UgaW4gdGVybXMgb2YgZW5kZW1pYyBmb3JtczogRnVuZ2kg4oCTIDM2ICg1JSk7IExpY2hlbnMg4oCTIDEyICgyJSk7IEJyeW9waHl0ZXMg4oCTIDExICgyJSk7IHZlcnRlYnJhdGVzIDE1ICgyNCUpLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImQ3NDM1ZjE0LWRmYzktNGFhYS1iZWYzLTVkMWVkMjJkNjViZiIsInRpdGxlIjoiVGF4b25vbXkgaW4gRmx1eCBDaGVja2xpc3QiLCJkZXNjcmlwdGlvbiI6IkF2ZXMgLSBBIFRheG9ub215IGluIEZsdXhcblZlcnNpb24gMi44NzogSnVuZSAwMiAyMDEzXG5cblRoZXJlIGFyZSBiaWcgY2hhbmdlcyB1bmRlcndheSBpbiBiaXJkIHRheG9ub215LiBZb3UndmUgcHJvYmFibHkgbm90aWNlZCB0aGF0IHRoZSBjaGVja2xpc3QgaXMgYWx3YXlzIGNoYW5naW5nLiBTdWRkZW5seSB0aGUgZHVja3MgaGF2ZSByZXBsYWNlZCB0aGUgbG9vbnMgaW4gZnJvbnQgb2YgdGhlIE5HUyBndWlkZS4gTm90IHRvbyBsb25nIGFnbyB0aGUgc2hyaWtlcyBhbmQgdmlyZW9zIHdlcmUgbmV4dCB0byB0aGUgd2FyYmxlcnMsIG5vdyB0aGV5J3JlIG5leHQgdG8gdGhlIGpheXMuIE1heWJlIHlvdSd2ZSBoZWFyZCB0aGF0IHZ1bHR1cmVzIGFyZSBzdG9ya3MsIG9yIHRoYXQgdGhleSdyZSBub3QgcmVhbGx5IHN0b3JrcyBhZnRlciBhbGwsIG9yIHRoYXQgTm9ydGggQW1lcmljYW4gdGFuYWdlcnMgYXJlIG5vdyBjYXJkaW5hbHMsIG9yIHRoYXQgc2FsdGF0b3JzIGFyZSB0YW5hZ2Vycywgbm90IGNhcmRpbmFscy4gVGhlbiB0aGVyZSBhcmUgdGhlIEJhbHRpbW9yZSBhbmQgQnVsbG9jaydzIE9yaW9sZXMsIG9yIGFyZSB0aGV5IGp1c3QgTm9ydGhlcm4gT3Jpb2xlcz8gQXJlIHRoZXkgU2xhdGUtY29sb3JlZCBhbmQgT3JlZ29uIEp1bmNvcywgb3IgbWF5YmUgaXQncyBEYXJrLWV5ZWQgSnVuY28gdG9kYXkuIE5vdCBvbmx5IGFyZSBzcGVjaWVzIGJlaW5nIHNwbGl0IG9yIGx1bXBlZCwgYnV0IGV2ZXJ5dGhpbmcgaXMgYmVpbmcgcmVhcnJhbmdlZC4gQSBuZXcgdmlldyBvZiBiaXJkIHRheG9ub215IHRha2VzIHNoYXBlIGFzIHdlIHdhdGNoLlxuXG5UaGVyZSBoYXZlIGFsd2F5cyBiZWVuIHF1ZXN0aW9ucyBhbmQgZGlzYWdyZWVtZW50cyBhYm91dCBiaXJkIHRheG9ub215LCBhbmQgaXQgaGFzIGFsd2F5cyBiZWVuIGNoYW5naW5nIChzZWUgQnJ1Y2UsIDIwMDMpLiBTaW5jZSBBcmlzdG90bGUgb3IgYmVmb3JlLCBwZW9wbGUgaGF2ZSB0cmllZCB0byBmaW5kIGEgbmF0dXJhbCB3YXkgdG8gb3JkZXIgYWxsIGJpcmQgc3BlY2llcyAodGhlIHZlcnkgd29yZHMg4oCcZ2VudXPigJ0gYW5kIOKAnHNwZWNpZXPigJ0gY2FycnkgdGhlIEFyaXN0b3RlbGVhbiB0cmFkaXRpb24pLiBFYXJseSBhdHRlbXB0cyB3ZXJlIGJhc2VkIG9uIG9idmlvdXMgc2ltaWxhcml0aWVzLCBzdWNoIGFzIGdyb3VwaW5nIGFsbCB3YXRlcmJpcmRzIHRvZ2V0aGVyLiBCdXQgd2hhdCBjb25zdGl0dXRlcyBhIG5hdHVyYWwgb3JkZXI/XG5cbkxpbm5hZXVzIHNpbXBsaWZpZWQgc2NpZW50aWZpYyBub21lbmNsYXR1cmUgYnkgbmFtaW5nIGVhY2ggdHlwZSBiaXJkIHdpdGggYSBnZW51cyBhbmQgc3BlY2llcywgYnV0IHdhcyB1bmFibGUgdG8gdGVsbCB1cyB3aGF0IG9yZGVyIHdhcyBuYXR1cmFsLiBJdCBpcyBub3QgdW50aWwgRGFyd2luIHRoYXQgd2UgZ2V0IGEgY2xlYXJjdXQgd2F5IHRvIG9yZGVyIHRoZSBiaXJkcy4gVGhleSBzaG91bGQgYmUgb3JkZXJlZCBhY2NvcmRpbmcgdG8gZGVzY2VudC4gQmlyZHMgd2l0aCBtb3JlIHJlY2VudCBjb21tb24gYW5jZXN0b3JzIHNob3VsZCBiZSBncm91cGVkIHRvZ2V0aGVyLlxuXG5UaG9tYXMgSHV4bGV5ICgxODY3KSB3YXMgdGhlIGZpcnN0IHRvIGNvbnN0cnVjdCBhIGNvbXByZWhlbnNpdmUgYmlyZCBsaXN0IG9uIERhcndpbmlhbiBsaW5lcy4gSGUgZm9jdXNlZCBvbiB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBiaXJkJ3Mgc2t1bGwgdG8gZGV0ZXJtaW5lIGNvbW1vbiBpbmhlcml0ZWQgZmVhdHVyZXMgdGhhdCBoZSBjb3VsZCBiYXNlIGhpcyB0YXhvbm9teSBvbi4gTnVtZXJvdXMgb3RoZXIgb3JuaXRob2xvZ2lzdHMgaGF2ZSB1c2VkIG1vcnBob2xvZ2ljYWwgdHJhaXRzIHRvIGNsYXNzaWZ5IHRoZSBiaXJkcywgd2l0aCBMaXZlemV5IGFuZCBadXNpICgyMDA3KSBiZWluZyB0aGUgbW9zdCByZWNlbnQgZWZmb3J0IG9mIHRoaXMgdHlwZS5cblxuTW9yZSByZWNlbnRseSwgZm9jdXMgaGFzIHNoaWZ0ZWQgdG8gbW9sZWN1bGFyIG1ldGhvZHMsIHRoZSBtb3N0IGltcG9ydGFudCBvZiB3aGljaCBpcyB0byBkaXJlY3RseSBzdHVkeSB0aGUgc3R1ZmYgb2YgaW5oZXJpdGFuY2XigJRETkEuIFRoZSBjdWxtaW5hdGlvbiBvZiB0aGUgZmlyc3Qgd2F2ZSBvZiBETkEgYmFzZWQgdGF4b25vbXkgd2VyZSB0aGUgcHVibGljYXRpb25zIGJ5IFNpYmxleSwgQWhscXVpc3QsIGFuZCBNb25yb2UgKFNpYmxleSwgQWhscXVpc3QsIGFuZCBNb25yb2UsIDE5ODg7IFNpYmxleSBhbmQgQWhscXVpc3QsIDE5OTA7IFNpYmxleSBhbmQgTW9ucm9lLCAxOTkwKS4gU2libGV5LCBBaGxxdWlzdCwgYW5kIE1vbnJvZSB1c2VkIEROQSBoeWJyaWRpemF0aW9uIHRvIHRyeSB0byBjbGFzc2lmeSBiaXJkcy4gVGhpcywgdG9nZXRoZXIgd2l0aCBpbmNyZWFzaW5nIGVtcGhhc2lzIG9uIGNsYWRpc3RpYyBtZXRob2RzLCBoYXMgcmV2aXRhbGl6ZWQgaW50ZXJlc3QgaW4gYmlyZCB0YXhvbm9teS4gSW4gdGhlIDE5OTAncywgRE5BIGh5YnJpZGl6YXRpb24gd2FzIHJlcGxhY2VkIGJ5IHRoZSBtdWNoIG1vcmUgcHJlY2lzZSBETkEgc2VxdWVuY2luZywgYWxsb3dpbmcgZGlyZWN0IGV4YW1pbmF0aW9uIG9mIHRoZSBnZW5lcyB0aGVtc2VsdmVzLiBUaGlzIGhhcyBvcGVuZWQgdGhlIHBvc3NpYmlsaXR5IG9mIGNvbnN0cnVjdGluZyBhIOKAnHRyZWUgb2YgbGlmZeKAnSBzaG93aW5nIHRoZSBldm9sdXRpb25hcnkgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGFsbCBsaXZpbmcgb3JnYW5pc21zLiBJdCBoYXMgYnJvdWdodCB0aGUgcHJvc3BlY3Qgb2YgcHJvZHVjaW5nIGEgY29tcGxldGVseSBhY2N1cmF0ZSB0YXhvbm9taWMgdHJlZSBvZiBhbGwgbGl2aW5nIGJpcmQgc3BlY2llcywgYW5kIHRvdWNoZWQgb2ZmIGFuIG9uc2xhdWdodCBvZiBuZXcgcmVzZWFyY2guIFRoaXMgb25nb2luZyByZXNlYXJjaCBpcyB0aGUgZHJpdmluZyBmb3JjZSBiZWhpbmQgdGhlIGNoZWNrbGlzdCBjaGFuZ2VzLlxuXG5UaGlzIHNldCBvZiB3ZWIgcGFnZXMgY29udGFpbnMgYSBndWVzcyBhdCB3aGF0IHRoZSBhdmlhbiBwYXJ0IG9mIHRoZSB0cmVlIG9mIGxpZmUgbWlnaHQgbG9vayBsaWtlLiBJdCBleGFtaW5lcyByZWNlbnQgdGF4b25vbWljIGNoYW5nZXMsIGFuZCBwb3NzaWJsZSBjaGFuZ2VzIHRvIGNvbWUuIFNvbWUgb2YgdGhlIHByb2plY3RlZCBjaGFuZ2VzIGFyZSBwcmV0dHkgc29saWQsIG90aGVycyBhcmUgZ3Vlc3NlcyBiYXNlZCBvbiBjdXJyZW50IHJlc2VhcmNoLiBLZWVwIGluIG1pbmQgdGhhdCBzb21lIG9mIG15IGd1ZXNzZXMgd2lsbCB0dXJuIG91dCB0byBiZSB3cm9uZywgYW5kIHNvbWUgb2YgdGhlIHJlc2VhcmNoIHRoZXkgYXJlIGJhc2VkIHdpbGwgYmUgd3Jvbmcgb3IgbWlzbGVhZGluZy4gVGhlcmUgd2lsbCBkb3VidGxlc3MgYmUgdGF4b25vbWljIHN1cnByaXNlcyBiZWZvcmUgdGhlIGVudGlyZSBhdmlhbiB0cmVlIGlzIHdvcmtlZCBvdXQsIGp1c3QgYXMgdGhlcmUgaGF2ZSBiZWVuIGEgbnVtYmVyIG9mIHJlY2VudCBzdXJwcmlzZXMuXG5cblRoZSDigJxUYXBlc3RyeeKAnSBvbiBTdGVyb2lkc1xuVW5saWtlIGFsbCBvZiB0aGUgb3RoZXIgY3VycmVudCBjaGVja2xpc3RzLCB0aGUgVGlGIGNoZWNrbGlzdCBpbmNsdWRlcyBleHBsaWNpdCBwaHlsb2dlbmV0aWMgaHlwb3RoZXNlcyB3aGVuZXZlciBwb3NzaWJsZS4gVGhlc2UgaHlwb3RoZXNlcyBhcmUgZW1ib2RpZWQgaW4gdHJlZSBkaWFncmFtcy4gRnJvbSB0aGUgYmVnaW5uaW5nLCB0aGUgVGlGIGxpc3QgaGFzIHVzZWQgYW4gZXhwbGljaXQgZmFtaWx5LWxldmVsIHRyZWUuIFRoYXQgaGFzIG5vdyBiZWVuIGV4dGVuZGVkIHRvIGEgZ2VudXMtbGV2ZWwgdHJlZSBmb3IgbW9zdCBmYW1pbGllcyAobm93IG92ZXIgOTUlKS4gSW4gc29tZSBjYXNlcyBpdCBoYXMgYmVlbiBwdXNoZWQgdG8gdGhlIHNwZWNpZXMgbGV2ZWwsIGFuZCBpbiBhIHZlcnkgZmV3IGNhc2VzLCBldmVuIHRvIHN1YnNwZWNpZXMuXG5cblByZXZpb3VzbHksIG9ubHkgdGhlIGNvbWJpbmF0aW9uIG9mIFNpYmxleSBhbmQgTW9ucm9lICgxOTkwKSBhbmQgU2libGV5IGFuZCBBaGxxdWlzdCAoMTk5MCkgaGFkIGF0dGVtcHRlZCBhbnl0aGluZyBvZiB0aGlzIHNvcnQsIHRoZWlyIGZhbW91cyDigJx0YXBlc3RyeeKAnS4gSG93ZXZlciwgdGhleSBoYWQgbm93aGVyZSBuZWFyIHRoZSBjb3ZlcmFnZSB0aGF0IGlzIG5vdyBwb3NzaWJsZS4gT25lIG9mIHRoZSBnb2FscyBvZiB0aGlzIGNoZWNrbGlzdCBpcyB0byBwcm92aWRlIGEgdGFwZXN0cnkgb24gc3Rlcm9pZHMgdGhhdCB3aWxsIGV2ZW50dWFsbHkgaW5jbHVkZSBhbGwgZXh0YW50IGJpcmQgc3BlY2llcy5cblxuVGhlIHRyZWUgSSd2ZSBwdXQgdG9nZXRoZXIgaXMgYW4gaW50ZXJwcmV0YXRpb24gb2YgdGhlIGdlbmV0aWMgcmVsYXRpb25zaGlwcyBzdHVkaWVkIGJ5IG1hbnkgYXV0aG9ycy4gVGhlIGhpZ2hlciBsZXZlbCB0YXhvbm9teSAodGhlIG5vbi1wYXNzZXJpbmVzKSBJIHVzZSBpcyBwcmltYXJpbHkgYmFzZWQgb24gSGFja2V0dCBldCBhbC4gKDIwMDgpLCB3aGljaCByZWZpbmVzIHRoZSByZXN1bHRzIG9mIEVyaWNzb24gZXQgYWwuICgyMDA2YSkgYW5kIEZhaW4gYW5kIEhvdWRlICgyMDA0KS4gVGhpcyB0YXhvbm9teSBpcyBzbG93bHkgY3JlZXBpbmcgaW50byB0aGUgY2hlY2tsaXN0cy4gVGhlIGxhdGVzdCAoMjAwOCkgb2YgQ2hyaXN0aWRpcyBhbmQgQm9sZXMgQXVzdHJhbGlhbiBjaGVja2xpc3QgaW5jb3Jwb3JhdGVzIHNvbWUgb2YgdGhlc2UgaWRlYXMsIGFzIGRvZXMgdGhlIEFPVSdzIFNvdXRoIEFtZXJpY2FuIGNoZWNrbGlzdC5cblxuVGhlIHB1cnBvc2Ugb2YgdGhlc2Ugd2VicGFnZXMgaXMgdHdvZm9sZDogVG8gcHJlc2VudCB0aGUgbmV3IGlkZWFzIHRoYXQgRmFpbiBhbmQgSG91ZGUncyBNZXRhdmVzIGh5cG90aGVzaXMgaGFzIGJyb3VnaHQgdG8gdGhlIGhpZ2hlciB0YXhvbm9teSAobW9zdGx5IGFib3ZlIHRoZSBmYW1pbHkgbGV2ZWwpLCBhbmQgdG8gZXhhbWluZSB0aGUgd2hvbGVzYWxlIGNoYW5nZXMgdGhhdCBiZWVuIGdvaW5nIG9uIHdpdGhpbiB0aGUgdmFyaW91cyBmYW1pbGllcy4gVGhlIGxhdHRlciBoYXMgcGFydGljdWxhcmx5IGFmZmVjdGVkIHRoZSBwYXNzZXJpbmUgZmFtaWxpZXMsIHdoaWNoIGF0IHRpbWVzIHNlZW1zIGxpa2UgdGhleSd2ZSBiZWVuIHJ1biB0aHJvdWdoIGEgYmxlbmRlciAoc2VlIHRoZSBTeWx2aWlkYWUgcGFnZSBmb3IgYW4gZXhhbXBsZSkuXG5cblRoZSBoaWdoZXItbGV2ZWwgcGh5bG9nZW55IGhhcyBmb2xsb3dlZCBIYWNrZXR0IGV0IGFsLiAoMjAwOCkgc2luY2UgdmVyc2lvbiAyLjEuIEkndmUgY3JlYXRlZCBhIHBkZiB0aGF0IHN1bW1hcml6ZXMgdGhlIGNoYW5nZXMgZnJvbSB0aGUgcHJldmlvdXMgdmVyc2lvbi4gU2luY2UgdGhlbiwgSSd2ZSBjb25jZW50cmF0ZWQgb24gYWRkaW5nIGFzIG1hbnkgZ2VudXMtbGV2ZWwgcGh5bG9nZW5ldGljIGZhbWlseSB0cmVlcyBhcyBhcmUgcG9zc2libGUgKG5vdCBuZWVkZWQgZm9yIHRoZSBvbmUgYW5kIHR3byBnZW51cyBmYW1pbGllcykuIEF0IHByZXNlbnQsIHVuZGVyIDUlIG9mIHRoZSBleHRhbnQgYmlyZCBmYW1pbGllcyBsYWNrIGV2ZW4gYSBkcmFmdCB0cmVlLCBhbHRob3VnaCBzb21lIG9mIG90aGVyIGZhbWlseSB0cmVlcyBzdGlsbCBoYXZlIGFyZWFzIG9mIGNvbmplY3R1cmUuXG5cbkkgYWxzbyBoYXZlIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gdGhlIE1ldGF2ZXMgaHlwb3RoZXNpcyBhbmQgaGlnaGVyLWxldmVsIHRheG9ub215LiBJdCBkaXNjdXNzZXMgdGhlIGNvbXBvc2l0aW9uIG9mIHRoZSBtYWpvciBncm91cHMgYW5kIHRoZSByZWxhdGlvbnMgYmV0d2VlbiB0aGVtLCBwYXJ0aWN1bGFybHkgTWV0YXZlcyBhbmQgQ29yb25hdmVzLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImQwMjc3NTlmLTg0YmMtNGRmYy1hNWVhLWIxN2E1MDc5MzQ1MSIsInRpdGxlIjoiVGF4b24gbGlzdCBvZiB2YXNjdWxhciBwbGFudHMgZnJvbSBCYXZhcmlhLCBHZXJtYW55IGNvbXBpbGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBCRkwgcHJvamVjdCIsImRlc2NyaXB0aW9uIjoiaHR0cDovL3d3dy5kaXZlcnNpdHltb2JpbGUubmV0L3dpa2kvQWJvdXRfJTIyVGF4b25fbGlzdF9vZl92YXNjdWxhcl9wbGFudHNfZnJvbV9CYXZhcmlhLF9HZXJtYW55X2NvbXBpbGVkX2luX3RoZV9jb250ZXh0X29mX3RoZV9CRkxfcHJvamVjdCUyMiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjVhNzFkODAzLWU5MTYtNGFhYy1hMzczLWEyZjYwMTBjOGYxMyIsInRpdGxlIjoiQXByb3hpbWFjacOzbiBhIGxhIHJlcHJlc2VudGF0aXZpZGFkIGRlIGxhIGRpdmVyc2lkYWQgZGUgcGxhbnRhcyB2YXNjdWxhcmVzIGVuIGxvcyBQYXJxdWVzIE5hY2lvbmFsZXMgTmF0dXJhbGVzIGRlIENvbG9tYmlhIMK/Q3VhbnRhcyBlc3BlY2llcyBzZSBjb25zZXJ2YW4gZW4gZWwgc2lzdGVtYT8iLCJkZXNjcmlwdGlvbiI6IkNvbG9tYmlhIGN1ZW50YSBjb24gNTkgw6FyZWFzIGRlbCBTaXN0ZW1hIE5hY2lvbmFsIGRlIFBhcnF1ZXMgTmFjaW9uYWxlcyBOYXR1cmFsZXMgKFBOTkMpLiBFbCBpbnZlbnRhcmlvIGRlIGxhIGZsb3JhIGRlbCBzaXN0ZW1hIGVzIGluc2lwaWVudGUgeWEgcXVlIHNlIGRlc2Nvbm9jZSBlbCBuw7ptZXJvIHkgcXVlIGVzcGVjaWVzIGRlIHBsYW50YXMgcXVlIGFsYmVyZ2EuIFNlIGNvbXBpbMOzIGluZm9ybWFjacOzbiBkaXNwb25pYmxlIGRlIGNvbGVjY2lvbmVzIGRlIGhlcmJhcmlvIHkgbGl0ZXJhdHVyYSBwYXJhIGVzdGFibGVjZXIgdW5hIGxpc3RhIHByZWxpbWluYXIgZGUgZXNwZWNpZXMgZGUgcGxhbnRhcyB2YXNjdWxhcmVzIGNvbiBldmlkZW5jaWFzIHF1ZSBzZSBlbmN1ZW50cmFuIFBOTkMuIEVzdGEgbGlzdGEgZnVlIGNvbmZyb250YWRhIGNvbiBlbCBjYXTDoWxvZ28gbmFjaW9uYWwgZGUgcGxhbnRhcyB5IHNlIGVzdGFibGVjaWVyb24gdmFsb3JlcyBwb3JjZW50dWFsZXMgZGVsIG7Dum1lcm8gZGUgZXNwZWNpZXMgY29uIHJlc3BlY3RvIGEgbGFzIGNpZnJhcyBuYWNpb25hbGVzLiBTZSBlc3RpbWEgcXVlIGVsIGludmVudGFyaW8gZGUgbGEgZmxvcmEgZGVsIFNpc3RlbWEgZGUgUE5OQyBzZSBlbmN1ZW50cmEgZW4gdW4gNDkuNiUuICBMbyBjb25vY2lkbyBlbiBQTk5DIGhhc3RhIGVsIG1vbWVudG8gcmVwcmVzZW50YSBlbCAzNy44JSBkZSBsYXMgZXNwZWNpZXMgZGUgcGxhbnRhcyB2YXNjdWxhcmVzIGNvbm9jaWRhcyBwYXJhIGVsIHBhw61zLiBFbCAxOC4yJSBkZSBsYXMgZXNwZWNpZXMgZW5kw6ltaWNhcyBhIENvbG9tYmlhIHkgZWwgNTYlIGRlIGxhcyBlc3BlY2llcyBjYXRlZ29yaXphZGFzIGVuIGFsZ8O6biBncmFkbyBkZSBhbWVuYXphIHNlIGVuY3VlbnRyYW4gZW4gUE5OQy4gU2UgcGxhbnRlYSBlbCB1c28gZGUgZXN0YXMgY2lmcmFzIGNvbW8gcG9zaWJsZXMgw61uZGljZXMgZGUgcmVwcmVzZW50YXRpdmlkYWQgZGUgbGEgZml0b2RpdmVyc2lkYWQgcXVlIGNvbXBsZW1lbnRlIG90cm9zIMOtbmRpY2VzIGNvbW8gZWwgZGUgcG9yY2VudGFqZSBkZWwgdGVycml0b3JpbyBuYWNpb25hbCBiYWpvIGNvbnNlcnZhY2nDs24uIFNlIGVuZmF0aXphIHF1ZSBsb3MgcGFycXVlcyBuYWNpb25hbGVzIGFzb2NpYWRvcyBhIGxvcyBBbmRlcyBzb24gbG9zIG3DoXMgZGV0ZXJtaW5hbnRlcyB5IHF1ZSBhcG9ydGFuIGFsIG1lam9yYW1pZW50byBkZSBlc3RvcyBpbmRpY2Fkb3JlcyBkZSBmaXRvZGl2ZXJzaWRhZCBwcm9wdWVzdG9zLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjgwYjRiNDQwLWVhY2EtNDg2MC1hYWRmLWQwZGZkZDNlODU2ZSIsInRpdGxlIjoiT2ZmaWNpYWwgTGlzdHMgYW5kIEluZGV4ZXMgb2YgTmFtZXMgaW4gWm9vbG9neSIsImRlc2NyaXB0aW9uIjoiQWxsIHNjaWVudGlmaWMgbmFtZXMgbGlzdGVkIGluIHRoZSBPZmZpY2lhbCBMaXN0cyBhbmQgSW5kZXhlcyBvZiBOYW1lcyBpbiBab29sb2d5IGZyb20gdGhlIEludGVybmF0aW9uYWwgQ29tbWlzc2lvbiBvbiBab29sb2dpY2FsIE5vbWVuY2xhdHVyZSAoSUNaTikuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiOTFmZWNkNzgtMDk4Ni00NzEzLTljMzYtNzc1MzI4NDZlZTI1IiwidGl0bGUiOiJMaXN0YSBkZSB0w6F4b25lcyBkZSBsYSBmbG9yYSB2YXNjdWxhciBlc3Bhw7FvbGEiLCJkZXNjcmlwdGlvbiI6IkVzdGUganVlZ28gZGUgZGF0b3MgcmVjb2dlIGxhIExpc3RhIGRlIFTDoXhvbmVzIGRlIGxhIEZsb3JhIFZhc2N1bGFyIEVzcGHDsW9sYSBwcmVzZW50YWRhIGNvbW8gdW5hIHRhYmxhIGFkYXB0YWRhIGFsIGZvcm1hdG8gZXN0w6FuZGFyIERhcndpbiBDb3JlLiBDb21wcmVuZGUgbGFzIGVzcGVjaWVzIHkgc3ViZXNwZWNpZXMgZGUgZmxvcmEgdmFzY3VsYXIgcHJlc2VudGVzIGVuIGxhIFBlbsOtbnN1bGEgSWLDqXJpY2EsIElzbGFzIEJhbGVhcmVzIGUgSXNsYXMgQ2FuYXJpYXMsIGFkZW3DoXMgZGUgc3VzIGfDqW5lcm9zIHkgZmFtaWxpYXMgY29ycmVzcG9uZGllbnRlcyAobm8gc2UgaGFuIGluY2x1aWRvIGjDrWJyaWRvcykuIEluY2x1eWUgdW4gdG90YWwgZGUgMTAuNDkzIHRheG9uZXMgZGlzcHVlc3RvcyBlbiAyMTIgZmFtaWxpYXMsIDEzOTkgZ8OpbmVyb3MsIDcwNjkgZXNwZWNpZXMgeSAxODEzIHN1YmVzcGVjaWVzLiBQYXJhIHN1IGVsYWJvcmFjacOzbiBzZSBoYSB1dGlsaXphZG8gY29tbyBmdWVudGUgcHJpbWFyaWEgRmxvcmEgaWJlcmljYSAoaHR0cDovL3d3dy5mbG9yYWliZXJpY2EuZXMpIHkgaGEgc2lkbyBjb21wbGV0YWRhIGNvbiB0YXhvbmVzIG1lbmNpb25hZG9zIGVuIGxhIGxlZ2lzbGFjacOzbiAoQXRsYXMgeSBMaWJyb3MgUm9qb3MpLCBhc8OtIGNvbW8gb3RyYXMgb2JyYXMgZG9uZGUgc2UgcmVjb2dlbiB0YXhvbmVzIGNhbmFyaW9zLCBhbMOzY3Rvbm9zIHUgb3Ryb3MgYcO6biBubyB0cmF0YWRvcyBwb3IgZXN0YSBvYnJhICh2ZXIgYXBhcnRhZG8gQ2l0YXRpb25zKS4gXG5cbk9wZXJhdGl2YW1lbnRlIHNlIGVudGllbmRlIHF1ZSB1biB0YXhvbiBlcyB1biBub21icmUgY2llbnTDrWZpY28gY29uIHVuYSBkZXNjcmlwY2nDs24gcXVlIGxvIGNpcmN1bnNjcmliZSwgZW4gZXN0ZSBjYXNvLCBsYXMgZGVzY3JpcGNpb25lcyB2aWVuZW4gcmVmZXJpZGFzIHBvciBsYSByZWZlcmVuY2lhIGJpYmxpb2dyw6FmaWNhIGRlIGxhcyBvYnJhcyAoZmxvcmFzLCBtb25vZ3JhZsOtYXMsIGFydMOtY3Vsb3MpIHF1ZSBsYXMgY29udGllbmVuLCBubyBvYnN0YW50ZSA4MjYgc2UgZW5jdWVudHJhbiBwcm92aXNpb25hbG1lbnRlIHNpbiByZWZlcmVuY2lhLiBcblxuVG9kb3MgbG9zIHTDoXhvbmVzLCBub21icmVzIHkgcmVmZXJlbmNpYXMgYmlibGlvZ3LDoWZpY2FzIHZpZW5lbiBhY29tcGHDsWFkYXMgZGUgc3VzIHJlc3BlY3Rpdm9zIGlkZW50aWZpY2Fkb3JlcyBxdWUgc29uIGRlIHRpcG8gTFNJRCAoTGlmZSBTY2llbmNlIElkZW50aWZpZXJzKSwgeSBwb3IgdGFudG8gc29uIMO6bmljb3MsIGdsb2JhbGVzLCBwZXJzaXN0ZW50ZXMgeSByZXNvbHZpYmxlcy4gUGFyYSBsYSBhc2lnbmFjacOzbiBkZSBsb3MgTFNJRCBkZSBub21icmVzIGNpZW50w61maWNvcyBzZSBoYSB1dGlsaXphZG8gSVBOSSAoaHR0cDovL3d3dy5pcG5pLm9yZykuIEVuIGxvcyBjYXNvcyBlbiBxdWUgSVBOSSByZWdpc3RyYSBtw6FzIGRlIHVuYSBlbnRyYWRhIHBhcmEgZWwgbWlzbW8gbm9tYnJlIChpbmNsdWlkbyBlbCBwcm90w7Nsb2dvKSwgc2UgaGEgZWxlZ2lkbyBlbCBpZGVudGlmaWNhZG9yIGRlIGxhIGVudHJhZGEgbcOhcyBjb21wbGV0YSBvIGNvbiBtZW5vcyBlcnJvcmVzLiBFbiBjYXNvIGRlIGRpc2NyZXBhbmNpYSBlbnRyZSBsb3MgYXV0b3JlcyBkZSBsb3Mgbm9tYnJlcyBjaWVudMOtZmljb3MgZW50cmUgSVBOSSB5IEZsb3JhIGliZXJpY2EsIHNlIGhhIHNlZ3VpZG8gZWwgY3JpdGVyaW8gZGUgRmxvcmEgaWJlcmljYSB5IG1hbnRlbmlkbyBlbCBMU0lEIGRlIElQTkkuIEN1YW5kbyB1biBub21icmUgbm8gc2UgaGEgZW5jb250cmFkbyBlbiBJUE5JIHNlIGxlIGhhIGdlbmVyYWRvIHVuIGlkZW50aWZpY2Fkb3IgdXRpbGl6YW5kbyBlbCBzZXJ2aWRvciBkZSBMU0lEIGRlIEdCSUYuRVMsIHF1ZSBsbGV2YW4gZGUgcHJlZmlqbyDCq3Vybjpsc2lkOnJlY2liaW8ubmV0Om5hbWU6wrsuIFxuXG5QYXJhIGxhIHRheG9ub23DrWEgc2UgaGEgc2VndWlkbyBlbiBsbyBwb3NpYmxlIGEgRmxvcmEgaWJlcmljYSAoaW5jbHV5ZW5kbyBsYXMgbGlzdGFkYXMgY29tbyDCq0VzcGVjaWVzIHF1ZSBoYW4gZGUgYnVzY2Fyc2XCuykgeSBzdWJzaWRpYXJpYW1lbnRlIGVsIHByb3llY3RvIEFudGhvcyAoaHR0cDovL3d3dy5hbnRob3MuZXMvKS4gRXN0YXMgZnVlbnRlcyBzZSBoYW4gY29tcGxldGFkbyBjb24gb3RyYXMgYXRlbmRpZW5kbyBhIGNyaXRlcmlvcyBkZSBjb2hlcmVuY2lhLCByZWxldmFuY2lhIHkgYWN0dWFsaWRhZC4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIwYjM2NmQ5MC1iZDVlLTRlN2EtYmEwNi0yOTU4MTMzMzQxMjUiLCJ0aXRsZSI6IlRheG9uIGxpc3Qgb2YgSHltZW5vcHRlcmEgZnJvbSBHZXJtYW55IGNvbXBpbGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBHQk9MIHByb2plY3QiLCJkZXNjcmlwdGlvbiI6Imh0dHA6Ly93d3cuZGl2ZXJzaXR5bW9iaWxlLm5ldC93aWtpL0Fib3V0XyUyMlRheG9uX2xpc3Rfb2ZfSHltZW5vcHRlcmFfZnJvbV9HZXJtYW55X2NvbXBpbGVkX2luX3RoZV9jb250ZXh0X29mX3RoZV9HQk9MX3Byb2plY3QlMjIiLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiJhNWRkMDYzZS1mNDViLTRhNTQtOGI5NC04ZmEzYWRmN2YxZTEiLCJ0aXRsZSI6Ik11bHRpbGluZ3VhbCBJT0MgV29ybGQgQmlyZCBMaXN0LCB2bnVsbCIsImRlc2NyaXB0aW9uIjoiVGhlIElPQyBXb3JsZCBCaXJkIExpc3QgaXMgYW4gb3BlbiBhY2Nlc3MgcmVzb3VyY2Ugb2YgdGhlIGludGVybmF0aW9uYWwgY29tbXVuaXR5IG9mIG9ybml0aG9sb2dpc3RzLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjgwNjdlMGEyLWEyNmQtNDgzMS04YTFlLTIxYjkxMThhMjk5YyIsInRpdGxlIjoiRmFtaWxpZXMgb2YgTGl2aW5nIE9yZ2FuaXNtcyAoRkFMTykiLCJkZXNjcmlwdGlvbiI6IlRoZSBsaXN0IG9mIEZhbWlsaWVzIG9mIExpdmluZyBPcmdhbmlzbXMgKEZBTE8pIGNvbXBpbGVkIGJ5IFJ1Z2dpZXJvICgyMDE0KSBhcyBhbiBleHRlbnNpb24gb2YgYSBzZXZlbi1raW5nZG9tIGNsYXNzaWZpY2F0aW9uIG9mIGxpZmUgaW4gUnVnZ2llcm8gZXQgYWwuICgyMDE1KS4gXG4gICAgICBUaGUgbGF0dGVyIHdvcmsgaXMgdGhlIHJlc3VsdCBvZiBhbiBleHBlcnQgcGFuZWwgcmVwcmVzZW50aW5nIHRoZSBtYWpvciB0YXhvbm9taWMgZGlzY2lwbGluZXMgY29udmVuZWQgdG8gcmV2aWV3LCByZXZpc2UsIGFuZCB1cGRhdGUgdGhlIGV4aXN0aW5nIGluY29tcGxldGUgQ2F0YWxvZ3VlIG9mIExpZmUgKENvTCkgaGllcmFyY2h5IGRvd24gdG8gb3JkZXIuXG5cbiAgICAgIFRoZSBGQUxPIGNsYXNzaWZpY2F0aW9uIGlzIGJhc2VkIG9uIGEgY29uc2Vuc3VzIHZpZXcgYW1vbmcgdGhlIGF1dGhvcnMsIGFjY29tbW9kYXRpbmcgdGF4b25vbWljIGNob2ljZXMgYW5kIHByYWN0aWNhbCBjb21wcm9taXNlcyBhbW9uZyBkaXZlcnNlIG9waW5pb25zLCB1c2FnZXMgYW5kIG9mdGVuIGNvbmZsaWN0aW5nIGV2aWRlbmNlIG9mIHRoZSBib3VuZGFyaWVzIGJldHdlZW4gcmFua3MgYW5kIHNvbWUgbWFqb3IgdGF4YSwgaW5jbHVkaW5nIGtpbmdkb21zLlxuXG4gICAgICBGQUxPIGlzIHVuaXF1ZSBiZWNhdXNlIGl0IGFpbXMgdG8gYmUgY29tcHJlaGVuc2l2ZSwgd2l0aCBhbGwga25vd24gc3BlY2llcyBvZiBsaWZlIG9uIGVhcnRoIGZpbmRpbmcgYSBob21lIHdpdGhpbiBpdHMgY2xhc3NpZmljYXRpb24uIE9idmlvdXNseSwgRkFMTyBpcyBqdXN0IFwiYVwiIGNsYXNzaWZpY2F0aW9uLCBjZXJ0YWlubHkgbm90IFwiVEhFXCIgY2xhc3NpZmljYXRpb24gb2YgbGlmZS4gXG4gICAgICBCZWNhdXNlIGl0IGhldXJpc3RpY2FsbHkgY29tYmluZXMgc3RyaWN0bHkgcGh5bG9nZW5ldGljIGFuZCByZWxhdGl2ZWx5IGNsYXNzaWNhbCB0YXhvbm9taWVzLCBubyBkb3VidCBzb21lIG9mIHRoZSBpbXBsaWVkIHJlbGF0aW9uc2hpcHMgd2lsbCByZXF1aXJlIHJldmlzaW9uLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImNiYjY0OThlLTg5MjctNDA1YS05MTZiLTU3NmQwMGE2Mjg5YiIsInRpdGxlIjoiRW5nbGlzaCBXaWtpcGVkaWEgLSBTcGVjaWVzIFBhZ2VzIiwiZGVzY3JpcHRpb24iOiJTcGVjaWVzIHBhZ2VzIGV4dHJhY3RlZCBmcm9tIHRoZSAkTEFORyBXaWtpcGVkaWEgYXJ0aWNsZSBYTUwgZHVtcCBmcm9tICREQVRFLlxuTXVsdGltZWRpYSwgdmVybmFjdWxhciBuYW1lcyBhbmQgdGV4dHVhbCBkZXNjcmlwdGlvbnMgYXJlIGV4dHJhY3RlZCwgYnV0IG9ubHkgcGFnZXMgd2l0aCBhIHRheG9ib3ggb3Igc3BlY2llc2JveCB0ZW1wbGF0ZSBhcmUgcmVjb2duaXplZC5cblxuU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZG9lcmluZy93aWtpcGVkaWEtZHdjYSBmb3IgZGV0YWlscy4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIyMTRjMzEwOS1kMzdhLTQwZjgtOWMyNC01YjZlNTk5MTUzOTQiLCJ0aXRsZSI6IkFwaGlkIFNwZWNpZXMgRmlsZSIsImRlc2NyaXB0aW9uIjoiVGhpcyBmaWxlIGNvbnRhaW5zIHRheG9uIG5hbWVzIGFuZCByZWxhdGVkIG5vbWVuY2xhdHVyYWwgaW5mb3JtYXRpb24gZm9yIHRoZSBpbmZyYW9yZGVyIEFwaGlkb21vcnBoYSwgaW5jbHVkaW5nIGFwaGlkcyBhbmQgdGhlaXIgcmVsYXRpdmVzLCBvcmlnaW5hdGluZyBmcm9tIEFwaGlkIFNwZWNpZXMgRmlsZSBtYWludGFpbmVkIGJ5IHRoZSBTcGVjaWVzIEZpbGUgR3JvdXAgKGh0dHA6Ly9zb2Z0d2FyZS5zcGVjaWVzZmlsZS5vcmcpIGF0IHRoZSBVbml2ZXJzaXR5IG9mIElsbGlub2lzLCBJbGxpbm9pcyBOYXR1cmFsIEhpc3RvcnkgU3VydmV5LiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImM1NzI1ZGIyLTUwN2YtNGVjMS05NmVmLTYwZGNjYjRkZTQ5MCIsInRpdGxlIjoiVmVybmFjdWxhciBuYW1lcyBvZiBJYmVyaWFuIGZ1bmdpIGluIFNwYWluIiwiZGVzY3JpcHRpb24iOiI8cD5WZXJuYWN1bGFyIG5hbWVzIG9mIEliZXJpYW4gZnVuZ2kgaW4gU3BhaW48L3A+XG48cD5Ob3RlOiB0aGlzIGRhdGFzZXQgd2FzIHByZXZpb3VzbHkgb3JwaGFuZWQuIEl0IGhhcyBiZWVuIHJlc2N1ZWQgYnkg4pGgIGV4dHJhY3RpbmcgaXQgZnJvbSB0aGUgR0JJRi5vcmcgaW5kZXggKHNlZSBHQklGIERvd25sb2FkIGluIEV4dGVybmFsIERhdGEpIGFuZCDikaEgcmVwdWJsaXNoaW5nIGl0IG9uIHRoaXMgSVBUIGRhdGEgaG9zdGluZyBjZW50cmUgYXMgdmVyc2lvbiAxLjAuPC9wPiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjdhOWJjY2Q0LTMyZmMtNDIwZS1hNzNiLTM1MmI5MjI2NzU3MSIsInRpdGxlIjoiQ2hlY2tsaXN0IG9mIEJlZXRsZXMgKENvbGVvcHRlcmEpIG9mIENhbmFkYSBhbmQgQWxhc2thLiBTZWNvbmQgRWRpdGlvbi4iLCJkZXNjcmlwdGlvbiI6IkFsbCA4MjM4IHNwZWNpZXMtZ3JvdXAgdGF4YSBvZiBDb2xlb3B0ZXJhIGtub3duIHRvIG9jY3VyIGluIENhbmFkYSBhbmQgQWxhc2thIGFyZSByZWNvcmRlZCBieSBwcm92aW5jZS90ZXJyaXRvcnkgb3Igc3RhdGUsIGFsb25nIHdpdGggdGhlaXIgYXV0aG9yKHMpIGFuZCB5ZWFyIG9mIHB1YmxpY2F0aW9uLCBpbiBhIGNsYXNzaWZpY2F0aW9uIGZyYW1ld29yay4gT25seSBwcmVzZW5jZSBvZiB0YXhhIGluIGVhY2ggQ2FuYWRpYW4gcHJvdmluY2Ugb3IgdGVycml0b3J5IGFuZCBBbGFza2EgaXMgbm90ZWQuIExhYnJhZG9yIGlzIGNvbnNpZGVyZWQgYSBkaXN0aW5jdCBnZW9ncmFwaGljYWwgZW50aXR5LiBBZHZlbnRpdmUgYW5kIEhvbGFyY3RpYyBzcGVjaWVzLWdyb3VwIHRheGEgYXJlIGluZGljYXRlZC4gUmVmZXJlbmNlcyB0byBwZXJ0aW5lbnQgaWRlbnRpZmljYXRpb24ga2V5cyBhcmUgZ2l2ZW4gdW5kZXIgdGhlIGNvcnJlc3BvbmRpbmcgc3VwcmFzcGVjaWZpYyB0YXhhLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImI0YWY3NDg0LTVhY2QtNDgwNC04MjExLWQ3MzhmMTM4MzJjNyIsInRpdGxlIjoiQ29tcG9zaXRhZSIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImVlMmFhYzA3LWRlOWEtNDdhMi1iODI4LTM3NDMwZDUzNzYzMyIsInRpdGxlIjoiTGlzdGEgZGUgdGF4b25lcyBlbiBlbCBTSVJBUC1FQyIsImRlc2NyaXB0aW9uIjoiUGFyYSBlbCBkaXNlw7FvIGUgaW1wbGVtZW50YWNpw7NuIGRlIHVuIFNJUkFQLCBlcyBlc2VuY2lhbCBjb25vY2VyIGxhIGJpb2RpdmVyc2lkYWQgcmVnaW9uYWwuIEVzdGUgY29ub2NpbWllbnRvIGRlIGxvcyBwYXRyb25lcyByZWdpb25hbGVzIGRlIGRpc3RyaWJ1Y2nDs24gZGUgbGFzIGVzcGVjaWVzLCBlcyBpbXBvcnRhbnRlIHBhcmEgZGV0ZXJtaW5hciBsYXMgw6FyZWFzIGRlIG1heW9yIGRpdmVyc2lkYWQsIGVsIGdyYWRvIGRlIGNvbmNlbnRyYWNpw7NuIGRlIGVuZGVtaXNtb3MgeSBsb3MgcGF0cm9uZXMgZGUgwpxkaXZlcnNpZGFkIGJldGE7IGVzIGRlY2lyLCBsYSBmb3JtYSBjb21vIGNhbWJpYSBsYSBjb21wb3NpY2nDs24gZGUgZXNwZWNpZXMgZGUgYWN1ZXJkbyBhbCBncmFkaWVudGUgYWx0aXR1ZGluYWwuIEFkZW3DoXMsIGVzIGltcG9ydGFudGUgdGVuZXIgaW5mb3JtYWNpw7NuIGRldGFsbGFkYSBkZSBsYSBkaXN0cmlidWNpw7NuIGRlIGxhcyBlc3BlY2llcyBmb2NhbGVzIGVuIGxhIHJlZ2nDs24uXG5cblBhcmEgY2FyYWN0ZXJpemFyIGxvcyBwYXRyb25lcyBkZSBiaW9kaXZlcnNpZGFkIHJlZ2lvbmFsIGVuIGVsIEVqZSBDYWZldGVybyBzZSB0dXZvIGNvbW8gcHVudG8gZGUgcGFydGlkYSBkb3MgYmFzZXMgZGUgZGF0b3MuIExhIHByaW1lcmEgZXMgdW5hIHJlY29waWxhY2nDs24gZGUgbGEgaW5mb3JtYWNpw7NuIGRpc3BvbmlibGUgc29icmUgbGFzIGxvY2FsaWRhZGVzIGRlIHJlZ2lzdHJvIGRlIGxhcyBlc3BlY2llcyBxdWUgY29uZm9ybWFuIGxhIGJpb3RhIHJlZ2lvbmFsIChpbnZlbnRhcmlvcyBiw6FzaWNvcykuIExhIHNlZ3VuZGEgYmFzZSBkZSBkYXRvcyBjb25zaXN0ZSBlbiBsb3MgbGlzdGFkb3MgZGUgZXNwZWNpZXMgcG90ZW5jaWFsZXMgcGFyYSBjYWRhIHN1YnJlZ2nDs24gZGVsIEVqZSBDYWZldGVyby4gTGEgZnVlbnRlIGRlIGxhIGluZm9ybWFjacOzbiBoYSBzaWRvIEZ1bmRhY2nDs24gRWNvYW5kaW5hIHkgV0NTLCBxdWUgc3VtaW5pc3RyYXJvbiB1bmEgYmFzZSBkZSBkYXRvcyBkaWdpdGFsIGNvbiBtw6FzIGRlIDM1IG1pbCByZWdpc3Ryb3MgKHF1ZSByZXByZXNlbnRhbiA2OTc0IGVzcGVjaWVzIGRlIGhvbmdvcywgcGxhbnRhcyB5IGFuaW1hbGVzKS4gQSBwYXJ0aXIgZGUgZXN0YSBiYXNlIGRlIGRhdG9zIHNlIG9yaWdpbsOzIGVzdGUgbGlzdGFkbyBkZSBlc3BlY2llcy4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIzZjVlOTMwYi01MmE1LTQ2MWQtODdlYy0yNmVjZDY2ZjE0YTMiLCJ0aXRsZSI6IlJJTlNFIC0gUmVnaXN0cnkgb2Ygbm9uLW5hdGl2ZSBzcGVjaWVzIGluIHRoZSBUd28gU2VhcyByZWdpb24gY291bnRyaWVzIChHcmVhdCBCcml0YWluLCBGcmFuY2UsIEJlbGdpdW0gYW5kIHRoZSBOZXRoZXJsYW5kcykiLCJkZXNjcmlwdGlvbiI6IjxwPlRoZSBSZWdpc3RyeSBvZiBub24tbmF0aXZlIHNwZWNpZXMgaW4gdGhlIFR3byBTZWFzIHJlZ2lvbiBjb3VudHJpZXMgaXMgYSBzcGVjaWVzIGNoZWNrbGlzdCBkYXRhc2V0IHB1Ymxpc2hlZCBieSB0aGUgUmVzZWFyY2ggSW5zdGl0dXRlIG9mIE5hdHVyZSBhbmQgRm9yZXN0IChJTkJPKS4gSXQgY29udGFpbnMgaW5mb3JtYXRpb24gb24gNi42NDMgdGF4YSBvY2N1cnJpbmcgaW4gdGhlIFR3byBTZWFzIHJlZ2lvbiBjb3VudHJpZXMgKEdyZWF0IEJyaXRhaW4sIEZyYW5jZSwgQmVsZ2l1bSBhbmQgdGhlIE5ldGhlcmxhbmRzKS4gVGhpcyBkYXRhc2V0IHJlcHJlc2VudHMgYSByZWdpc3RyeSBvZiBzcGVjaWVzIHRoYXQgYXJlIG5vdCBuYXRpdmUsIGJ1dCByZWNvcmRlZCB0byBsaXZlIGluIHRoZSB3aWxkIGluIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm91ciBjb3VudHJpZXMgYW5kIGlzIHRoZSByZXN1bHQgb2YgdGhlIHNjcmVlbmluZyBvZiA1NSBuYXRpb25hbCBhbmQgaW50ZXJuYXRpb25hbCBwcmludCBhbmQgb25saW5lIHNvdXJjZXMuIFRoZSBjaGVja2xpc3QgaGFzIGJlZW4gcHVibGlzaGVkIGFzIGEgZGF0YSBwYXBlciBieSBaaWVyaXR6IGV0IGFsLiAoMjAxNCwgaHR0cHM6Ly9kb2kub3JnLzEwLjM4OTcvbmVvYmlvdGEuMjMuNTY2NSksIHdoZXJlIGl0IGNhbiBiZSBkb3dubG9hZGVkIGFzIHN1cHBsZW1lbnRhcnkgbWF0ZXJpYWwuIEhlcmUgaXQgaXMgcHVibGlzaGVkIGFzIGEgc3RhbmRhcmRpemVkIERhcndpbiBDb3JlIEFyY2hpdmUgYW5kIGluY2x1ZGVzIGZvciBlYWNoIHRheG9uOiB0aGUgc2NpZW50aWZpYyBuYW1lLCBoaWdoZXIgY2xhc3NpZmljYXRpb24gYW5kIHN0YWJsZSB0YXhvbiBpZGVudGlmaWVyIChpbiB0aGUgdGF4b24gY29yZSksIHRoZSAoY29uZmlkZW5jZSByZWdhcmRpbmcgdGhlKSBwcmVzZW5jZSBvZiB0aGUgc3BlY2llcyBpbiBlYWNoIG9mIHRoZSBmb3VyIGNvdW50cmllcywgd2hldGhlciB0aGUgc3BlY2llcyBpcyBuYXRpdmUgb3IgaW50cm9kdWNlZCAoZXN0YWJsaXNobWVudCkgKGluIHRoZSBkaXN0cmlidXRpb24gZXh0ZW5zaW9uKSBhbmQgY29hcnNlIGhhYml0YXQgaW5mb3JtYXRpb24gKGluIHRoZSBzcGVjaWVzIHByb2ZpbGUgZXh0ZW5zaW9uKS4gSXNzdWVzIHdpdGggdGhlIGRhdGFzZXQgY2FuIGJlIHJlcG9ydGVkIGF0OiBodHRwczovL2dpdGh1Yi5jb20vdHJpYXMtcHJvamVjdC9yaW5zZS1yZWdpc3RyeS1jaGVja2xpc3Q8L3A+XG48cD5XZSBoYXZlIHJlbGVhc2VkIHRoaXMgZGF0YXNldCB0byB0aGUgcHVibGljIGRvbWFpbiB1bmRlciBhIENyZWF0aXZlIENvbW1vbnMgWmVybyB3YWl2ZXIuIFdlIHdvdWxkIGFwcHJlY2lhdGUgaXQgaWYgeW91IGZvbGxvdyB0aGUgSU5CTyBub3JtcyBmb3IgZGF0YSB1c2UgKGh0dHBzOi8vd3d3LmluYm8uYmUvZW4vbm9ybXMtZGF0YS11c2UpIHdoZW4gdXNpbmcgdGhlIGRhdGEuIElmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgcmVnYXJkaW5nIHRoaXMgZGF0YXNldCwgZG9uJiMzOTt0IGhlc2l0YXRlIHRvIGNvbnRhY3QgdXMgdmlhIHRoZSBjb250YWN0IGluZm9ybWF0aW9uIHByb3ZpZGVkIGluIHRoZSBtZXRhZGF0YSBvciB2aWEgaHR0cHM6Ly90d2l0dGVyLmNvbS9MaWZlV2F0Y2hJTkJPLjwvcD5cbjxwPlRoaXMgZGF0YXNldCB3YXMgcHVibGlzaGVkIGFzIG9wZW4gZGF0YSBmb3IgdGhlIFRySUFTIHByb2plY3QgKFRyYWNraW5nIEludmFzaXZlIEFsaWVuIFNwZWNpZXMgaHR0cDovL3RyaWFzLXByb2plY3QuYmUsIFZhbmRlcmhvZXZlbiBldCBhbC4gMjAxNyksIHdpdGggdGVjaG5pY2FsIHN1cHBvcnQgcHJvdmlkZWQgYnkgdGhlIFJlc2VhcmNoIEluc3RpdHV0ZSBmb3IgTmF0dXJlIGFuZCBGb3Jlc3QgKElOQk8pLiBJdCBpcyBzZWxlY3RlZCBhcyBvbmUgb2YgdGhlIGF1dGhvcml0YXRpdmUgc291cmNlcyBmb3IgdGhlIGNvbXBpbGF0aW9uIG9mIGEgdW5pZmllZCBhbmQgcmVwcm9kdWNpYmxlIGNoZWNrbGlzdCBvZiBhbGllbiBzcGVjaWVzIGluIEJlbGdpdW0uPC9wPiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImNiMWE1N2JlLWM2OWMtNGViZS1hNDFhLTIxZGQ3MjNkN2I0OCIsInRpdGxlIjoiQ0FURSBBcmFjZWFlIiwiZGVzY3JpcHRpb24iOiJDQVRFLUFyYWNlYWUgaXMgYSBjb21tdW5pdHkgb2YgZXhwZXJ0cyBhbmQgZW50aHVzaWFzdHMsIHRyeWluZyB0byBpbXByb3ZlIG91ciB1bmRlcnN0YW5kaW5nIG9mIHRoZSB0YXhvbm9teSwgYmlvbG9neSwgZWNvbG9neSBhbmQgZXZvbHV0aW9uIG9mIHRoZSBBcmFjZWFlLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjM4NDEyMGJlLWVmN2MtNDc4Ny05ZmYwLWNiMWIzZjU4OGIyNiIsInRpdGxlIjoiTMOtbmVhIGJhc2UgZGUgbGFzIGVzcGVjaWVzIGRlIGZhdW5hLCBmbG9yYSB5IGhvbmdvcyBwYXJhIGVsIGRlcGFydGFtZW50byBkZSBCb3lhY8OhIC0gUHJveWVjdG8gQm95YWPDoSBCaW8iLCJkZXNjcmlwdGlvbiI6IjxwPkVsIGRlcGFydGFtZW50byBkZSBCb3lhY8OhIHByZXNlbnRhIHVuYSB2YXJpYWRhIHkgZGl2ZXJzYSBmbG9yYSwgbG8gY3VhbCBkZXNlbWJvY2EgZW4gdW5hIGFsdGEgdmFyaWVkYWQgZGUgZWNvc2lzdGVtYXMgY29uIHpvbmFzIGRlIHDDoXJhbW8gYm9zcXVlIGjDum1lZG8gdHJvcGljYWwsIHBpZWRlbW9udGUgbGxhbmVybyB5IGJvc3F1ZSBhbmRpbm8geSBhbHRvYW5kaW5vOyBlbiBsb3MgY3VhbGVzIHNlIHByZXN1bWUgaGF5YSB1bmEgYWx0YSBkaXZlcnNpZGFkIGRlIGVzcGVjaWVzLiBFcyBhc8OtIGNvbW8gbGEgY29uc3RydWNjacOzbiBkZSBsYSBsw61uZWEgYmFzZSBwYXJhIGVsIGRlcGFydGFtZW50byBkZSBCb3lhY8OhIHR1dm8gY29tbyBvYmpldG8gaWRlbnRpZmljYXIgeSBhbmFsaXphciBlbCBlc3RhZG8gZGUgY29ub2NpbWllbnRvIGV4aXN0ZW50ZSBkZSBsYSBCaW9kaXZlcnNpZGFkIGVuIGFsZ3Vub3MgZ3J1cG9zIGJpb2zDs2dpY29zLCBlbmNhbWluYWRhIGEgbGxlbmFyIHZhY8Otb3MgZGUgaW5mb3JtYWNpw7NuIGEgdHJhdsOpcyBkZSBsYXMgZXhwZWRpY2lvbmVzIEJveWFjw6EgQmlvLiBMYSBsaXN0YSBwcmVzZW50YWRhIGNvbnRpZW5lIDU1NTAgcmVnaXN0cm9zIGRlIGVzcGVjaWVzLCBwZXJ0ZW5lY2llbnRlcyBhIDI1IGNsYXNlcywgZGUgbGFzIGN1YWxlcyBjb3JyZXNwb25kZW4gYSBwbGFudGFzIHZhc2N1bGFyZXM6IEN5Y2Fkb3BzaWRhICgxKSwgRXF1aXNldG9wc2lkYSAoMiksIExpbGlvcHNpZGEgKDg2OCksIEx5Y29wb2Rpb3BzaWRhICg1OSksIE1hZ25vbGlvcHNpZGEgKDMxMzEpLCBNYXJhdHRpb3BzaWRhICgyKSwgUGlub3BzaWRhICg3KSwgUG9seXBvZGlvcHNpZGEgKDM0MyksIFBzaWxvdG9wc2lkYSAoMikuIFBsYW50YXMgbm8gdmFzY3VsYXJlczogQW5kcmVhZW9wc2lkYSAoMiksIEJyeW9wc2lkYSAoMzUzKSwgSnVuZ2VybWFubmlvcHNpZGEgKDE4MCksIE1hcmNoYW50aW9wc2lkYSAoNyksIFBvbHl0cmljaG9wc2lkYSAoMTIpLCBTcGhhZ25vcHNpZGEgKDE0KS4gSW52ZXJ0ZWJyYWRvczogSW5zZWN0YSAoNjApLiBWZXJ0ZWJyYWRvczogTWFtbWFsaWEgKDEwNSksIEFjdGlub3B0ZXJ5Z2lpICgxMTQpLCBSZXB0aWxpYSAoMTExKSwgQW1waGliaWEgKDkxKS4gSG9uZ29zOiBBZ2FyaWNvbXljZXRlcyAoNDYpLCBEb3RoaWRlb215Y2V0ZXMgKDEpLCBHZW9nbG9zc29teWNldGVzICgyKSwgTGVvdGlvbXljZXRlcyAoMTcpLCBTb3JkYXJpb215Y2V0ZXMgKDIwKS48L3A+XG48cD5FbCByZWN1cnNvIGZ1ZSBjb25zdHJ1aWRvIGEgcGFydGlyIGRlIGxhIHZlcmlmaWNhY2nDs24gZGUgcmVnaXN0cm9zIGJpb2zDs2dpY29zIChwZWNlcywgYW5maWJpb3MsIHJlcHRpbGVzLCBtYW3DrWZlcm9zLCBpbnNlY3RvcywgcGxhbnRhcyB2YXNjdWxhcmVzLCBubyB2YXNjdWxhcmVzIHkgaG9uZ29zLCBwcm92ZW5pZW50ZXMgZGUgdHJlcyBmdWVudGVzOiBpbnN1bW8gU2lCIENvbG9tYmlhIHkgR0JJRiBwYXJhIGxhIGNvbnNvbGlkYWNpw7NuIGRlIGxhIGzDrW5lYSBiYXNlIGRlbCBkZXBhcnRhbWVudG8gZGUgQm95YWPDoSBlbGFib3JhZG8gcG9yIEVDLVNpQiwgZGUgbGEgcmV2aXNpw7NuIGUgaWRlbnRpZmljYWNpw7NuIGRlIGVqZW1wbGFyZXMgZGUgbGEgY29sZWNjacOzbiBkZSBwZWNlcyBlIGluc2VjdG9zIGRlIGxhIFVuaXZlcnNpZGFkIFBlZGFnw7NnaWNhIHkgVGVjbm9sw7NnaWNhIGRlIENvbG9tYmlhIFVQVEMsIHkgZGUgbGEgcmV2aXNpw7NuIGRlIGluZm9ybWFjacOzbiBzZWN1bmRhcmlhIChsaXRlcmF0dXJhLWRvY3VtZW50YWNpw7NuKS4gRXN0YSByZWNvcGlsYWNpw7NuIHRheG9uw7NtaWNhLCBzZSBkZXNhcnJvbGzDsyBiYWpvIGVsIGNvbnZlbmlvIE5vIDE3LTE3LTE3MC0xOTVDRSwgc3VzY3JpdG8gZW50cmUgVVBUQy1JQXZILCBjb24gZWwgb2JqZXRvIGZ1bmRhbWVudGFsIGRlIGF1bmFyIGVzZnVlcnpvcyBlbnRyZSBsYXMgcGFydGVzIHBhcmEgZ2VuZXJhciBsYSBsw61uZWEgYmFzZSBkZSBpbmZvcm1hY2nDs24gZGUgYmlvZGl2ZXJzaWRhZCBwYXJhIGVsIGRlcGFydGFtZW50byBkZSBCb3lhY8OhLCBhc8OtIGNvbW8gZGVzYXJyb2xsYXIgcHJvY2Vzb3MgZGUgaW52ZXN0aWdhY2nDs24gY29uIG1pcmFzIGEgY29tcGxlbWVudGFyIHZhY8Otb3MgZGUgaW5mb3JtYWNpw7NuIHkgY29udHJpYnVpciBhIGxhIGNvbnNvbGlkYWNpw7NuIGRlIHJlZGVzIGRlIGludmVzdGlnYWNpw7NuIGRlbCBkZXBhcnRhbWVudG8gZGUgQm95YWPDoSBlbiBlbCBtYXJjbyBkZWwgQ29udmVuaW8uPC9wPiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImRhMzhmMTAzLTQ0MTAtNDNkMS1iNzE2LWVhNmIxYjkyYmJhYyIsInRpdGxlIjoiQ2F0YWxvZ3VlIG9mIEFmcm90cm9waWNhbCBCZWVzIiwiZGVzY3JpcHRpb24iOiJUaGUgcHVycG9zZSBvZiB0aGlzIGNhdGFsb2d1ZSBpcyB0byBsaXN0IHRoZSB2YWxpZCBuYW1lcywgbm9tZW5jbGF0b3JpYWwgaGlzdG9yeSBvZiwgYW5kIHJlZmVyZW5jZXMgY2l0aW5nLCB0aGUgZGVzY3JpYmVkIGJlZXMgb2Ygc3ViLXNhaGFyYW4gQWZyaWNhIGFuZCB0aGUgd2VzdGVybiBJbmRpYW4gT2NlYW4gaXNsYW5kcywgZXhjbHVkaW5nIHRoZSBob25leSBiZWUgKEFwaXMgbWVsbGlmZXJhIExpbm5hZXVzKS4gVGhlIGNvdW50cmllcyBpbiB3aGljaCBzcGVjaWVzIG9jY3VyIGFyZSBsaXN0ZWQsIGFzIHdlbGwgYXMgdGhlIHR5cGUgc3BlY2ltZW5zL3NwZWNpZXMgb2Ygc3BlY2llcy9nZW5lcmEuIFNvbWUgZWNvbG9naWNhbCBpbmZvcm1hdGlvbiBpcyBwcm92aWRlZCwgbmFtZWx5IGZsb3dlcnMgdmlzaXRlZCwgcGxhbnRzIHVzZWQgYXMgbmVzdHMsIHBhcmFzaXRpYyBiZWVzIGFuZCBob3N0IGJlZXMuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiZmFiODg5NjUtZTY5ZC00NDkxLWEwNGQtZTMxOThiNjI2ZTUyIiwidGl0bGUiOiJOQ0JJIFRheG9ub215IiwiZGVzY3JpcHRpb24iOiJUaGUgTkNCSSB0YXhvbm9teSBkYXRhYmFzZSBpcyBub3QgYSBwcmltYXJ5IHNvdXJjZSBmb3IgdGF4b25vbWljIG9yIHBoeWxvZ2VuZXRpYyBpbmZvcm1hdGlvbi4gRnVydGhlcm1vcmUsIHRoZSBkYXRhYmFzZSBkb2VzIG5vdCBmb2xsb3cgYSBzaW5nbGUgdGF4b25vbWljIHRyZWF0aXNlIGJ1dCByYXRoZXIgYXR0ZW1wdHMgdG8gaW5jb3Jwb3JhdGUgcGh5bG9nZW5ldGljIGFuZCB0YXhvbm9taWMga25vd2xlZGdlIGZyb20gYSB2YXJpZXR5IG9mIHNvdXJjZXMsIGluY2x1ZGluZyB0aGUgcHVibGlzaGVkIGxpdGVyYXR1cmUsIHdlYi1iYXNlZCBkYXRhYmFzZXMsIGFuZCB0aGUgYWR2aWNlIG9mIHNlcXVlbmNlIHN1Ym1pdHRlcnMgYW5kIG91dHNpZGUgdGF4b25vbXkgZXhwZXJ0cy4gQ29uc2VxdWVudGx5LCB0aGUgTkNCSSB0YXhvbm9teSBkYXRhYmFzZSBpcyBub3QgYSBwaHlsb2dlbmV0aWMgb3IgdGF4b25vbWljIGF1dGhvcml0eSBhbmQgc2hvdWxkIG5vdCBiZSBjaXRlZCBhcyBzdWNoLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImNhNjk0ZWJmLTJiNTItNGM2Ny1iMmUxLTBmNDIzMTQ5NDAxYyIsInRpdGxlIjoiTHlnYWVvaWRlYSBTcGVjaWVzIEZpbGUiLCJkZXNjcmlwdGlvbiI6IlRoZSBMeWdhZW9pZGVhIFNwZWNpZXMgRmlsZSBkYXRhYmFzZSBjb250YWlucyB0YXhvbm9taWMgYW5kIG90aGVyIGluZm9ybWF0aW9uIGFib3V0IGFsbCB0aGUgc2VlZCBidWdzIG9mIHRoZSB3b3JsZCwgYm90aCBsaXZpbmcgYW5kIGZvc3NpbC5cbk5vdGU6IFRoaXMgb25saW5lIGNhdGFsb2cgaXMgdW5kZXIgY29udGludWFsIGRldmVsb3BtZW50IGFzIG1vcmUgc3BlY2ltZW4gZGF0YSBhbmQgb3RoZXIgaW5mb3JtYXRpb24gYXJlIGFkZGVkLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjZiNjRlZjdlLTgyZjctNDdhMy04ZGRiLWVjNjc5NGVhMDdkNiIsInRpdGxlIjoiR2xvYmFsIFJlZ2lzdGVyIG9mIEludHJvZHVjZWQgYW5kIEludmFzaXZlIFNwZWNpZXMtIFVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYSAoQ29udGlndW91cykiLCJkZXNjcmlwdGlvbiI6IlRoZSBHbG9iYWwgUmVnaXN0ZXIgb2YgSW50cm9kdWNlZCBhbmQgSW52YXNpdmUgU3BlY2llcyAoR1JJSVMpIHByZXNlbnRzIHZhbGlkYXRlZCBhbmQgdmVyaWZpZWQgY2hlY2tsaXN0cyAoaW52ZW50b3JpZXMpIG9mIGludHJvZHVjZWQgKGFsaWVuKSBhbmQgaW52YXNpdmUgYWxpZW4gc3BlY2llcyBhdCB0aGUgY291bnRyeSwgdGVycml0b3J5LCBhbmQgYXNzb2NpYXRlZCBpc2xhbmQgbGV2ZWwuIFxuXG5UaGUgcHJpbWFyeSBpbnRlbnRpb24gb2YgR1JJSVMgaXMgdG8gcHJvdmlkZSBjaGVja2xpc3RzIGZvciBjb3VudHJpZXMsIGlzbGFuZHMgYW5kIHNvb24gYWxzbyBmb3IgcHJvdGVjdGVkIGFyZWFzLiBDaGVja2xpc3RzIGFyZSBsaXZpbmcgZW50aXRpZXMsIGVzcGVjaWFsbHkgZm9yIGJpb2xvZ2ljYWwgaW52YXNpb25zIGdpdmVuIHRoZSBncm93aW5nIG5hdHVyZSBvZiB0aGUgcHJvYmxlbS4gR1JJSVMgQ2hlY2tsaXN0cyBhcmUgYmFzZWQgb24gYSBwdWJsaXNoZWQgbWV0aG9kb2xvZ3kgYW5kIHN1cHBvcnRlZCBieSB0aGUgSW50ZWdyYXRlZCBQdWJsaXNoaW5nIFRvb2wgdGhhdCBqb2ludGx5IGVuYWJsZSBvbmdvaW5nIGltcHJvdmVtZW50cyBhbmQgdXBkYXRlcyB0byBleHBhbmQgdGhlaXIgdGF4b25vbWljIGNvdmVyYWdlIGFuZCBjb21wbGV0ZW5lc3MuIFxuXG5QaGFzZSAxIG9mIHRoZSBwcm9qZWN0IGZvY3VzZWQgb24gZGV2ZWxvcGluZyB2YWxpZGF0ZWQgYW5kIHZlcmlmaWVkIGNoZWNrbGlzdHMgb2YgY291bnRyaWVzIHRoYXQgYXJlIFBhcnR5IHRvIHRoZSBDb252ZW50aW9uIG9uIEJpb2xvZ2ljYWwgRGl2ZXJzaXR5IChDQkQpLiBQaGFzZSAyIHdoaWNoIGlzIG9uLWdvaW5nLCBhaW1zIHRvIGFjaGlldmUgZ2xvYmFsIGNvdmVyYWdlIGluY2x1ZGluZyBub24tcGFydHkgY291bnRyaWVzIGFuZCBhbGwgb3ZlcnNlYXMgdGVycml0b3JpZXMgb2YgY291bnRyaWVzIGUuZy4gTmV0aGVybGFuZHMsIEZyYW5jZSBhbmQgVW5pdGVkIEtpbmdkb20uIFNwZWNpZXMgYmVsb25naW5nIHRvIGFsbCBLaW5nZG9tcyBhcmUgY292ZXJlZCBhcyB3ZWxsIGFzIG9jY3VycmluZyBpbiBhbGwgRW52aXJvbm1lbnQvc3lzdGVtcy4gXG5cbkNvdW50cnkvIFRlcnJpdG9yeS8gSXNsYW5kIGNoZWNrbGlzdHMgYXJlIHJldmlld2VkIGFuZCB2ZXJpZmllZCBieSBuZXR3b3JrcyBvZiBjb3VudHJ5IG9yIHNwZWNpZXMgZXhwZXJ0cy4gVmVyaWZpZWQgY2hlY2tsaXN0cy8gc3BlY2llcyByZWNvcmRzIGFzIHdlbGwgYXMgdGhvc2UgdW5kZXIgcmV2aWV3IGFyZSBwcmVzZW50ZWQgb24gdGhlIG9ubGluZSBHUklJUyB3ZWJzaXRlICh3d3cuZ3JpaXMub3JnKS4gSW5kaXZpZHVhbCBzcGVjaWVzIHJlY29yZHMgYXJlIGZsYWdnZWQgd2l0aCBhIOKAmHllc+KAmSBmb3IgdmVyaWZpY2F0aW9uLiAgXG5cblRoaXMgYW5ub3RhdGVkIGNoZWNrbGlzdCBpcyBvZiBpbnRyb2R1Y2VkIChhbGllbikgYW5kIGludmFzaXZlIGFsaWVuIHNwZWNpZXMga25vd24gdG8gb2NjdXIgaW4gdGhlIGNvbnRpZ3VvdXMgVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhIGkuZS4gZXhjbHVkaW5nIHRoZSBzdGF0ZXMgb2YgQWxhc2thIGFuZCBIYXdhaWkuIFRoaXMgYW5ub3RhdGVkIGNoZWNrbGlzdCBkb2VzIG5vdCBpbmNsdWRlIFBoeWx1bSBBcnRocm9wb2RzIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiM2U4MTJmMTMtYmQ1Zi00NmI2LTliYWUtNzEwNzY2YmU1MjZkIiwidGl0bGUiOiJDb2Nrcm9hY2ggU3BlY2llcyBGaWxlIiwiZGVzY3JpcHRpb24iOiJUaGlzIGZpbGUgY29udGFpbnMgdGF4b24gbmFtZXMgYW5kIHJlbGF0ZWQgbm9tZW5jbGF0dXJhbCBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yZGVyIEJsYXR0b2RlYSBvcmlnaW5hdGluZyBmcm9tIHRoZSBDb2Nrcm9hY2ggU3BlY2llcyBGaWxlIG1haW50YWluZWQgYnkgdGhlIFNwZWNpZXMgRmlsZSBHcm91cCAoaHR0cDovL3NvZnR3YXJlLnNwZWNpZXNmaWxlLm9yZykgYXQgdGhlIFVuaXZlcnNpdHkgb2YgSWxsaW5vaXMsIElsbGlub2lzIE5hdHVyYWwgSGlzdG9yeSBTdXJ2ZXkuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiYTczNTBkMjMtNjcyNy00ZWI2LWFlMGItNmY4NmZjOGQ2YTcxIiwidGl0bGUiOiJDaGVja2xpc3Qgb2YgRGFuaXNoIEZsaWVzIGFuZCBNb3NxdWl0b2VzIChEaXB0ZXJhKSIsImRlc2NyaXB0aW9uIjoiQ2hlY2tsaXN0IG9mIHRoZSBzcGVjaWVzIG9mIEZsaWVzIGFuZCBNb3NxdWl0b2VzIChEaXB0ZXJhKSwgYWNjZXB0ZWQgYXMgRGFuaXNoIGFuZCBpbmNsdWRlZCBpbiB3d3cuYWxsZWFydGVyLWRhdGFiYXNlbi5kay4gVGhlIGxpc3QgaXMgcGFydCBvZiBhIG5hdGlvbmFsIGNoZWNrbGlzdCBjb3ZlcmluZyBhbmltYWxzLCBwbGFudHMsIGZ1bmdpIGV0Yy4gQ29tcGlsYXRpb24gb2YgdGhlIGxpc3Qgc3RhcnRlZCBpbiAyMDA5LlxuUmVhZCBtb3JlIGF0IHd3dy5hbGxlYXJ0ZXIuZGsgLSBhIHByb2plY3QgYXQgRGFuQklGIChEYW5pc2ggQmlvZGl2ZXJzaXR5IEluZm9ybWF0aW9uIEZhY2lsaXR5IC0gd3d3LmRhbmJpZi5kaykuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiYjZhMDE2MTItYzIwMi00MzEwLTk1NTktY2FhODJhYTNmOTU3IiwidGl0bGUiOiJDaGVja2xpc3QgZGVyaXZlZCBmcm9tIHBsYW50IHNwZWNpZXMgb2YgQmVuaW4gZG93bmxvYWRlZCBmcm9tIEdCSUYgc2l0ZSIsImRlc2NyaXB0aW9uIjoiUGxhbnQgc3BlY2llcyBjb2xsZWN0ZWQgdGhyb3VnaG91dCBCZW5pbiB3ZXJlIHB1Ymxpc2hlZCBvbiBHQklGIHNpdGUuIERhdGEgY29uY2VybmluZyB0aG9zZSBzcGVjaWVzIHdlcmUgZG93bmxvYWRlZCBmcm9tIEdCSUYgc2l0ZS4gVXNpbmcgRXhjZWwgZHluYW1pYyBwaXZvdCB0YWJsZSB3ZSBkZXJpdmVkIGFuZCBhY2hpZXZlZCB0aGUgY2hlY2tsaXN0IG9mIHBsYW50IHNwZWNpZXMgb2YgQmVuaW4gZnJvbSB0aGUgZGF0YXNldCBkb3dubG9hZGVkLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImUwMWIwY2JiLWExMGEtNDIwYy1iNWYzLWEzYjIwY2MyNjZhZCIsInRpdGxlIjoiSUNUViBNYXN0ZXIgU3BlY2llcyBMaXN0IDIwMTkgdjIiLCJkZXNjcmlwdGlvbiI6Ik9mZmljaWFsIGxpc3RzIG9mIGFsbCBJQ1RWLWFwcHJvdmVkIHRheGEuXG5cblRoZSBjcmVhdGlvbiBvciBlbGltaW5hdGlvbiwgKHJlKW5hbWluZywgYW5kIChyZSlhc3NpZ25tZW50IG9mIGEgdmlydXMgc3BlY2llcywgZ2VudXMsIChzdWIpZmFtaWx5LCBvciBvcmRlciBhcmUgYWxsIHRheG9ub21pYyBhY3RzIHRoYXQgcmVxdWlyZSBwdWJsaWMgc2NydXRpbnkgYW5kIGRlYmF0ZSwgbGVhZGluZyB0byBmb3JtYWwgYXBwcm92YWwgYnkgdGhlIGZ1bGwgbWVtYmVyc2hpcCBvZiB0aGUgSUNUVi4gSW4gY29udHJhc3QsIHRoZSBuYW1pbmcgb2YgYSB2aXJ1cyBpc29sYXRlIGFuZCBpdHMgYXNzaWdubWVudCB0byBhIHByZS1leGlzdGluZyBzcGVjaWVzIGFyZSBub3QgY29uc2lkZXJlZCB0YXhvbm9taWMgYWN0cyBhbmQgdGhlcmVmb3JlIGRvIG5vdCByZXF1aXJlIGZvcm1hbCBJQ1RWIGFwcHJvdmFsLiBJbnN0ZWFkIHRoZXkgd2lsbCB0eXBpY2FsbHkgYmUgYWNjb21wbGlzaGVkIGJ5IHB1YmxpY2F0aW9uIG9mIGEgcGFwZXIgZGVzY3JpYmluZyB0aGUgdmlydXMgaXNvbGF0ZSBpbiB0aGUgcGVlci1yZXZpZXdlZCB2aXJvbG9neSBsaXRlcmF0dXJlLlxuXG5EZXNjcmlwdGlvbnMgb2YgdmlydXMgc2F0ZWxsaXRlcywgdmlyb2lkcyBhbmQgdGhlIGFnZW50cyBvZiBzcG9uZ2lmb3JtIGVuY2VwaGFsb3BhdGhpZXMgKHByaW9ucykgb2YgaHVtYW5zIGFuZCBzZXZlcmFsIGFuaW1hbCBhbmQgZnVuZ2FsIHNwZWNpZXMgYXJlIGluY2x1ZGVkLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjZhOTcxNzJiLTA5ZWQtNGIxOC05YWRlLTNiM2Y0ZjY0OTgyNSIsInRpdGxlIjoiRmxvcmUgaWxsdXN0csOpZSBkdSBTw6luw6lnYWwgZXQgZGVzIHLDqWdpb25zIHZvaXNpbmVzIiwiZGVzY3JpcHRpb24iOiJGbG9yZSBpbGx1c3Ryw6llIGR1IFPDqW7DqWdhbCBldCBkZXMgcsOpZ2lvbnMgdm9pc2luZXMiLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiJiZDBhMmI2ZC02OWQxLTQ2NTAtOGJiMS04MjljOGY5MjAzNWYiLCJ0aXRsZSI6IkJpb2RpdmVyc2l0eSBpbnZlbnRvcmllcyBpbiBoaWdoIGdlYXI6IEROQSBiYXJjb2RpbmcgZmFjaWxpdGF0ZXMgYSByYXBpZCBiaW90aWMgc3VydmV5IG9mIGEgdGVtcGVyYXRlIG5hdHVyZSByZXNlcnZlIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiODExMDBjMDgtZmNhNi00YjlkLTk3ZTUtMTUzZGQyYjgwOTE0IiwidGl0bGUiOiJDaGVja2xpc3Qgb2YgRGFuaXNoIFdhc3BzLCBCZWVzLCBBbnRzIGV0Yy4gKEh5bWVub3B0ZXJhKSIsImRlc2NyaXB0aW9uIjoiQ2hlY2tsaXN0IG9mIHRoZSBzcGVjaWVzIG9mIFdhc3BzLCBCZWVzLCBBbnRzIGV0Yy4gKEh5bWVub3B0ZXJhKSwgYWNjZXB0ZWQgYXMgRGFuaXNoIGFuZCBpbmNsdWRlZCBpbiB3d3cuYWxsZWFydGVyLWRhdGFiYXNlbi5kay4gVGhlIGxpc3QgaXMgcGFydCBvZiBhIG5hdGlvbmFsIGNoZWNrbGlzdCBjb3ZlcmluZyBhbmltYWxzLCBwbGFudHMsIGZ1bmdpIGV0Yy4gQ29tcGlsYXRpb24gb2YgdGhlIGxpc3Qgc3RhcnRlZCBpbiAyMDA5LlxuUmVhZCBtb3JlIGF0IHd3dy5hbGxlYXJ0ZXIuZGsgLSBhIHByb2plY3QgYXQgRGFuQklGIChEYW5pc2ggQmlvZGl2ZXJzaXR5IEluZm9ybWF0aW9uIEZhY2lsaXR5IC0gd3d3LmRhbmJpZi5kaykuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiMGIwOGMxYjEtNzAzMS00YzIxLWFjYWEtODgwNjA0OGE1MzgwIiwidGl0bGUiOiJMaXN0ZSBkZXMgcHVibGljYXRpb25zIHBhciB0YXhvbiBUT0dPIiwiZGVzY3JpcHRpb24iOiI8cD5DZSBkaWN0aW9ubmFpcmUgbXVsdGlsaW5ndWUgZGUgcGxhbnRlcyBtw6lkaWNpbmFsZXMgcsOpcGVydG9yaWUgcHLDqHMgZGUgMTAwMCBwbGFudGVzIGlkZW50aWZpw6llcyBwYXIgbGV1ciBub20gc2NpZW50aWZpcXVlLCBsZXVyIHN5bm9ueW1lcyBzY2llbnRpZmlxdWVzIGV0IGxldXJzIGluZGljYXRpb25zIG3DqWRpY2luYWxlcyBkYW5zIGVudmlyb25zIDE1MCBsYW5ndWVzIChzb3V2ZW50IGdyb3VwZXMgbGluZ3Vpc3RpcXVlcykgbG9jYWxlcyBkZSBodWl0IHBheXMgZOKAmUFmcmlxdWUgZGUgbOKAmU91ZXN0IDogQsOpbmluLEJ1cmtpbmEgRmFzbywgQ8O0dGUgZOKAmUl2b2lyZSxHdWluw6llLCBNYWxpLCBOaWdlciwgU8OpbsOpZ2FsIGV0IFRvZ28uQ2V0IG91dnJhZ2UgZGUgY29tcGxpY2F0aW9uLCBjZXJ0ZXMgaW5jb21wbMOodGUsIGRlcyBkb25uw6llcyBjb2xsZWN0w6llcyBkYW5zIGxhIGxpdHTDqXJhdHVyZSBldCBzdXIgSW50ZXJuZXQsIGVzdCBjb27Dp3UgY29tbWUgdW4gZ3VpZGUgZGUgbGVjdHVyZSBjb21wbMOpbWVudGFpcmUgYXV4IMOpdHVkZXMgZXRobm9ib3RhbmlxdWUgZG9udCBub3VzIHByw6lzZW50b25zIHVuIGFwZXLDp3Ugbm9uIGV4aGF1c3RpZiBkYW5zIGxlcyByw6lmw6lyZW5jZXMgYmlibGlvZ3JhcGhpcXVlLGFmaW4gZOKAmWVuIHJlbmRyZSBsYSBjb25zdWx0YXRpb24gcGx1cyBhY2Nlc3NpYmxlIG3Dqm1lIGF1IGdyYW5kIHB1YmxpYy4gSWwgc2UgdmV1dCBhdmFudCB0b3V0IMOqdHJlIHVuIG91dGlsIGRlIHN5bnRow6hzZSBwb3VyIGRldmVuaXIgdW4gb3V0aWwgZGUgZGlhbG9ndWUgZW50cmUgbGVzIGRpZmbDqXJlbnRzIGFjdGV1cnMgZGUgbGEgc2FudMOpLkNlIGRvY3VtZW50IG7igJllc3QgZW4gYXVjdW4gY2FzIHVuIG91dnJhZ2UgZGUgcmVjZXR0ZXMgbcOpZGljaW5hbGVzIGTigJlvw7kgbGUgY2hvaXggZOKAmXVuZSBwcsOpc2VudGF0aW9uIHN5bnRow6l0aXF1ZSBxdWkgbWVudGlvbm5lIHVuaXF1ZW1lbnQgbGVzIHV0aWxpc2F0aW9ucyB0aMOpcmFwZXV0aXF1ZXMgc2FucyBsaXZyZXIgbmkgbGVzIGFzc29jaWF0aW9ucyBkZSBwbGFudGVzLCBuaSBsZSBtb2RlIGRlIHByw6lwYXJhdGlvbiwgZW5jb3JlIG1vaW5zIGxlcyBwb3NvbG9naWVzLCBhZmluIGTigJnDqXZpdGVyIGxhIHRlbnRhdGlvbiBk4oCZYXV0b23DqWRpY2F0aW9uLCBwcmF0aXF1ZSBkYW5nZXJldXNlIHZ1IGxlIGNhcmFjdMOocmUgc291dmVudCB0b3hpcXVlICBkZXMgcGxhbnRlcy5MZXMgdm9sdW1lcyBkZSBjZSBkaWN0aW9ubmFpcmUgcGVybWV0dGVudCBs4oCZYWNjw6hzIGF1eCBpbmZvcm1hdGlvbnMgcGFyIGRpZmbDqXJlbnRlcyBlbnRyw6llcy5MZSB2b2x1bWUgMSBlc3QgdW5lIHZyYWllIGTDqW1hcmNoZSAgwqsgRGljdGlvbm5haXJlIMK7IGV0IGNvbnRpZW50IGxlcyBpbmRleCBxdWkgcmVudm9pZW50IGF1eCBub21zIHNjaWVudGlmaXF1ZXMgOuKAolx0Tm9tcyBhZnJpY2FpbnMgOiAyNSAwMDAgbm9tcyBkZSBwbGFudGVzIGVuIGxhbmd1ZXMgYWZyaWNhaW5lcyBldCBldXJvcMOpZW5uZXMgKGZyYW7Dp2FpcyBldCBhbmdsYWlzKSBjbGFzc8OpcyBwYXIgb3JkcmUgYWxwaGFiw6l0aXF1ZSA7IGxhIGxhbmd1ZSBldCBwYXlzIHNvbnQgaW5kaXF1w6lzLuKAolx0TGV4aXF1ZSBkZXMgdGVybWVzIG3DqWRpY2F1eC7igKJcdEluZGljYXRpb25zIG3DqWRpY2luYWxlcyA6IGFmaW4gZGUgZmFjaWxpdGVyICBsYSByZWNoZXJjaGUgY29ycmVzcG9uZGFudCDDoCB1bmUgcGF0aG9sb2dpZSBldCBkZSBtZXR0cmUgZW4gw6l2aWRlbmNlIGxlcyBwcm9wcmnDqXTDqXMgdGjDqXJhcGV1dGlxdWVzIGRlcyBlc3DDqGNlcywgZ2VucmVzIG91IGZhbWlsbGVzLCBzb250IHByw6lzZW50w6llcyBzZWxvbiBsZXMgMjEgY2hhcGl0cmVzIGRlIGxhIENsYXNzaWZpY2F0aW9uIEludGVybmF0aW9uYWxlIGRlcyBNYWxhZGllcyAoQ0lNKSB2ZXJzaW9uIGRlIGzigJlPcmdhbmlzYXRpb24gTW9uZGlhbGUgZGUgbGEgU2FudMOpIChPTVMpLiBVbmUgcGFnZSBk4oCZaW50cm9kdWN0aW9uIGTDqWNyaXQgY2V0dGUgY2xhc3NpZmljYXRpb24sIHN1aXZpZSBk4oCZdW5lIGV4cGxpY2F0aW9uIGRlIGxhIHN0cnVjdHVyZSBkZXMgZGlmZsOpcmVudHMgY2hhcGl0cmVzIHB1aXMgbOKAmWluZGV4IHJlbnZvaWUgYXV4IHBhZ2VzIGRlcyBwcm9wcmnDqXTDqXMgdGjDqXJhcGV1dGlxdWVzIGRlcyBwbGFudGVzLuKAolx0U3lub255bWVzIHNjaWVudGlmaXF1ZXMgOiBsZXMgc3lub255bWVzIGRlcyBub21zIHNjaWVudGlmaXF1ZXMgZmFjaWxpdGVyb250IGxhIGNvbnN1bHRhdGlvbiBkZXMgYW5jaWVucyBvdXZyYWdlcyBkZSByw6lmw6lyZW5jZSBxdWkgc2UgcsOpdsOobGUgc291dmVudCBkaWZmaWNpbGUuTOKAmWludMOpcsOqdCBkZSBjZSB2b2x1bWUgZXN0IGRlIHBvdXZvaXIgbWlldXggZXhwbG9pdGVyICBsYSBsaXR0w6lyYXR1cmUgZGFucyB1biBjb250ZXh0ZSBkZSBkaWFsb2d1ZSBldCBk4oCZw6ljaGFuZ2VzLiBFbiBtw6lkZWNpbmUgdHJhZGl0aW9ubmVsbGUsIGxlIG5vbSBsb2NhbCBjb3JyZXNwb25kIMOgIHVuIHNhdm9pciBlbXBpcmlxdWUgdHJhbnNtaXMgZGUgZ8OpbsOpcmF0aW9uIGVuIGfDqW7DqXJhdGlvbiBxdWkgcmVzdGUgw6AgdW5lIMOpY2hlbGxlIHRyw6hzIGxvY2FsZSwgY2VsbGUgZHUgZ3XDqXJpc3NldXIgZHUgdmlsbGFnZSBvdSBkZSBwZXRpdGUgcsOpZ2lvbi4gQXUgY29udHJhaXJlLCBsYSBub21lbmNsYXR1cmUgc2NpZW50aWZpcXVlIGVzdCB1bml2ZXJzZWxsZSBldCBjb25zdGl0dWUgdW5lIHLDqWbDqXJlbmNlIHBvdXIgaWRlbnRpZmllciB1bmUgcGxhbnRlLCBtYWlzIGzigJnDqXZvbHV0aW9uIGRlcyBjb25uYWlzc2FuY2VzIGVudHJhw65uZSByw6lndWxpw6hyZW1lbnQgdW5lIHLDqXZpc2lvbiBldCB1bmUgbW9kaWZpY2F0aW9uIGRlIGNldHRlIGNsYXNzaWZpY2F0aW9uIGJpbm9taWFsZS4gR3LDomNlIGF1eCBpbmRleCBub3VzIGVzcMOpcm9ucyBzdGltdWxlciBk4oCZdW5lIHBhcnQgbGEgY29tbXVuaWNhdGlvbiBlbnRyZSB0cmFkaXRow6lyYXBldXRlcyBwb3VyIHF14oCZaWxzIHB1aXNzZW50ICDDqWxhcmdpciAgbGV1ciAgcHJhdGlxdWUgZW4gc+KAmWluc3BpcmFudCBkZSBsZXVyIGNvbGzDqGd1ZXMgZOKAmWF1dHJlcyByw6lnaW9ucywgZOKAmWF1dHJlcyBwYXJ0IGxhIGNvbGxhYm9yYXRpb24gZW50cmUgdHJhZGl0aMOpcmFwZXV0ZXMgZXQgc2NpZW50aWZpcXVlcyBwb3VyIHF1ZSBsYSBtw6lkZWNpbmUgdHJhZGl0aW9ubmVsbGUgcHVpc3NlIHNlIGTDqXZlbG9wcGVyIGV0IGNvbnRpbnVlIMOgIHNvaWduZXIgbGUgcGx1cyBncmFuZCBub21icmUgZGUgcGVyc29ubmVzIHNlbG9uIGxlcyBjcml0w6hyZXMgZOKAmWVmZmljYWNpdMOpIGV0IGRlIHPDu3JldMOpIGFjdHVlbGxlbWVudCBlbiB2aWd1ZXVyLkxlIHZvbHVtZTIgZXN0IHVuZSBkw6ltYXJjaGUgZGUgTW9ub2dyYXBoaWUgwrsgZGVzIHBsYW50ZXMgY2hvaXNpZXMgZW4gcmFpc29uIHByaW5jaXBhbGVtZW50IGRlIGxhIGRpc3BvbmliaWxpdMOpIGRlIGxldXJzIG5vbXMgbG9jYXV4IGFmcmljYWlucy5FbGxlcyBzb250IGNsYXNzw6llcyBwYXIgb3JkcmUgYWxwaGFiw6l0aXF1ZSBkZSBsZXVyIG5vbSBzY2llbnRpZmlxdWUgcmVjb25udSBhY3R1ZWxsZW1lbnQu4oCiXHRMZSBnZW5yZSBldCBs4oCZZXNww6hjZSBkZSBsYSBwbGFudGUgc29udCBzdWl2aXMgZGUgbGEgZmFtaWxsZSDDoCBsYXF1ZWxsZSBlbGxlIGFwcGFydGllbnQsIGxlcyBzeW5vbnltZXMgc2NpZW50aWZpcXVlcyBzb250IGF1c3NpIHLDqXBlcnRvcmnDqXMgYWluc2kgcXVlIGxlcyBub21zIHZ1bGdhaXJlcyBlbiBmcmFuw6dhaXMgZXQgZW4gYW5nbGFpcy4gUG91ciByZW5kcmUgaG9tb2fDqG5lIGxlIGNsYXNzZW1lbnQgZGVzIGZhbWlsbGVzLCBsYSBub21lbmNsYXR1cmUgYWRvcHTDqSBlc3QgY2VsbGUgZGUgbGEgYmFzZSBkZXMgZG9ubsOpZXMgZGUgcGxhbnRlcyBk4oCZQWZyaXF1ZSBkdSBDb25zZXJ2YXRvaXJlIGV0IEphcmRpbiBib3RhbmlxdWUgIGRlIGxhIHZpbGxlIGRlIEdlbsOodmUu4oCiXHRQb3VyIHNvbiBpZGVudGlmaWNhdGlvbiwgY2hhcXVlIHBsYW50ZSBlc3QgcHLDqXNlbnTDqWUsIGRhbnMgbGEgbWVzdXJlIHBvc3NpYmxlLCBwYXIgdW5lIGJyw6h2ZSBkZXNjcmlwdGlvbiBldGFyIHNhIHLDqXBhcnRpdGlvbiBnw6lvZ3JhcGhpcXVlLiBMZXMgaWxsdXN0cmF0aW9ucyBzb250IGRlcyBkZXNzaW5zIHRpcsOpcyBk4oCZb3V2cmFnZXMsIHBvdXIgbGEgcGx1cGFydCBwdWJsacOpcyBwYXIgY2VydGFpbnMgZGVzIGF1dGV1cnMuIExlIGxleGlxdWUgZGVzIHRlcm1lcyBib3RhbmlxdWVzIGV4cGxpcXVlIHBhciBkZXMgZmlndXJlcyBldCBkZXMgZMOpZmluaXRpb25zIGxhIHRlcm1pbm9sb2dpZSBzY2llbnRpZmlxdWUgZW1wbG95w6llLuKAolx0RW5zdWl0ZSwgb24gdHJvdXZlIGxlcyBub21zIHZlcm5hY3VsYWlyZXMgZGFucyBwbHVzIGRlIDE1MCBsYW5ndWVzIGFmcmljYWluZXMgY2xhc3PDqWVzIHBhciBwYXlzIGFpbnNpIHF1ZSBs4oCZdXRpbGlzYXRpb24gbcOpZGljaW5hbGUgdHJhZGl0aW9ubmVsbGUgcHLDqXNlbnTDqWUgYXVzc2kgcGFyIHBheXMsIGF2ZWMgbOKAmW9yZ2FuZSBldCBs4oCZaW5kaWNhdGlvbiB0aMOpcmFwZXV0aXF1ZS5MYSByZWxhdGlvbiBlbnRyZSBsZSBub20gc2NpZW50aWZpcXVlIGV0IGxlIG5vbSB2ZXJuYWN1bGFpcmUsIHBlcm1ldCBsYSBjb25zZXJ2YXRpb24gZGVzIGNvbm5haXNzYW5jZXMgZW4gbcOpZGVjaW5lIHRyYWRpdGlvbm5lbGxlIHBvdXIgbGEgcHLDqXNlcnZhdGlvbiBkZXMgc2F2b2lyIGRlcyBwZXVwbGVzLiBOb3VzIGVzcMOpcm9ucyBxdWUgY2UgY2hvaXggcGVybWV0dHJhIHVuZSBtZWlsbGV1cmUgZXhwbG9pdGF0aW9uIGRlIGxhIGxpdHTDqXJhdHVyZSBzcMOpY2lhbGlzw6llLCBmYXZvcmlzZXJhIHVuZSBwcmlzZSBkZSBjb25zY2llbmNlIGRlcyByZXNzb3VyY2VzIGxvY2FsZXMgZXQgc3VydG91dCAgZW5jb3VyYWdlcmEgdW4gdHJhbnNmZXJ0IGVmZmljYWNlIGRlcyBjb25uYWlzc2FuY2VzIGVudHJlIGpldW5lcyBpbnN0cnVpdHMgw6AgwqsgbOKAmW9jY2lkZW50YWxlIMK7IGV0IHRyYWRpcHJhdGljaWVucyBkZSBsYSBzYW50w6ksIHbDqXJpdGFibGVzIMKrIGV0aG5vLW3DqWRlY2lucyDCuyBkw6l0ZW50ZXVycyBkZSBzYXZvaXJzIHPDqWN1bGFpcmVzIGVuIHZvaWVzIGRlIGRpc3Bhcml0aW9uLiBBaW5zaSBsZXMgw6ljaGFuZ2VzIGVudHJlIGxlcyBkaWZmw6lyZW50cyBwYXJ0ZW5haXJlcyBkZSBzYW50w6kgY29udHJpYnVlcm9udCDDoCB1biBlbnJpY2hpc3NlbWVudCwgcGFyIMOpY2hhbmdlcyBlbnRyZSB0cmFkaXByYXRpY2llbnMgcG91ciDDqWxhcmdpciBsZXVyIHByYXRpcXVlIG11dHVlbGxlIGV0IMOgICBsYSBtaXNlIGF1IHBvaW50IGRlIG3DqWRpY2FtZW50cyBzw7tycyBldCBlZmZpY2FjZXMgc2kgdW5lIGNvbGxhYm9yYXRpb24gc+KAmWluc3RhdXJlIGVudHJlIGNoZXJjaGV1cnMgZW4gcGhhcm1hY29ww6llIGV0IHByYXRpY2llbnMgdHJhZGl0aW9ubmVscy5DZXQgb3V2cmFnZSBjb25zdGl0dWUgdW5lIHBvcnRlIG91dmVydGUgdmVycyBsYSBjb21wYXJhaXNvbiBlbnRyZWxlcyBmbG9yZXNldCBsYSBwaHl0b3Row6lyYXBpZSB0cmFkaXRpb25uZWxsZSBk4oCZYXV0cmVzIHLDqWdpb25zIGVuIHZ1ZSBkZSBkw6ljb3V2cmlyIGxlcyBjb252ZXJnZW5jZXMgZXQgbGVzIGRpdmVyZ2VuY2VzIGRhbnMgbOKAmXV0aWxpc2F0aW9uIGRlIGxhIG3Dqm1lIHBsYW50ZSBwYXIgZGlmZsOpcmVudGVzIHBvcHVsYXRpb25zLiBPdXRyZSB1biBlbnJpY2hpc3NlbWVudCBpbnRlbGxlY3R1ZWwsIGNlbGEgcGV1dCBjb25zdGl0dWVyICB1bmUgcGlzdGUgcG91ciBsZSBjaG9peCBkZXMgZXNww6hjZXMgw6AgY3VsdGl2ZXIgw6AgZGVzIGZpbnMgdXRpbGl0YWlyZXMuRGUgcGx1cywgdW5lIG1laWxsZXVyZSBjb25uYWlzc2FuY2UgcGFyIGxlIGdyYW5kIHB1YmxpYyBkZSBs4oCZdXRpbGlzYXRpb24gZGVzIHBsYW50ZXMgY29udHJpYnVlcmEgw6AgZ2FyYW50aXIgdW5lIHBsdXMgZ3JhbmRlIHBhcnRpY2lwYXRpb27DoCBsYSBwcm90ZWN0aW9uIGRlIGxhIGJpb2RpdmVyc2l0w6kuIElsIHNlcmEgcGx1cyBkaWZmaWNpbGUgZGUgZMOpdHJ1aXJlIG91IGRlIHNhY2NhZ2VyIGxhIGZvcsOqdCBldCBsYSBzYXZhbmUgc2kgY2VzIG1pbGlldXggc29udCBjb25zaWTDqXLDqXMgY29tbWUgZGUgdsOpcml0YWJsZXMgPCBwaGFybWFjaWVzIHZpdmFudGVzIMK7IHV0aWxlcyBtYWlzIGZyYWdpbGVzLjwvcD5cbjxwPklOVFJPRFVDVElPTiAodm9sdW1lIDEmMilBcHLDqHMgbOKAmU9yZ2FuaXNhdGlvbiBkZSBs4oCZVW5pdMOpIEFmcmljYWluZSAoYXVqb3VyZOKAmWh1aSBkZXZlbnVlIGzigJlVbmlvbiBBZnJpY2FpbmUpIHF1aSBhIHByb211bGd1w6kgZW4gMjAwMCBsYSBkw6ljZW5uaWUgMjAwMS0yMDEwIMKrIETDqWNlbm5pZSBkZSBsYSBNw6lkZWNpbmUgVHJhZGl0aW9ubmVsbGUgQWZyaWNhaW5lIChNVEEpIMK7LCBs4oCZT3JnYW5pc2F0aW9uIE1vbmRpYWxlIGRlIGxhIFNhbnTDqSBhIHByb2NsYW3DqSDDoCBzb24gdG91ciBsZSAzMSBBb8O7dCDCqyBKb3VybsOpZSBJbnRlcm5hdGlvbmFsZSBkZSBsYSBNw6lkZWNpbmVUcmFkaXRpb25uZWxsZSBBZnJpY2FpbmUgwrsuIElsIHPigJlhZ2l0IGzDoCBkZSBkw6ljaXNpb25zIGZvcnRlbWVudCBzeW1ib2xpcXVlcyBkZSBsYSByZWNvbm5haXNzYW5jZSBvZmZpY2llbGxlIGV0IGludGVybmF0aW9uYWxlIGRlIGxhIE1UQSBwYXIgbGVzIGdvdXZlcm5lbWVudHMgcG91ciBzb24gcsO0bGUgZm9uZGFtZW50YWwgZGFucyBsZXMgc29pbnMgZGUgc2FudMOpIHB1YmxpcXVlLiBD4oCZZXN0IGF1c3NpICBsZSBzaWduYWwgZOKAmXVuICBjb3VwICBk4oCZZW52b2kgcG91ciBkZXMgIGFjdGlvbnMgc2NpZW50aWZpcXVlcyBldCBzb2NpYWxlcyBzYW5zIGNvbXBsZXhlcyBlbiB2dWUgZGUgbHVpICBkb25uZXIgc2EganVzdGUgcGxhY2UuRW4gZWZmZXQsIGxhIE1UQSBldCBsZXMgIHBsYW50ZXMgbcOpZGljaW5hbGVzIGLDqW7DqWZpY2llbnQgZMOpasOgIGRlIGxhIHJlY29ubmFpc3NhbmNlIHBvcHVsYWlyZSBjYXIgZWxsZXMgb2NjdXBlbnQgdW5lIHBsYWNlIHByw6lwb25kw6lyYW50ZSwgcGx1cyBkZSA4MCUsIGRhbnMgbGVzIHNvaW5zIGRlIHNhbnTDqSBlbiBBZnJpcXVlLiBQYXJhZG94YWxlbWVudCwgbGEgZGlzcGFyaXRpb24gcHJvZ3Jlc3NpdmUgZGVzIHbDqXJpdGFibGVzIHRyYWRpcHJhdGljaWVucyBkZSBzYW50w6ksIGTDqXRlbnRldXJzIGTigJl1biBzYXZvaXIgZXRobm8tbcOpZGljYWwsIGV0IGVuIGRhbmdlciBjZXR0ZSBwcmF0aXF1ZS4gRGUgcGx1cywgbGUgcmVjb3VycyBhdXggcGxhbnRlcyBtw6lkaWNpbmFsZXMsIGNvbW1lIG3DqWRlY2luZSBjb21wbMOpbWVudGFpcmUgZXN0IGVuIG5ldHRlIHByb2dyZXNzaW9uIGRhbnMgbGVzIGF1dHJlcyBwYXJ0aWVzIGR1IG1vbmRlLiBBdSBjb3VycyAgZHUgMjDDqG1lIHNpw6hjbGUsIGRlIG5vbWJyZXVzZXMgw6l0dWRlcyBvbnQgcsOpcGVydG9yacOpIGzigJl1c2FnZSBtw6lkaWNpbmFsIGRlcyBwbGFudGVzLCBtYWlzIGxldXIgYWNjw6hzIGVzdCBkaWZmaWNpbGUgcG91ciBsZXMgYWN0ZXVycyBkZSB0ZXJyYWluIMOgIGNhdXNlICBkdSBtYW5xdWUgZGUgZGljdGlvbm5haXJlcyBzY2llbnRpZmlxdWUgZW4gbGFuZ3VlcyBhZnJpY2FpbmVzLiBJbCBlc3QgZGV2ZW51IG7DqWNlc3NhaXJlIGRlIG1ldHRyZSDDoCBsYSBkaXNwb3NpdGlvbiBkZXMgY2hlcmNoZXVycyBldCBzdXJ0b3V0IGRlcyB0cmFkaXByYXRpY2llbnMgIGRlIHNhbnTDqSwgdsOpcml0YWJsZXMgwqsgIGV0aG5vLW3DqWRlY2lucyDCuyBkZXMgb3V0aWxzIHBlcm1ldHRhbnQgZOKAmWlkZW50aWZpZXIgcGFyIGxldXJzIG5vbXMgdmVybmFjdWxhaXJlcyBldCBzY2llbnRpZmlxdWVzLCBsZXMgcGxhbnRlcyB1dGlsaXPDqWVzIGRhbnMgbGV1cnMgZGlmZsOpcmVudGVzIHLDqWdpb25zIGRlIGzigJlBZnJpcXVlLiBDZWNpIHBlcm1ldCBkZSBtaWV1eCBleHBsb2l0ZXIgbGEgbGl0dMOpcmF0dXJlIGV0IGRlIGNvbXBhcmVyIGxlcyB1c2FnZXMgIGF1LWRlbMOgIGRlcyBjZXJjbGVzICByZXN0cmVpbnRzICBkZSB2aWxsYWdlcyBvdSBkZSByw6lnaW9ucy5EYW5zIHVuIGRpYWxvZ3VlIGPigJllc3QgcHLDqWbDqXJhYmxlIGRlIHNhdm9pciBxdWUgbOKAmW9uIHBhcmxlIGRlIGxhIG3Dqm1lIGNob3Nl4oCmICFD4oCZZXN0IHBvdXJxdW9pIGzigJlBc3NvY2lhdGlvbiBUcmFkaXRpb25zIGV0IE3DqWRlY2luZSAgVCAmTSBkZSBHZW7DqHZlIGEgcHJpcyBs4oCZaW5pdGlhdGl2ZSBkZSBwYXJyYWluZXIgbGEgcsOpZGFjdGlvbiBldCBsYSBwdWJsaWNhdGlvbiBkZSBjZXQgb3V2cmFnZSwgYXZlYyBwb3VyIHByaW5jaXBhbCBvYmplY3RpZiBkZSBjb250cmlidWVyIMOgIGNvbWJsZXIgY2V0dGUgbGFjdW5lIGVuIG9mZnJhbnQgdW4gb3V0aWwgZGUgZGlhbG9ndWUgIHBvdXIsIGTigJl1bmUgcGFydCBmYWNpbGl0ZXIgbGVzIMOpY2hhbmdlcyBlbnRyZSBldCBhdmVjIGxlcyBUaMOpcmFwZXV0ZXMgZXQgbGVzIGNoZXJjaGV1cnMsIGV0IGTigJlhdXRyZXMgcGFydCwgc2ltcGxpZmllciBsYSBjb25zdGl0dXRpb24gZGVzIG5vbWJyZXV4IG91dnJhZ2VzICBkaXNwb25pYmxlcy4gSWxzY29uc3RpdHVlbnQgdW4gZXh0cmFpdCBkZXMgcsOpc3VsdGF0cyBk4oCZdW4gdHJhdmFpbCBkZSBjb21waWxhdGlvbiBk4oCZaW5mb3JtYXRpb25zIHN1ciBsZXMgbm9tcyB2ZXJuYWN1bGFpcmVzIGFmcmljYWlucyAgZGVzIHBsYW50ZXMgw6AgcGFydGlyIGTigJllbnF1w6p0ZXMgZW4gZXRobm9ib3RhbmlxdWVldCBzdXIgbGVzIHBoYXJtYWNvcMOpZXMsIGNvbXBsw6l0w6lzIHBhciBkZXMgcmVjaGVyY2hlcyBiaWJsaW9ncmFwaGlxdWVzIGV0IHN1ciBJbnRlcm5ldC5M4oCZb3JpZ2luYWxpdMOpIGRlIGNldHRlIGTDqW1hcmNoZSByw6lzaWRlIGRvbmMgZGFucyBzYSBwcsOpc2VudGF0aW9uIHN5bnRow6l0aXF1ZSBmYWNpbGl0YW50ICBsYSBjb25zdWx0YXRpb24gdGFudCBwYXIgbGUgZ3JhbmQgcHVibGljIGV0IGxlcyDCq2NoZXJjaGV1cnMgcHJvZmFuZXMgwrsgcXVlIHBhciBsZXMgcHJvZmVzc2lvbm5lbHMgZGUgZGl2ZXJzIHNlY3RldXJzIChiaW9sb2dpZSwgcGhhcm1hY2llLCBtw6lkZWNpbmUsIHNhbnTDqSBwdWJsaXF1ZSwgZW52aXJvbm5lbWVudCwgaGlzdG9pcmUsIMOpZHVjYXRpb24sIHNvY2lvbG9naWUsIGV0Yy4pLCBhZmluIGTigJlhdm9pciB1bmUgaW5kaWNhdGlvbiByYXBpZGUgc3VyIGxhIHBvc2l0aW9uIHN5c3TDqW1hdGlxdWUgZOKAmXVuZSBwbGFudGUsZW4gYXR0ZW5kYW50IGNvbmZpcm1hdGlvbiBwYXIgdW4gc3DDqWNpYWxpc3RlLiBMb2luIGTigJnDqnRyZSBleGhhdXN0aWZzLCBub3VzIGF2b25zIGRvbmMgZXNzYXnDqSBkZSBwcsOpc2VudGVyIHVuIGNob2l4IGTigJlpbmZvcm1hdGlvbnMgY29sbGVjdMOpZXMsIGF2ZWMgbGVzIHLDqXNlcnZlcyBxdWkgc+KAmWltcG9zZW50LCBtYWlzIHN1cnRvdXQgZW4gY29tcHRhbnQgc3VyIGxlcyBhcHBvcnRzIGZ1dHVycyBkZXMgbGVjdGV1cnMsIGVuIHZ1ZSBk4oCZdW4gZW5yaWNoaXNzZW1lbnQgcXVhbnRpdGF0aWYgZXQgcXVhbGl0YXRpZiBwb3VyIGRlcyByw6l2aXNpb25zIGZ1dHVyZXMuTGUgZMOpdmVsb3BwZW1lbnQgZGUgbOKAmWludMOpcsOqdCBwb3VyIGxlcyBwaGFybWFjb3DDqWVzIGxvY2FsZXMgZXQgbOKAmWV0aG5vYm90YW5pcXVlLCBsZXMgc3luZXJnaWVzIHN1c2NpdMOpZXMgcGFyIGxhIHLDqWhhYmlsaXRhdGlvbiBkZXMgbcOpZGVjaW5lcyB0cmFkaXRpb25uZWxsZXMgcGFyIGxlIGdyYW5kIHB1YmxpYyAgZXQgcGFyIGxlcyBkw6ljaWRldXJzIHBvbGl0aXF1ZXMsIGFpbnNpIHF1ZSBsZXMgbWF0w6lyaWF1eCBkaXNwb25pYmxlcyBkYW5zIGxhIGxpdHTDqXJhdHVyZSwgcGVybWV0dGVudCBhdWpvdXJk4oCZaHVpIGNldHRlIHLDqWFsaXNhdGlvbi4gQXUtZGVsw6AgZGUgbOKAmWludMOpcsOqdCBzY2llbnRpZmlxdWUgb3UgbcOpZGljaW5hbCwgbm90cmUgc291aGFpdCBlc3QgZGUgdm9pciBjZXQgb3V2cmFnZSBjb250cmlidWVyIGF1c3NpIMOgIHVuZSBtZWlsbGV1cmUgZXhwbG9pdGF0aW9uIGRlcyBwbGFudGVzIGVuIEFmcmlxdWUsIHNvdXJjZXMgZGUgcHJvZHVpdHMgYWxpbWVudGFpcmVzLCBtw6lkaWNhdXggcHLDqWluZHVzdHJpZWxzIG91IGTigJlpbnTDqXLDqnQgZW52aXJvbm5lbWVudGFsLCBhaW5zaSBxdeKAmcOgIHVuIG1laWxsZXVyIGRpYWxvZ3VlIHNjaWVudGlmaXF1ZSBOb3JkLVN1ZCBldCBTdWQtU3VkLlNpIGxlIHLDqXN1bHRhdCBkZSBjZSB0cmF2YWlsIHBlcm1ldCBhdSBsZWN0ZXVyIGRlIHByb2ZpdGVyIGRlcyBhY3F1aXMgYW50w6lyaWV1cnMsIGlsIGRldnJhaXQgYXVzc2kgY29udHJpYnVlciDDoCB1bmUgbWVpbGxldXJlIGV4cGxvaXRhdGlvbiBkZXMgcGxhbnRlcyBlbiBBZnJpcXVlIGRhbnMgbOKAmW9wdGlxdWUgZOKAmXVuZSBwb2xpdGlxdWUgZGUgZMOpdmVsb3BwZW1lbnQgZHVyYWJsZSBjb21tZSBj4oCZZXN0IGTDqWrDoCBsZSBjYXMgZGFucyB1biBwYXlzIHBpb25uaWVyIHF14oCZZXN0IGxlIE1hbGkuIE5vdHJlIHNvdWhhaXQgZXN0IHF1ZSBsZXMgY3VsdHVyZXMgZGVzIHBsYW50ZXMgYWZyaWNhaW5lcyBz4oCZaW50ZW5zaWZpZW50IGVuIEFmcmlxdWUgZGUgbOKAmU91ZXN0IHBhciB1bmUgbWVpbGxldXJlIGludMOpZ3JhdGlvbiBkYW5zIGxhIHBvbGl0aXF1ZSBkZSBzYW50w6kgZXQgZOKAmcOpY29ub21pZSBuYXRpb25hbGUuIEVuIGVmZmV0LCBsYSB2YWxldXIgc2FuaXRhaXJlIGV0IMOpY29ub21pcXVlIGRlIGxhIGN1bHR1cmUgZGVzIHBsYW50ZXMgbcOpZGljaW5hbGVzLCB0b3V0IGVuIHByw6lzZXJ2YW50LCBhdXRhbnQgcXVlIHBvc3NpYmxlIGxlcyBlc3DDqGNlcyBzYXV2YWdlcyBkYW5zIGxldXIgbWlsaWV1LCBu4oCZZXN0IHBsdXMgw6AgZMOpbW9udHJlci4gQWluc2ksIGVuIHBsdXMgZOKAmWFzc3VyZXIgdW5lIG3DqWRlY2luZSBhY2Nlc3NpYmxlIMOgIHRvdXMsIGxlcyBlbXBsb2lzIGfDqW7DqXLDqXMgZGFucyBsZXMgc2VjdGV1cnMgZGUgbOKAmWFncmljdWx0dXJlIGV0IGRlIGxhIHNhbnTDqSBwZXJtZXR0cmFpZW50IGTigJlhbcOpbGlvcmVyIGxlcyBjb25kaXRpb25zIHNvY2lhbGVzIGV0IMOpY29ub21pcXVlcyBkZXMgcG9wdWxhdGlvbnMgYWZyaWNhaW5lcywgcG91ciB1bmUgdnJhaWUgY29udHJpYnV0aW9uYXUgZMOpdmVsb3BwZW1lbnQgZHVyYWJsZSDDoCBwYXJ0aXIgZGVzIHJlc3NvdXJjZXMgZGUgbGEgYmlvZGl2ZXJzaXTDqS5HZW7DqHZlLCAyMDEyPC9wPiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImZiYWIwMTk0LWI5MjMtNDlkNC05ODQ4LTFiMzI3OWE2NjczZSIsInRpdGxlIjoiUGxlY29wdGVyYSBTcGVjaWVzIEZpbGUiLCJkZXNjcmlwdGlvbiI6IlRoaXMgZmlsZSBjb250YWlucyB0YXhvbiBuYW1lcyBhbmQgcmVsYXRlZCBub21lbmNsYXR1cmFsIGluZm9ybWF0aW9uIGZvciB0aGUgb3JkZXIgUGxlY29wdGVyYSBvcmlnaW5hdGluZyBmcm9tIHRoZSBQbGVjb3B0ZXJhIFNwZWNpZXMgRmlsZSBtYWludGFpbmVkIGJ5IHRoZSBTcGVjaWVzIEZpbGUgR3JvdXAgKGh0dHA6Ly9zb2Z0d2FyZS5zcGVjaWVzZmlsZS5vcmcpIGF0IHRoZSBVbml2ZXJzaXR5IG9mIElsbGlub2lzLCBJbGxpbm9pcyBOYXR1cmFsIEhpc3RvcnkgU3VydmV5LiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjYxZGU3NmIzLTliYTUtNGIwYy1hMTZjLTFiNTU0YWU4Zjg2OSIsInRpdGxlIjoiQ2hlY2tsaXN0IGRhIEZsb3JhIGRlIFBvcnR1Z2FsIChDb250aW5lbnRhbCwgQcOnb3JlcyBlIE1hZGVpcmEpIiwiZGVzY3JpcHRpb24iOiJUaGUgY2hlY2tsaXN0IG9mIHZhc2N1bGFyIHBsYW50cyBvZiBQb3J0dWdhbCwgaW5jbHVkaW5nIE1haW5sYW5kIFBvcnR1Z2FsLCBBem9yZXMgYW5kIE1hZGVpcmEsIHdhcyBwdWJsaXNoZWQgaW4gMjAxMiBieSBBTEZBIChBc3NvY2lhw6fDo28gTHVzaXRhbmEgZGUgRml0b3Nzb2Npb2xvZ2lhKSwgYW5kIGFkb3B0ZWQgZm9ybWFsbHkgYnkgdGhlIEluc3RpdHV0byBkZSBDb25zZXJ2YcOnw6NvIGRhIE5hdHVyZXphIGUgZGEgQmlvZGl2ZXJzaWRhZGUgKHByZXNlbnRseSBJQ05GKS4gVGhlIGNoZWNrbGlzdCBjb3ZlcnMgQ29udGluZW50YWwgUG9ydHVnYWwsIEF6b3JlcyBhbmQgTWFkZWlyYS4gSXQgaW5jbHVkZXMgYSB0b3RhbCBvZiAzOTk1IHRheGEgKGluY2x1ZGluZyBpbmZyYXNwZWNpZmljIHRheGEpLCBvZiB3aGljaCAzMzE0IGFyZSBmb3IgTWFpbmxhbmQgUG9ydHVnYWwsIDEwMDYgZm9yIEF6b3JlcyBhbmQgMTIzMyBmb3IgTWFkZWlyYS4gVGhlc2UgdGF4YSBhcmUgZGlzdHJpYnV0ZWQgYW1vbmcgMTg1IGZhbWlsaWVzIGFuZCAxMDY2IGdlbmVyYS4gVGhlIGNoZWNrbGlzdCBhbHNvIGluY2x1ZGVzIGVzdGFibGlzaG1lbnQgbWVhbnMsIGlkZW50aWZ5aW5nIG5hdGl2ZSwgaW50cm9kdWNlZCBvZiBlbmRlbWljIHRheGEuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiOTA0MmFiNDUtZDMxZS00N2M2LWFkMWEtMzg2NjBhN2NlOWE3IiwidGl0bGUiOiJDaGVja2xpc3Qgb2YgRGFuaXNoIEJlZXRsZXMgKENvbGVvcHRlcmEpIiwiZGVzY3JpcHRpb24iOiJDaGVja2xpc3Qgb2YgdGhlIHNwZWNpZXMgb2YgQmVldGxlcyAoQ29sZW9wdGVyYSksIGFjY2VwdGVkIGFzIERhbmlzaCBhbmQgaW5jbHVkZWQgaW4gd3d3LmFsbGVhcnRlci1kYXRhYmFzZW4uZGsuIFRoZSBsaXN0IGlzIHBhcnQgb2YgYSBuYXRpb25hbCBjaGVja2xpc3QgY292ZXJpbmcgYW5pbWFscywgcGxhbnRzLCBmdW5naSBldGMuIENvbXBpbGF0aW9uIG9mIHRoZSBsaXN0IHN0YXJ0ZWQgaW4gMjAwOS5cblJlYWQgbW9yZSBhdCB3d3cuYWxsZWFydGVyLmRrIC0gYSBwcm9qZWN0IGF0IERhbkJJRiAoRGFuaXNoIEJpb2RpdmVyc2l0eSBJbmZvcm1hdGlvbiBGYWNpbGl0eSAtIHd3dy5kYW5iaWYuZGspLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjBhMmVhZjBjLTU1MDQtNGY0OC1hNDdmLWM5NDIyOTAyOWRjOCIsInRpdGxlIjoiV29ybGQgUmVnaXN0ZXIgb2YgSW50cm9kdWNlZCBNYXJpbmUgU3BlY2llcyAoV1JpTVMpIiwiZGVzY3JpcHRpb24iOiJUaGUgV29ybGQgUmVnaXN0ZXIgb2YgSW50cm9kdWNlZCBNYXJpbmUgU3BlY2llcyAoV1JpTVMsIGh0dHA6Ly93d3cubWFyaW5lc3BlY2llcy5vcmcvaW50cm9kdWNlZCkgcmVjb3JkcyB3aGljaCBtYXJpbmUgc3BlY2llcyBpbiB0aGUgV29ybGQgUmVnaXN0ZXIgb2YgTWFyaW5lIFNwZWNpZXMgKFdvUk1TLCBodHRwOi8vd3d3Lm1hcmluZXNwZWNpZXMub3JnLywgaHR0cHM6Ly9kb2kub3JnLzEwLjE0Mjg0LzE3MCkgaGF2ZSBiZWVuIGludHJvZHVjZWQgZGVsaWJlcmF0ZWx5IG9yIGFjY2lkZW50YWxseSBieSBodW1hbiBhY3Rpdml0aWVzIHRvIGdlb2dyYXBoaWMgYXJlYXMgb3V0c2lkZSB0aGVpciBuYXRpdmUgcmFuZ2UuIEl0IGV4Y2x1ZGVzIHNwZWNpZXMgdGhhdCBjb2xvbml6ZWQgbmV3IGxvY2F0aW9ucyBuYXR1cmFsbHkgKHNvIGNhbGxlZCDigJhyYW5nZSBleHRlbnNpb25z4oCZKSwgZXZlbiBpZiBpbiByZXNwb25zZSB0byBjbGltYXRlIGNoYW5nZS4gVGhlIGRhdGFzZXQgaXMgcHVibGlzaGVkIGFzIGEgc3RhbmRhcmRpemVkIERhcndpbiBDb3JlIEFyY2hpdmUgYW5kIGluY2x1ZGVzIGZvciBlYWNoIHRheG9uOiB0aGUgc2NpZW50aWZpYyBuYW1lLCBoaWdoZXIgY2xhc3NpZmljYXRpb24sIHN0YWJsZSBpZGVudGlmaWVycyBsaW5raW5nIHRvIHRheG9uIGFuZCBzY2llbnRpZmljIG5hbWUgaW5mb3JtYXRpb24sIHRheG9ub21pYyBzdGF0dXMsIGFuZCBub21lbmNsYXR1cmFsIHN0YXR1cywgdGhlIHZlcm5hY3VsYXIgbmFtZXMsIHRoZSByZWdpb24gb2YgaW50cm9kdWN0aW9uIGFuZCBhc3NvY2lhdGVkIGNvdW50cnksIGFzIHdlbGwgYXMgdGhlIHllYXIgb2YgdGhlIGZpcnN0IGludHJvZHVjdGlvbiAoZmlyc3QgY29sbGVjdGlvbikgYW5kL29yIGxhc3QgYXNzZXNzbWVudC9vYnNlcnZhdGlvbiBpbiB0aGlzIHJlZ2lvbiwgY29hcnNlIGhhYml0YXQgaW5mb3JtYXRpb24sIGFuZCB0aGUgcGF0aHdheShzKSBvZiBpbnRyb2R1Y3Rpb24gYW5kIGludmFzaW9uIHN0YWdlLlxuV2UgaGF2ZSByZWxlYXNlZCB0aGlzIGRhdGFzZXQgdW5kZXIgYSBDcmVhdGl2ZSBDb21tb25zIGxpY2Vuc2UgIChDQy1CWSkuIElmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgcmVnYXJkaW5nIHRoaXMgZGF0YXNldCwgZG9u4oCZdCBoZXNpdGF0ZSB0byBjb250YWN0IHVzIHZpYSB0aGUgY29udGFjdCBpbmZvcm1hdGlvbiBwcm92aWRlZCBpbiB0aGUgbWV0YWRhdGEuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiZTBhNjE1NDQtYzkyMy00ZmQ3LThlZDEtOWI2OTI2NTVjZjZiIiwidGl0bGUiOiJDb3Jlb2lkZWEgU3BlY2llcyBGaWxlIiwiZGVzY3JpcHRpb24iOiJUaGlzIGZpbGUgY29udGFpbnMgdGF4b24gbmFtZXMgYW5kIHJlbGF0ZWQgbm9tZW5jbGF0dXJhbCBpbmZvcm1hdGlvbiBmb3IgdGhlIHN1cGVyZmFtaWx5IENvcmVvaWRlYSBvcmlnaW5hdGluZyBmcm9tIHRoZSBDb3Jlb2lkZWEgU3BlY2llcyBGaWxlIG1haW50YWluZWQgYnkgdGhlIFNwZWNpZXMgRmlsZSBHcm91cCAoaHR0cDovL3NvZnR3YXJlLnNwZWNpZXNmaWxlLm9yZykgYXQgdGhlIFVuaXZlcnNpdHkgb2YgSWxsaW5vaXMsIElsbGlub2lzIE5hdHVyYWwgSGlzdG9yeSBTdXJ2ZXkuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiNTk4Njc4ZTQtMzIzYy00OWRjLThlYjctM2E5NmFjNzJkNDcyIiwidGl0bGUiOiJQaGFzbWlkYSBTcGVjaWVzIEZpbGUiLCJkZXNjcmlwdGlvbiI6IlRoaXMgZmlsZSBjb250YWlucyB0YXhvbiBuYW1lcyBhbmQgcmVsYXRlZCBub21lbmNsYXR1cmFsIGluZm9ybWF0aW9uIGZvciB0aGUgb3JkZXIgUGhhc21pZGEgb3JpZ2luYXRpbmcgZnJvbSB0aGUgUGhhc21pZGEgU3BlY2llcyBGaWxlIG1haW50YWluZWQgYnkgdGhlIFNwZWNpZXMgRmlsZSBHcm91cCAoaHR0cDovL3NvZnR3YXJlLnNwZWNpZXNmaWxlLm9yZykgYXQgdGhlIFVuaXZlcnNpdHkgb2YgSWxsaW5vaXMsIElsbGlub2lzIE5hdHVyYWwgSGlzdG9yeSBTdXJ2ZXkuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiNmQ5ZTk1MmYtOTQ4Yy00NDgzLTk4MDctNTc1MzQ4MTQ3YzdlIiwidGl0bGUiOiJHbG9iYWwgUmVnaXN0ZXIgb2YgSW50cm9kdWNlZCBhbmQgSW52YXNpdmUgU3BlY2llcyAtIEJlbGdpdW0iLCJkZXNjcmlwdGlvbiI6IjxwPlRoZSBHbG9iYWwgUmVnaXN0ZXIgb2YgSW50cm9kdWNlZCBhbmQgSW52YXNpdmUgU3BlY2llcyAtIEJlbGdpdW0gaXMgYSBzcGVjaWVzIGNoZWNrbGlzdCBwdWJsaXNoZWQgYnkgdGhlIEludmFzaXZlIFNwZWNpZXMgU3BlY2lhbGlzdCBHcm91cCAoSVNTRykuIEl0IGNvbnRhaW5zIGluZm9ybWF0aW9uIG9uIDIsODAwJiM0MzsgdmFsaWRhdGVkIG5vbi1uYXRpdmUgdGF4YSBpbiBCZWxnaXVtIGFuZCBzZXJ2ZXMgYXMgdGhlIG5hdGlvbmFsIHJlZmVyZW5jZSBmb3IgdGhlIEdsb2JhbCBSZWdpc3RlciBvZiBJbnRyb2R1Y2VkIGFuZCBJbnZhc2l2ZSBTcGVjaWVzIChHUklJUywgUGFnYWQgZXQgYWwuIDIwMTgpLiBUaGUgY2hlY2tsaXN0IGlzIGJ1aWx0IHRocm91Z2ggYW4gb3BlbiBhbmQgcmVwcm9kdWNpYmxlIHdvcmtmbG93IChzZWUgc3RlcCBkZXNjcmlwdGlvbikgZGV2ZWxvcGVkIGZvciB0aGUgVHJJQVMgcHJvamVjdCAoaHR0cDovL3RyaWFzLXByb2plY3QuYmUpIGZyb20gdGhlIGZvbGxvd2luZyBzb3VyY2VzOiAxKSBWZXJsb292ZSBldCBhbC4gKDIwMTgsIGh0dHBzOi8vZG9pLm9yZy8xMC4xNTQ2OC93dGRhMW0pIGZvciBwbGFudHMsIDIpIFByZWRhIGV0IGFsLiAoMjAxOSwgaHR0cHM6Ly9kb2kub3JnLzEwLjE1NDY4L3dyM2dpcykgZm9yIGJpcmRzLCAzKSBWZXJyZXlja2VuIGV0IGFsLiAoMjAxOGEsIGh0dHBzOi8vZG9pLm9yZy8xMC4xNTQ2OC94dnV6ZmgpIGZvciBmaXNoZXMsIDQpIEJvZXRzIGV0IGFsLiAoMjAxOCwgaHR0cHM6Ly9kb2kub3JnLzEwLjE1NDY4L3l4Y3EwNykgZm9yIG1hY3JvaW52ZXJ0ZWJyYXRlcywgNSkgQmFja2VsamF1IGV0IGFsLiAoMjAxOSwgaHR0cHM6Ly9kb2kub3JnLzEwLjE1NDY4L3QxM2t3bykgZm9yIHRlcnJlc3RyaWFsIG1vbGx1c2NzLCA2KSBWYW5kZXJ3ZXllbiBldCBhbC4gKDIwMTgsIGh0dHBzOi8vZG9pLm9yZy8xMC4xNTQ2OC8yZGJveW4pIGZvciBydXN0IGZ1bmdpLCA3KSBGbGFuZGVycyBNYXJpbmUgSW5zdGl0dXRlICgyMDE5LCBodHRwczovL2RvaS5vcmcvMTAuMTQyODQvMzQ3KSBmb3IgbWFyaW5lIHNwZWNpZXMsIDgpIFJleXNlcmhvdmUgZXQgYWwuICgyMDE4LCBodHRwczovL2RvaS5vcmcvMTAuMTU0NjgvM3BtbHhzKSBmb3IgdmFyaW91cyBzcGVjaWVzLCA5KSBaaWVyaXR6IGV0IGFsLiAoMjAxOCwgaHR0cHM6Ly9kb2kub3JnLzEwLjE1NDY4L2d1ZWp6YSkgZm9yIHBhdGh3YXlzLCB3aGljaCBhcmUgYWxsIHB1Ymxpc2hlZCB0aHJvdWdoIHRoZSBUcklBUyBwcm9qZWN0LCBhbmQgdGhlIEdCSUYgQmFja2JvbmUgVGF4b25vbXkgKGh0dHBzOi8vZG9pLm9yZy8xMC4xNTQ2OC8zOW9tZWkpIGZvciBzeW5vbnlteSBhbmQgY2xhc3NpZmljYXRpb24uIFRoZSB1bmlmaWVkIGNoZWNrbGlzdCBpcyBwdWJsaXNoZWQgaGVyZSBhcyBhIHN0YW5kYXJkaXplZCBEYXJ3aW4gQ29yZSBBcmNoaXZlIGFuZCBpbmNsdWRlcyBmb3IgZWFjaCB0YXhvbjogdGhlIHNjaWVudGlmaWMgbmFtZSwgaGlnaGVyIGNsYXNzaWZpY2F0aW9uIGFuZCBzdGFibGUgdGF4b24gaWRlbnRpZmllciwgcHJvdmlkZWQgYnkgdGhlIEdCSUYgQmFja2JvbmUgVGF4b25vbXkgKGluIHRoZSB0YXhvbiBjb3JlKSBhbmQgcmVsYXRlZCBpbmZvcm1hdGlvbiBpbiB0aHJlZSBleHRlbnNpb25zLCBwcm92aWRlZCBieSB0aGUgc291cmNlIGNoZWNrbGlzdHMgKG9yIHRoZSBtb3N0IHRydXN0d29ydGh5IG9uZSBpbiBjYXNlIG9mIGNvbXBldGluZyBpbmZvcm1hdGlvbikuIFRoZSByZWxhdGVkIGluZm9ybWF0aW9uIGNvbnNpc3RzIG9mIHRoZSB5ZWFyIG9mIGZpcnN0IGludHJvZHVjdGlvbiBhbmQgbGFzdCBhc3Nlc3NtZW50L29ic2VydmF0aW9uIGluIEJlbGdpdW0gYW5kIHdoZXJlIGF2YWlsYWJsZSBpdHMgcmVnaW9ucyAoZ2l2ZW4gYXMgYSB5ZWFyIHJhbmdlIGluIHRoZSBldmVudCBkYXRlIGluIHRoZSBkaXN0cmlidXRpb24gZXh0ZW5zaW9uKSwgY29hcnNlIGhhYml0YXQgaW5mb3JtYXRpb24gKGluIHRoZSBzcGVjaWVzIHByb2ZpbGUgZXh0ZW5zaW9uKSBhbmQgdGhlIHBhdGh3YXkocykgb2YgaW50cm9kdWN0aW9uLCBuYXRpdmUgcmFuZ2UocyksIGFuZCBpbnZhc2lvbiBzdGFnZSBpbiBCZWxnaXVtIChpbiB0aGUgZGVzY3JpcHRpb24gZXh0ZW5zaW9uKS4gVGhlIHNvdXJjZSBmb3IgZWFjaCBwaWVjZSBvZiBpbmZvcm1hdGlvbiBpcyBjcmVkaXRlZC4gSXNzdWVzIHdpdGggdGhlIGRhdGFzZXQgY2FuIGJlIHJlcG9ydGVkIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS90cmlhcy1wcm9qZWN0L3VuaWZpZWQtY2hlY2tsaXN0PC9wPlxuPHA+V2UgaGF2ZSByZWxlYXNlZCB0aGlzIGRhdGFzZXQgdW5kZXIgYSBDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uIDQuMCBJbnRlcm5hdGlvbmFsIExpY2Vuc2UgKENDLUJZIDQuMCkuIFdlIHdvdWxkIGFwcHJlY2lhdGUgaXQgaWYgeW91IGZvbGxvdyB0aGUgR0JJRiBjaXRhdGlvbiBndWlkZWxpbmVzIChodHRwczovL3d3dy5nYmlmLm9yZy9jaXRhdGlvbi1ndWlkZWxpbmVzKSB3aGVuIHVzaW5nIHRoZSBkYXRhLiBJZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIHJlZ2FyZGluZyB0aGlzIGRhdGFzZXQsIGRvbuKAmXQgaGVzaXRhdGUgdG8gY29udGFjdCB1cyB2aWEgdGhlIGNvbnRhY3QgaW5mb3JtYXRpb24gcHJvdmlkZWQgaW4gdGhlIG1ldGFkYXRhIG9yIHZpYSBodHRwczovL3R3aXR0ZXIuY29tL3RyaWFzX3Byb2plY3QuPC9wPlxuPHA+VGhpcyBkYXRhc2V0IHdhcyBwdWJsaXNoZWQgYXMgb3BlbiBkYXRhIGZvciB0aGUgVHJJQVMgcHJvamVjdCAoVHJhY2tpbmcgSW52YXNpdmUgQWxpZW4gU3BlY2llcyBodHRwOi8vdHJpYXMtcHJvamVjdC5iZSwgVmFuZGVyaG9ldmVuIGV0IGFsLiAyMDE3KSwgd2l0aCB0ZWNobmljYWwgc3VwcG9ydCBwcm92aWRlZCBieSB0aGUgUmVzZWFyY2ggSW5zdGl0dXRlIGZvciBOYXR1cmUgYW5kIEZvcmVzdCAoSU5CTykuPC9wPiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImZjMThiMGIxLTg3NzctNGM4YS04Y2I4LWY5ZjE1ODcwZDZhOSIsInRpdGxlIjoiVmFsaWRhdGVkIHJlZCBsaXN0cyBvZiBGbGFuZGVycywgQmVsZ2l1bSIsImRlc2NyaXB0aW9uIjoiPHA+VGhlIFZhbGlkYXRlZCByZWQgbGlzdHMgb2YgRmxhbmRlcnMsIEJlbGdpdW0gaXMgYSBzcGVjaWVzIGNoZWNrbGlzdCBkYXRhc2V0IHB1Ymxpc2hlZCBieSB0aGUgUmVzZWFyY2ggSW5zdGl0dXRlIGZvciBOYXR1cmUgYW5kIEZvcmVzdCAoSU5CTykgYW5kIGRlc2NyaWJlZCAodjEuMykgaW4gTWFlcyBldCBhbC4gMjAxOWIgKGh0dHBzOi8vZG9pLm9yZy8xMC4zODk3L0JESi43LmUzNDA4OSkuIEl0IGluY2x1ZGVzIDMuMDYzIHRheGEgZnJvbSAxOSBGbGVtaXNoIHJlZCBsaXN0cyB0aGF0IGFyZSBjb25zaWRlcmVkIHZhbGlkYXRlZCwgaS5lLiB3aGljaCB1c2VkIHF1YW50aXRhdGl2ZSBjcml0ZXJpYSBhbmQgYSByZXByZXNlbnRhdGl2ZSBzYW1wbGUgb2Ygb2NjdXJyZW5jZXMgYWNyb3NzIGFsbCBlY29sb2dpY2FsIHJlZ2lvbnMgaW4gRmxhbmRlcnMgKE1hZXMgZXQgYWwuIDIwMTUpIGZvciByZWQgbGlzdCBhc3Nlc3NtZW50LiBIZXJlIHRoaXMgY29tcGlsYXRpb24gaXMgcHVibGlzaGVkIGFzIGEgc3RhbmRhcmRpemVkIERhcndpbiBDb3JlIEFyY2hpdmUgYW5kIGluY2x1ZGVzIGZvciBlYWNoIHRheG9uOiB0aGUgc2NpZW50aWZpYyBuYW1lLCBoaWdoZXIgY2xhc3NpZmljYXRpb24gKHByb3ZpZGVkIGJ5IHRoZSBHQklGIEJhY2tib25lIFRheG9ub215LCBodHRwczovL2RvaS5vcmcvMTAuMTU0NjgvMzlvbWVpKSwgc3RhYmxlIHRheG9uIGlkZW50aWZpZXIgYW5kIER1dGNoIHZlcm5hY3VsYXIgbmFtZSAoaW4gdGhlIHRheG9uIGNvcmUpLCB0aGUgcmVkIGxpc3QgY2F0ZWdvcnkgaW4gRmxhbmRlcnMgYXMgcHVibGlzaGVkLCBpdHMgSVVDTiBlcXVpdmFsZW50IGFuZCB5ZWFyIG9mIGFzc2Vzc21lbnQgKHJlc3BlY3RpdmVseSBpbiBvY2N1cnJlbmNlUmVtYXJrcywgdGhyZWF0U3RhdHVzIGFuZCBldmVudERhdGUgaW4gdGhlIGRpc3RyaWJ1dGlvbiBleHRlbnNpb24pLCBhbmQgdGhlIGxpZmUtaGlzdG9yeSB0cmFpdHMgYmlvbWUsIGJpb3RvcGUsIGN1ZGRsaW5lc3MsIGxpZmVzcGFuLCBtb2JpbGl0eSwgbnV0cmllbnQgbGV2ZWwsIGFuZCBzcGluZSAoaW4gdGhlIGRlc2NyaXB0aW9uIGV4dGVuc2lvbikuIElzc3VlcyB3aXRoIHRoZSBkYXRhc2V0IGNhbiBiZSByZXBvcnRlZCBhdDogaHR0cHM6Ly9naXRodWIuY29tL2luYm8vcmwtZmxhbmRlcnMtY2hlY2tsaXN0PC9wPlxuPHA+V2UgaGF2ZSByZWxlYXNlZCB0aGlzIGRhdGFzZXQgdG8gdGhlIHB1YmxpYyBkb21haW4gdW5kZXIgYSBDcmVhdGl2ZSBDb21tb25zIFplcm8gd2FpdmVyLiBXZSB3b3VsZCBhcHByZWNpYXRlIGl0IGlmIHlvdSBmb2xsb3cgdGhlIElOQk8gbm9ybXMgZm9yIGRhdGEgdXNlIChodHRwczovL3d3dy5pbmJvLmJlL2VuL25vcm1zLWRhdGEtdXNlKSB3aGVuIHVzaW5nIHRoZSBkYXRhLiBJZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIHJlZ2FyZGluZyB0aGlzIGRhdGFzZXQsIGRvbiYjMzk7dCBoZXNpdGF0ZSB0byBjb250YWN0IHVzIHZpYSB0aGUgY29udGFjdCBpbmZvcm1hdGlvbiBwcm92aWRlZCBpbiB0aGUgbWV0YWRhdGEgb3IgdmlhIG9wZW5kYXRhJiM2NDtpbmJvLmJlLjwvcD4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiI0ZjEwNDdhYy1hMTlkLTQxYTgtOThlYi1kOTY4YjI1NDhiNTMiLCJ0aXRsZSI6Ik5vcndlZ2lhbiBSZWQgTGlzdCAyMDE1IiwiZGVzY3JpcHRpb24iOiI8cD5UaGUgTm9yd2VnaWFuIFJlZCBMaXN0IG9mIFNwZWNpZXMgMjAxNSBoYXMgYmVlbiBjb21waWxlZCBieSB0aGUgTm9yd2VnaWFuIEJpb2RpdmVyc2l0eSBJbmZvcm1hdGlvbiBDZW50cmUgaW4gY29vcGVyYXRpb24gd2l0aCAyNCBjb21taXR0ZWVzIG9mIGV4cGVydHMgd2l0aCBhIHRvdGFsIG9mIDkwIG1lbWJlcnMuIFRoZSBOb3J3ZWdpYW4gUmVkIExpc3Qgb2YgU3BlY2llcyBpbmNsdWRlcyBzcGVjaWVzIHRoYXQgYXJlIGFzc2Vzc2VkIGFzIGJlaW5nIGF0IHJpc2sgb2ZcbmV4dGluY3Rpb24gd2l0aGluIE5vcndheS4gRWFjaCBzcGVjaWVzIGlzIHBsYWNlZCBpbiBvbmUgb2YgYSBudW1iZXIgb2YgY2F0ZWdvcmllcywgd2hpY2ggYXJlIHJhbmtlZCBhY2NvcmRpbmcgdG8gdGhlIGxldmVsIG9mIHJpc2sgdGhhdCBzcGVjaWVzIHdpbGwgZGllIG91dCBpZiBjb25kaXRpb25zIHJlbWFpbiB1bmNoYW5nZWQuPC9wPlxuPHA+UmVkIGxpc3QgYXNzZXNzbWVudHMgYXJlIG9ubHkgbWFkZSBmb3Igc3BlY2llcyB0aGF0IGFyZSBvciBoYXZlIGJlZW4gZXN0YWJsaXNoZWQgYXMgcmVwcm9kdWNpbmcgc3BlY2llcyBpbiBOb3J3YXkuIEFsaWVuIHNwZWNpZXMsIGluIG90aGVyIHdvcmRzIHNwZWNpZXMgdGhhdCBoYXZlIGJlZW4gc3ByZWFkIHRvIE5vcndheSBzaW5jZSAxODAwIGJ5IGh1bWFuIGFjdGl2aXR5LCBhcmUgbm90IGFzc2Vzc2VkLjwvcD5cbjxwPlNwZWNpZXMgYXJlIGFzc2Vzc2VkIGFnYWluc3QgYSBzZXQgb2YgY3JpdGVyaWEgZGV2ZWxvcGVkIGJ5IHRoZSBJbnRlcm5hdGlvbmFsIFVuaW9uIGZvciBDb25zZXJ2YXRpb24gb2YgTmF0dXJlIChJVUNOKS4gVGhlIGNyaXRlcmlhIGFuZCBndWlkZWxpbmVzIGZvciB1c2luZyB0aGVtIGVuc3VyZSB0aGF0IGFzc2Vzc21lbnRzIGFyZSBzdGFuZGFyZGlzZWQsIHZlcmlmaWFibGUgYW5kIG9iamVjdGl2ZS48L3A+XG48cD5UaGUgY2F0ZWdvcmllcyByZWZsZWN0IHRoZSBsZXZlbCBvZiByaXNrIHRoYXQgYSBzcGVjaWVzIHdpbGwgZGllIG91dCBpZiBjb25kaXRpb25zIHJlbWFpbiB1bmNoYW5nZWQuIFNwZWNpZXMgaW4gdGhlIGNhdGVnb3JpZXMgQ3JpdGljYWxseSBFbmRhbmdlcmVkIChDUiksIEVuZGFuZ2VyZWQgKEVOKSBhbmQgVnVsbmVyYWJsZSAoVlUpIGFyZSBkZXNjcmliZWQgYXMgdGhyZWF0ZW5lZCBzcGVjaWVzLjwvcD5cbjxwPlRoZSBhc3Nlc3NtZW50cyBmb3IgbW9zdCBzcGVjaWVzIGdyb3VwcyBhcHBseSB0byBtYWlubGFuZCBOb3J3YXkgYW5kIGFkamFjZW50IE5vcndlZ2lhbiBzZWEgYXJlYXMuIEluIGFsbCwgMjEgNDAyIHNwZWNpZXMgYW5kIDI3OCBzdWJzcGVjaWVzIG9mIHZhc2N1bGFyIHBsYW50cyBoYXZlIGJlZW4gYXNzZXNzZWQgZm9yIHRoZSAyMDE1IGVkaXRpb24gb2YgdGhlIFJlZCBMaXN0LjwvcD4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiI5YTRmYTVmZC02OThiLTQ0ODQtODFjZS1hNDA0OGY1YzJkODYiLCJ0aXRsZSI6IlplaWdlcndlcnRlIHZvbiBQZmxhbnplbiAmIEZsZWNodGVuIGluIE1pdHRlbGV1cm9wYSIsImRlc2NyaXB0aW9uIjoiPHA+RnXMiHIgYWxsZSBpbiBNaXR0ZWxldXJvcGEgdm9yaGFuZGVuZW4gUGZsYW56ZW5hcnRlbiBzaW5kIGluIGRlbSBEYXRlbnNhdHogbW/MiGdsaWNoc3QgZm9sZ2VuZGUgQW5nYWJlbiB6dXNhbW1lbmdlc3RlbGx0OlxuXG4xLiBkaWUgb8yIa29sb2dpc2NoZW4gWmVpZ2Vyd2VydGUgbmFjaCBFbGxlbmJlcmcgKDE5NzkpLCB2ZXJhzIhuZGVydCBlbnRzcHJlY2hlbmQgZGVyIGp1zIhuZ3N0ZW4gQXVmbGFnZSAoRWxsZW5iZXJnIGV0IGFsLjIwMDEpLCB1bmQgbmFjaCBXaXJ0aCAoYnJpZWZsaWNoKSxcblxuMi4gZGllIExlYmVuc+KAkyBvZGVyIFd1Y2hzZm9ybSwgYmVpIEZsZWNodGVuIGF1Y2ggZGFzIFN1YnN0cmF0LjwvcD5cbjxwPkRhcyBvzIhrb2xvZ2lzY2hlIFZlcmhhbHRlbiBnZWdlbnXMiGJlciBlaW5lbSBiZXN0aW1tdGVuIFN0YW5kb3J0ZmFrdG9yIGlzdCBpbiBkZXIgUmVnZWwgZHVyY2ggZWluZSBaaWZmZXIgdm9uIDEgYmlzIDkgYXVzZ2VkcnXMiGNrdC4gRWluZSAwIHdpcmQgbnVyIGJlaW0gU2FsemZha3RvciB2ZXJ3ZW5kZXQ7IHNpZSB3ZWlzdCBhdWYgc2VociBnZXJpbmdlIFRvbGVyYW56IGhpbi4gRGllIFplaWdlcndlcnRlIHNwaWVnZWxuIGRhcyBWb3Jrb21tZW4gZWluZXIgU2lwcGUgaW0gR2VmYcyIbGxlIGRlciBVbXdlbHRmYWt0b3JlbiB1bnRlciBGcmVpbGFuZGJlZGluZ3VuZ2VuIHdpZGVyLCBkLiBoLiBiZWkgYXVzZ2VwcmHMiGd0ZXIgendpc2NoZW5hcnRsaWNoZXIgS29ua3VycmVuei4gRGllIFplaWdlcndlcnRlIHNhZ2VuIGFsc28gbmljaHRzIHXMiGJlciBkaWUg4oCeQW5zcHJ1zIhjaGXigJwsIGFsc28gZGFzIFZlcmhhbHRlbiBpbiBSZWlua3VsdHVyLCBhdXMuPC9wPlxuPHA+U2HMiG10bGljaGUgQW5nYWJlbiBiZWkgZGVuIFplaWdlcndlcnRlbiBiZXppZWhlbiBzaWNoIGF1ZiBkYXMgd2VzdGxpY2hlIE1pdHRlbGV1cm9wYSwgaW5zYmVzb25kZXJlIGF1ZiBXZXN0ZGV1dHNjaGxhbmQsIGVpbnNjaGxpZcOfbGljaCBkZXIgYW5ncmVuemVuZGVuIEFscGVuLjwvcD4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiIyZmMyMzkwNi0zOGYzLTRiYjYtYTRhNC00ZGFkOTA4NjAyYTIiLCJ0aXRsZSI6Ik5vbi12YWxpZGF0ZWQgcmVkIGxpc3Qgb2YgRmxhbmRlcnMsIEJlbGdpdW0iLCJkZXNjcmlwdGlvbiI6IjxwPlRoZSBOb24tdmFsaWRhdGVkIHJlZCBsaXN0cyBvZiBGbGFuZGVycywgQmVsZ2l1bSBpcyBhIHNwZWNpZXMgY2hlY2tsaXN0IGRhdGFzZXQgcHVibGlzaGVkIGJ5IHRoZSBSZXNlYXJjaCBJbnN0aXR1dGUgZm9yIE5hdHVyZSBhbmQgRm9yZXN0IChJTkJPKSBhbmQgZGVzY3JpYmVkICh2MS4xKSBpbiBNYWVzIGV0IGFsLiAyMDE5YiAoaHR0cHM6Ly9kb2kub3JnLzEwLjM4OTcvQkRKLjcuZTM0MDg5KS4gSXQgaW5jbHVkZXMgMy4xNjEgdGF4YSBmcm9tIDE5IEZsZW1pc2ggcmVkIGxpc3RzIHRoYXQgYXJlIGNvbnNpZGVyZWQgbm9uLXZhbGlkYXRlZCwgaS5lLiB3aGljaCBkaWQgbm90IHVzZSBxdWFudGl0YXRpdmUgY3JpdGVyaWEgYW5kIGEgcmVwcmVzZW50YXRpdmUgc2FtcGxlIG9mIG9jY3VycmVuY2VzIGFjcm9zcyBhbGwgZWNvbG9naWNhbCByZWdpb25zIGluIEZsYW5kZXJzIChNYWVzIGV0IGFsLiAyMDE1KSBmb3IgcmVkIGxpc3QgYXNzZXNzbWVudC4gSGVyZSB0aGlzIGNvbXBpbGF0aW9uIGlzIHB1Ymxpc2hlZCBhcyBhIHN0YW5kYXJkaXplZCBEYXJ3aW4gQ29yZSBBcmNoaXZlIGFuZCBpbmNsdWRlcyBmb3IgZWFjaCB0YXhvbjogdGhlIHNjaWVudGlmaWMgbmFtZSwgaGlnaGVyIGNsYXNzaWZpY2F0aW9uIChwcm92aWRlZCBieSB0aGUgR0JJRiBCYWNrYm9uZSBUYXhvbm9teSwgaHR0cHM6Ly9kb2kub3JnLzEwLjE1NDY4LzM5b21laSksIHN0YWJsZSB0YXhvbiBpZGVudGlmaWVyIGFuZCBEdXRjaCB2ZXJuYWN1bGFyIG5hbWUgKGluIHRoZSB0YXhvbiBjb3JlKSBhbmQgdGhlIHJlZCBsaXN0IGNhdGVnb3J5IGluIEZsYW5kZXJzIGFzIHB1Ymxpc2hlZCwgaXRzIElVQ04gZXF1aXZhbGVudCBhbmQgeWVhciBvZiBhc3Nlc3NtZW50IChyZXNwZWN0aXZlbHkgaW4gb2NjdXJyZW5jZVJlbWFya3MsIHRocmVhdFN0YXR1cyBhbmQgZXZlbnREYXRlIGluIHRoZSBkaXN0cmlidXRpb24gZXh0ZW5zaW9uKS4gSXNzdWVzIHdpdGggdGhlIGRhdGFzZXQgY2FuIGJlIHJlcG9ydGVkIGF0OiBodHRwczovL2dpdGh1Yi5jb20vaW5iby9ybC1mbGFuZGVycy1jaGVja2xpc3Q8L3A+XG48cD5XZSBoYXZlIHJlbGVhc2VkIHRoaXMgZGF0YXNldCB0byB0aGUgcHVibGljIGRvbWFpbiB1bmRlciBhIENyZWF0aXZlIENvbW1vbnMgWmVybyB3YWl2ZXIuIFdlIHdvdWxkIGFwcHJlY2lhdGUgaXQgaWYgeW91IGZvbGxvdyB0aGUgSU5CTyBub3JtcyBmb3IgZGF0YSB1c2UgKGh0dHBzOi8vd3d3LmluYm8uYmUvZW4vbm9ybXMtZGF0YS11c2UpIHdoZW4gdXNpbmcgdGhlIGRhdGEuIElmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgcmVnYXJkaW5nIHRoaXMgZGF0YXNldCwgZG9uJiMzOTt0IGhlc2l0YXRlIHRvIGNvbnRhY3QgdXMgdmlhIHRoZSBjb250YWN0IGluZm9ybWF0aW9uIHByb3ZpZGVkIGluIHRoZSBtZXRhZGF0YSBvciB2aWEgb3BlbmRhdGEmIzY0O2luYm8uYmUuPC9wPiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImE0NDg1OWM2LWFmNGYtNGEyYS1hMTg0LTFiMmQ2OGM4MjA5OSIsInRpdGxlIjoiRkFVTkEgT0YgVEhFIEtVUklMU0tJWSBOQVRVUkUgUkVTRVJWRSIsImRlc2NyaXB0aW9uIjoiTW9uaXRvcmluZyBhbmQgaW52ZW50b3J5IG9mIHRoZSBzcGVjaWVzIG9mIHRoZSBLdXJpbHNreSBOYXR1cmUgUmVzZXJ2ZSBpcyBjYXJyaWVkIG91dCBzaW5jZSAxOTg0LiBWZXJ0ZWJyYXRlcyBjb21wb3NlIDIgc3BlY2llcyBvZiBjeWNsb3N0b21hdGVzLCA0MSBvZiBmaXNoLCAzIHNwZWNpZXMgb2YgYW1waGliaWFucywgNSBzcGVjaWVzIG9mIHJlcHRpbGVzLCAyODEgc3BlY2llcyBvZiBiaXJkcyBhbmQgMjkgc3BlY2llcyBvZiBtYW1tYWxzLiA0NjY4IHNwZWNpZXMgb2YgaW52ZXJ0ZWJyYXRlcyBoYXZlIGJlZW4gcmVjb3JkZWQuXG5UaGUgZmF1bmEgb2YgdGhlIHJlc2VydmUgaXMgcmVwcmVzZW50ZWQgYnkgNTAyNyBzcGVjaWVzLCA5MCUgb2Ygd2hpY2ggYXJlIGludmVydGVicmF0ZXMuIEFtb25nIHZlcnRlYnJhdGVzLCB0aGUgcmljaGVzdCBpbiB0ZXJtIG9mIHNwZWNpZXNpcyBvcm5pdG9mYXVuYSDigJMgMjgxIHNwZWNpZXMsIGluY2x1ZGluZyAxMjUgbmVzdGxpbmcgc3BlY2llcy4gVGhlIFJlZCBib29rIG9mIHRoZSBSdXNzaWFuIGluY2x1ZGVzIDMzIHNwZWNpZXMgb2YgYmlyZHMuIFRoZSByYXJlc3QgYW5kIG1vc3QgaW50ZXJlc3RpbmcgYmlyZHMgYXJlIHRoZSBmb2xsb3dpbmc6IHRoZSBpc2xhbmQgc3Vic3BlY2llcyBvZiBmaXNoIG93bCAoS2V0dXBhIGJsYWtpc3RvbmkpLCBKYXBhbmVzZSBjcmFuZSAoR3J1cyBqYXBvbmVuc2lzKSwgIFN0ZWxsZXImIzM5O3Mgc2VhIGVhZ2xlIChIYWxpYWVldHVzIHBlbGFnaWN1cyksIHRoZSBtYW5kYXJpbiBkdWNrIChBaXggZ2FsZXJpY3VsYXRhKSwgSmFwYW5lc2UgZ3JlZW4gcGlnZW9uIChUcmVyb24gc2llYm9sZGlpKSwgdmFyaWVkIHRpdCAoUGFydXMgdmFyaXVzIGFuZCBjcmVzdGVkIGtpbmdmaXNoZXIgKE1lZ2FjZXJ5bGUgbHVndWJyaXMpLiBcblRoZXJlIGFyZSAyOSBzcGVjaWVzIG9mIG1hbW1hbHMgcmVnaXN0ZXJlZCBpbiB0aGUgcmVzZXJ2ZS4gVGhlIGxhcmdlc3QgcmVwcmVzZW50YXRpdmUgaXMgdGhlIGJyb3duIGJlYXIgKFVyc3VzIGFyY3Rvcyk7IGl0IGlzIHJlbWFya2FibGUgdGhhdCBpbiB0aGUgdGVycml0b3J5IG9mIEt1bmFzaGlyIElzbGFuZCB0aGVyZSBhcmUgaW5kaXZpZHVhbHMgd2l0aCBhbiB1bnVzdWFsIGdyYXkgY29sb3IuIFRoZSByZWQgZm94IChWdWxwZXMgdnVscGVzKSwgbW91bnRhaW4gaGFyZSAoTGVwdXMgdGltaWR1cyksIFNpYmVyaWFuIGNoaXBtdW5rIChFdXRhbWlhcyBzaWJpcmljdXMpLCBzYWJsZSAoTWFydGVzIHppYmVsbGluYSksIHdlYXNlbCAoTXVzdGVsYSBuaXZhbGlzKSBhcmUgbW9zdCBmcmVxdWVudGx5IHJlZmVyZW5jZWQuIEluIHRoZSB3YXRlcnMgb2YgdGhlIEt1bmFzaGlyIGFuZCBvbiB0aGUgY2xpZmZzIG9mIHRoZSBpc2xhbmRzIG9mIHRoZSBMZXNzZXIgS3VyaWwgUmlkZ2UsIHRoZSBTdGVsbGVyIHNlYSBsaW9uIChFdW1ldG9waWFzIGp1YmF0dXMpIGNhbiBiZSBvYnNlcnZlZC4gVGhlIHNlYSBvdHRlciBpcyBhbHNvIG9ic2VydmVkIG5lYXIgdGhlIGlzbGFuZHMgKEVuaHlkcmEgbHV0cmlzIGdyYWNpbGlzKSBbVm9yb25vdiwgMjAwNF0uIExhcmdlIHJvb2tlcmllcyBvZiB0aGUgc3BvdHRlZCBzZWFsIChQaG9jYSBsYXJnaGEpIGFuZCBoYXJib3Igc2VhbCAoUGhvY2Egdml0dWxpbmEpIGFyZSBsb2NhdGVkIGFsb25nIHRoZSBjb2FzdCBvZiBLdW5hc2hpciBJc2xhbmQuIDMgc3BlY2llcyBvZiBtYW1tYWxzIChTdGVsbGVyIHNlYSBsaW9uLCBoYXJib3Igc2VhbCBhbmQgc2VhIG90dGVyKSBhcmUgcmFyZSBhbmQgbGlzdGVkIGluIHRoZSBSZWQgYm9vayBvZiB0aGUgUnVzc2lhbiBGZWRlcmF0aW9uLlxuNSBzcGVjaWVzIG9mIHJlcHRpbGVzOiB0aGUgSmFwYW5lc2UgZml2ZS1saW5lZCBza2luayAoUGxlc3Rpb2RvbiBmaW5pdGltdXMpLCBKYXBhbmVzZSBmb3VyLWxpbmVkIHJhdHNuYWtlIChFbGFwaGUgcXVhZHJpdmlyZ2F0YSksIEphcGFuZXNlIHJhdCBzbmFrZSAoRWxhcGhlIGNsaW1hY29waG9yYSksIEphcGFuZXNlIGZvcmVzdCByYXQgc25ha2UgKEVsYXBoZSBqYXBvbmljYSksIG1hbXVzaGkgKEdsb3lkaXVzIGJsb21ob2ZmaWkgYmxvbWhvZmZpaSkgbW9zdCBvZnRlbiBvYnNlcnZlZCBpbiB0aGUgYXJlYSBvZiBob3Qgc3ByaW5ncy4gXG5UaGVyZSBhcmUgMyBzcGVjaWVzIG9mIGFtcGhpYmlhbnMgbmVhciB0aGUgcGVyZW5uaWFsIGltcG91bmRlZCBhbmQgaW50ZXJtaXR0ZW50IHdhdGVyIGJvZGllczogdGhlIFNpYmVyaWFuIHNhbGFtYW5kZXIgKFNhbGFtYW5kcmVsbGEga2V5c2VybGluZ2lpKSwgSmFwYW5lc2UgdHJlZSBmcm9nIChIeWxhIGphcG9uaWNhKSwgdGhlIEhva2thaWTFjSBmcm9nIChSYW5hIHBpcmljYSkgW1Jhc3RpdGVsbnlpIHpoaXZvdG55IG1pci4uLiwgMjAwMl0uXG4zOSBzcGVjaWVzIG9mIGZpc2ggYXJlIGZvdW5kaW4gdGhlIHdhdGVyIGJvZGllcyBvZiB0aGUgcmVzZXJ2ZSwgYW1vbmcgd2hpY2ggdGhlcmUgaXMgYSByYXJlIHNwZWNpZXMg4oCTIHRoZSBTYWtoYWxpbiB0YWltZW4gKFBhcmFodWNobyBwZXJyeWkpLiIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6ImZkZDQ5ZDhjLTQ2MGItNDQwMi05NDZlLTQwODA4NGFjNGU4NiIsInRpdGxlIjoiT2RvbmF0YSIsInR5cGUiOiJDSEVDS0xJU1QifSx7ImtleSI6IjAyZmZmOWVhLWU2MjktNDU4ZC1iOTllLWNiN2RjOWRlYWUwMSIsInRpdGxlIjoiUGxhbnRhcyBhbGltZW50aWNpYXMgeSBtZWRpY2luYWxlcyBkZSBDb2xvbWJpYSIsImRlc2NyaXB0aW9uIjoiRWwgY29uanVudG8gZGUgZGF0b3MgY29udGllbmUgdW4gdG90YWwgZGUgMjU2NyBlc3BlY2llcyBkZSBwbGFudGFzIHkgZnVlIGNvbnN0cnVpZG8gYSBwYXJ0aXIgZGUgdW5hIHJlY29waWxhY2nDs24gZGUgbG9zIHByb2R1Y3RvcyBhc29jaWFkb3MgYSBjb250cmF0b3MgcmVhbGl6YWRvcyBwb3IgSGVucnkgWWVzaWQgQmVybmFsICgxMS0xMS0wMjAtMDYzUFMgeSAxMi0wMjQtMDYwUFMpIHkgTmVzdG9yIEdhcmPDrWEgKDExLTExLTAyMC0yNDBQUyB5IDEyLTEyLTAyNC0wNTFQUykgcXVpZW5lcyBhIHBhcnRpciBpbmZvcm1hY2nDs24gYmlibGlvZ3LDoWZpY2EsIHJlYWxpemFyb24gbGlzdGFkb3MgZGUgZXNwZWNpZXMgZGUgcGxhbnRhcyBtZWRpY2luYWxlcyBleGNsdXNpdmFzIHkgbmF0aXZhcyBkZSBDb2xvbWJpYSwgeSBwbGFudGFzIGFsaW1lbnRpY2lhcyBwcmlvcml6YWRhcyBwYXJhIGNhcmFjdGVyaXphY2nDs24gZGUgcmllc2dvIGRlIGV4dGluY2nDs24sIHJlc3BlY3RpdmFtZW50ZS4iLCJ0eXBlIjoiQ0hFQ0tMSVNUIn0seyJrZXkiOiI1NmM4M2ZkOS01MzNiLTRiNzctYTY3YS1jZjUyMTgxNjg2NmUiLCJ0aXRsZSI6IkNhdGFsb2d1ZSBvZiBUZW5lYnJpb25pZGFlIChDb2xlb3B0ZXJhKSBvZiBOb3J0aCBBbWVyaWNhIiwiZGVzY3JpcHRpb24iOiJUaGlzIERhcndpbiBDb3JlIEFyY2hpdmUgY29udGFpbnMgdGhlIG5vbWVuY2xhdHVyYWwgYW5kIHRheG9ub21pYyBpbmZvcm1hdGlvbiBpbmNsdWRlZCBpbiB0aGUgQ2F0YWxvZ3VlIG9mIFRlbmVicmlvbmlkYWUgKENvbGVvcHRlcmEpIG9mIE5vcnRoIEFtZXJpY2EsIFpvb2tleXMgNzI4OjEtNDU1LiBodHRwczovL2RvaS5vcmcvMTAuMzg5Ny96b29rZXlzLjcyOC4yMDYwMlxuXG5BbGwgYXZhaWxhYmxlIGZhbWlseS0gZ2VudXMtIGFuZCBzcGVjaWVzLWdyb3VwIG5hbWVzIGFyZSBpbmNsdWRlZCBhbG9uZyB3aXRoIHRoZSBoaWdoZXIgY2xhc3NpZmljYXRpb24gYW5kIHRheG9ub21pYyBzdGF0dXMgZm9yIGVhY2ggdGF4b24uIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiOTk5NDhhOGItNjNiMi00MWJmLTlkMTAtNmUwMDdlOTY3Nzg5IiwidGl0bGUiOiJNYW50b2RlYSBTcGVjaWVzIEZpbGUiLCJkZXNjcmlwdGlvbiI6IlRoaXMgZmlsZSBjb250YWlucyB0YXhvbiBuYW1lcyBhbmQgcmVsYXRlZCBub21lbmNsYXR1cmFsIGluZm9ybWF0aW9uIGZvciB0aGUgb3JkZXIgTWFudG9kZWEgb3JpZ2luYXRpbmcgZnJvbSB0aGUgTWFudG9kZWEgU3BlY2llcyBGaWxlIG1haW50YWluZWQgYnkgdGhlIFNwZWNpZXMgRmlsZSBHcm91cCAoaHR0cDovL3NvZnR3YXJlLnNwZWNpZXNmaWxlLm9yZykgYXQgdGhlIFVuaXZlcnNpdHkgb2YgSWxsaW5vaXMsIElsbGlub2lzIE5hdHVyYWwgSGlzdG9yeSBTdXJ2ZXkuIiwidHlwZSI6IkNIRUNLTElTVCJ9LHsia2V5IjoiNzBhZDg2ZjQtNmJlOC00ZTViLWFlZTgtNjE4OTYzMTBmYjE4IiwidGl0bGUiOiJQZWxhZ2ljIEludmVydGVicmF0ZXMiLCJ0eXBlIjoiQ0hFQ0tMSVNUIn1d
  recorded_at: 2020-02-12 06:01:31 GMT
  recorded_with: vcr/0.4.0, webmockr/0.5.0
